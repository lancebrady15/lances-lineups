---
title: "Blog Post #3: Baserunning"
author: "Lance Brady"
date: "2025-03-05"
categories: [baserunning, lineups, statcast]
format: html
editor: visual
image: blog3.jpg
execute:
  eval: false
---

# Takeaways

1.  

## Introduction to Baserunning

As Statcast expands the data they are able to collect and parse through, one big innovation is the creation of "Baserunning Runs," which aims to estimate the number of runs a player is creating through baserunning alone. Statcast defines it as follows:

"A Statcast metric designed to express the overall value of a baserunner, measured in runs created (or lost) via stealing bases and taking extra bases on the basepaths. Each steal opportunity is assigned a probability of being successful or not, based on the pitcher and catcher the basestealer is running against. Each successful or failed steal attempt is assigned a run value, with a stolen base or advance via a balk worth +0.2 runs for the baserunner and a caught stealing or pickoff worth -0.45 runs. For non-steal baserunning plays, an estimated success probability is generated for each opportunity using inputs that include runner speed, outfielder throwing arm, runner position on the basepaths and outfielder distance from both the ball and the bases. That can be translated to a run value based on whether the runner successfully takes the extra base, is thrown out or does not attempt to advance (holds)." (MLB, 2025)

A player's speed is only as useful as they make it, so lineup construction analysis, which often references the need for speed at the top and bottom of the order, would benefit from using this advanced data. Managers no longer have to use sprint speed to proxy a player's value on the basepaths, they can use a player's true baserunning value.

It is worth noting that the MLB opted for bigger bases in 2023 to increase action on the basepaths. This means that although Statcast has baserunning data going back to 2016, we will focus on just the 2023 and 2024 seasons to make our analysis more applicable to future seasons.

## Aim

This article aims to answer a couple of questions about the role baserunning has in lineup construction. We'd like to answer the following research questions, which focus on distinct parts of baserunner effects within the game:

1.  Does having a perceived (and measured) speed threat on base lead to measurable changes in pitch selection or velocity, and does that in turn correlate with better offensive outcomes?
2.  What is the optimal positioning of baserunning value within a lineup? Is it better to cluster speedy players consecutively (for multiple stolen bases or first-to-third attempts in an inning) or to spread them out to maximize the impact in different segments of the lineup?
3.  Since 2023, how well have managers optimized their team's speed in their lineups?

## Setup

To answer Question #1, we will need two datasets: Statcast pitch-by-pitch data for all of 2023/2024 and Statcast Baserunning data for the same seasons.

## Methods

For full methods and model outputs [view the full appendix here](../../appendix/blog3-appendix.qmd).


## Model #1: Pitcher Behavior
To do models on pitcher behavior, we will need a new statcast dataframe that incorporates the baserunning data. We will create a new dataframe, `statcast_data_baserunning`, that contains the same columns as `statcast_data` but with the addition of the `pa_runner_average_value` column.

### Pitch Velocity with Speed on Base

Our first model will be a mixed-effects model studying how fast pitchers throw with different on-base variations.

```{r}
statcast_data_baserunning = readRDS("data/statcast_data_baserunning.rds")
```

```{r}
model_vel <- lmer(
  release_speed ~ first_base_runner_value + second_base_runner_value + third_base_runner_value + run_diff + outs_when_up + baserunner_state + factor(balls) + factor(strikes) +
    (1 | pitcher),
  data = statcast_data_baserunning
)
summary(model_vel)
```

### Pitch Location with Speed on Base

Our next model will be a mixed-effects model studying how pitchers locate with different on-base variations.

```{r}
model_location <- lmer(
  plate_z ~ first_base_runner_value + second_base_runner_value + third_base_runner_value + run_diff + outs_when_up + baserunner_state + factor(balls) + factor(strikes) +
    (1 | pitcher),
  data = statcast_data_baserunning
)
summary(model_location)

```

### Pitch Selection with Speed on Base
If you want to see whether pitchers throw more fastballs with speed on base, we can define a binary:

```{r}
statcast_data_baserunning <- statcast_data_baserunning %>%
  mutate(
    is_fastball = if_else(
      pitch_type %in% c("FF","FA","FT","SI","FC"), 1, 0
    )
  )
)

# Fit logistic mixed model
model_pitch_select <- glmer(
  is_fastball ~ first_base_runner_value + second_base_runner_value + third_base_runner_value + run_diff + outs_when_up + baserunner_state + factor(balls) + factor(strikes) +
    (1 | pitcher), 
  data = statcast_data_baserunning,
  family = binomial(link = "logit")
)
summary(model_pitch_select)
```


## Model #2: Offensive Perfornance with Speed on Base (EXPAND ON THESE)

Next, we need to get PA-level data to analyze the impact of speed on base on offensive performance. Now that we have the speed on base for each pitch, we can aggregate this to the PA level to get the total speed on base for each PA. 

```{r}
m_speed = lmer(pa_xwOBA ~ batter_xwOBA + pa_runner_average_value + (1 | pitcher),
             data = pa_data_final)

summary(m_speed)

m_speed <- lmer(
  pa_xwOBA ~ batter_xwOBA + next_batter_xwOBA + 
    batter_handedness + potential_next_batter_handedness +
    outs_when_up + run_diff + baserunner_state * first_base_runner_value + baserunner_state * second_base_runner_value + baserunner_state * third_base_runner_value +
    (1 | pitcher),
  data = pa_data_final
)

summary(m_speed)
```

## Visualizations
INSERT VISUALIZATIONS

## Discussion
INSERT DISCUSSION

## References
INSERT REFERENCES
