# Make sure IDs and years are characters or integers
basestealing_data <- basestealing_data %>%
mutate(
player_id = as.character(player_id),
start_year = as.integer(start_year)
)
pa_data_final <- pa_data_final %>%
mutate(
on_1b = as.character(on_1b),
game_year = as.integer(game_year)
)
pa_data_final <- pa_data_final %>%
left_join(
basestealing_data %>%
select(player_id, start_year, n_sb, n_cs, rate_sbx),
by = c("on_1b" = "player_id", "game_year" = "start_year")
)
pa_data_final <- pa_data_final %>%
mutate(
runner_only_on_1B = if_else(!is.na(on_1b) & is.na(on_2b) & is.na(on_3b), 1, 0)
)
# Prepare sprint speed data
sprint_speed <- sprint_speed %>%
mutate(player_id = as.character(player_id),
game_year = as.character(game_year))
sprint_speed
# Make sure player_id is character
sprint_speed <- sprint_speed %>%
mutate(player_id = as.character(player_id))
# Join sprint speed to plate appearance data by player ID only
pa_data_final <- pa_data_final %>%
left_join(
sprint_speed %>% select(player_id, sprint_speed),
by = c("on_1b" = "player_id")
) %>%
rename(on_1B_speed = sprint_speed) %>%
left_join(
sprint_speed %>% select(player_id, sprint_speed),
by = c("on_2b" = "player_id")
) %>%
rename(on_2B_speed = sprint_speed) %>%
left_join(
sprint_speed %>% select(player_id, sprint_speed),
by = c("on_3b" = "player_id")
) %>%
rename(on_3B_speed = sprint_speed)
model_value <- lmer(
pa_xwOBA ~ first_base_runner_value + second_base_runner_value + third_base_runner_value +
batter_xwOBA + next_batter_xwOBA + outs_when_up + (1 | pitcher_year),
data = pa_data_final
)
summary(model_value)
model_value <- lmer(
pa_xwOBA ~ first_base_runner_value + second_base_runner_value + third_base_runner_value +
batter_xwOBA + next_batter_xwOBA + outs_when_up + baserunner_state + inning_grouped
(1 | pitcher_year),
data = pa_data_final
)
model_value <- lmer(
pa_xwOBA ~ first_base_runner_value + second_base_runner_value + third_base_runner_value +
batter_xwOBA + next_batter_xwOBA + outs_when_up + baserunner_state + inning_grouped +
(1 | pitcher_year),
data = pa_data_final
)
summary(model_value)
model_speed <- lmer(
pa_xwOBA ~ on_1B_speed + on_2B_speed + on_3B_speed +
batter_xwOBA + next_batter_xwOBA + outs_when_up + baserunner_state + inning_grouped +
(1 | pitcher_year),
data = pa_data_final
)
hist(pa_data_final$on_1B_speed)
model_elite <- lmer(
pa_xwOBA ~ top_runner_1B + top_runner_2B + top_runner_3B +
batter_xwOBA + next_batter_xwOBA + outs_when_up + baserunner_state + inning_grouped +
(1 | pitcher_year),
data = pa_data_final
)
summary(model_elite)
levels(pa_data_final$baserunner_state)
levels(pa_data_final$inning_grouped)
model_speed <- lmer(
pa_xwOBA ~ on_1B_speed + on_2B_speed + on_3B_speed +
batter_xwOBA + next_batter_xwOBA + outs_when_up + baserunner_state + inning_grouped +
(1 | pitcher_year),
data = pa_data_final
)
summary(pa_data_final$on_1B_speed)
model_speed <- lmer(
pa_xwOBA ~ on_1B_speed + on_2B_speed + on_3B_speed +
batter_xwOBA + next_batter_xwOBA + outs_when_up + baserunner_state + inning_grouped +
(1 | pitcher_year),
data = pa_data_final
)
model_speed <- lmer(
pa_xwOBA ~ on_1B_speed + on_2B_speed + on_3B_speed +
batter_xwOBA + next_batter_xwOBA + outs_when_up + inning_grouped +
(1 | pitcher_year),
data = pa_data_final
)
summary(model_speed)
model_speed <- lmer(
pa_xwOBA ~ on_1B_speed + on_2B_speed + on_3B_speed +
batter_xwOBA + next_batter_xwOBA + outs_when_up + inning_grouped + baserunner_state,
data = pa_data_final
)
model_speed <- lmer(
pa_xwOBA ~ on_1B_speed + on_2B_speed + on_3B_speed +
batter_xwOBA + next_batter_xwOBA + outs_when_up + inning_grouped + baserunner_state +
(1 | pitcher_year),
data = pa_data_final
)
summary(pa_data_final$inning_grouped)
summary(pa_data_final$baserunner_state)
summary(pa_data_final$on_1B_speed)
summary(pa_data_final$on_2B_speed)
summary(pa_data_final$on_3B_speed)
mean_speed <- mean(sprint_speed$sprint_speed, na.rm = TRUE)
pa_data_final <- pa_data_final %>%
mutate(
on_1B_speed = case_when(
is.na(on_1b) ~ 0,  # no runner on base â†’ 0
is.na(on_1B_speed) ~ mean_speed,  # runner on base but missing speed â†’ mean
TRUE ~ on_1B_speed
),
on_2B_speed = case_when(
is.na(on_2b) ~ 0,
is.na(on_2B_speed) ~ mean_speed,
TRUE ~ on_2B_speed
),
on_3B_speed = case_when(
is.na(on_3b) ~ 0,
is.na(on_3B_speed) ~ mean_speed,
TRUE ~ on_3B_speed
)
)
model_speed <- lmer(
pa_xwOBA ~ on_1B_speed + on_2B_speed + on_3B_speed +
batter_xwOBA + next_batter_xwOBA + outs_when_up + inning_grouped + baserunner_state +
(1 | pitcher_year),
data = pa_data_final
)
summary(model_speed)
pa_data_final <- pa_data_final %>%
mutate(
baserunner_1B_present = baserunner_state %in% c("1B", "1B-2B", "1B-3B", "Loaded"),
baserunner_2B_present = baserunner_state %in% c("2B", "1B-2B", "2B-3B", "Loaded"),
baserunner_3B_present = baserunner_state %in% c("3B", "1B-3B", "2B-3B", "Loaded")
baserunner_1B_only = baserunner_state == "1B",
pa_data_final <- pa_data_final %>%
mutate(
baserunner_1B_present = baserunner_state %in% c("1B", "1B-2B", "1B-3B", "Loaded"),
baserunner_2B_present = baserunner_state %in% c("2B", "1B-2B", "2B-3B", "Loaded"),
baserunner_3B_present = baserunner_state %in% c("3B", "1B-3B", "2B-3B", "Loaded")
baserunner_1B_only = baserunner_state == "1B",
pa_data_final <- pa_data_final %>%
mutate(
baserunner_1B_present = baserunner_state %in% c("1B", "1B-2B", "1B-3B", "Loaded"),
baserunner_2B_present = baserunner_state %in% c("2B", "1B-2B", "2B-3B", "Loaded"),
baserunner_3B_present = baserunner_state %in% c("3B", "1B-3B", "2B-3B", "Loaded")
baserunner_1B_only = baserunner_state == "1B",
pa_data_final <- pa_data_final %>%
mutate(
baserunner_1B_present = baserunner_state %in% c("1B", "1B-2B", "1B-3B", "Loaded"),
baserunner_2B_present = baserunner_state %in% c("2B", "1B-2B", "2B-3B", "Loaded"),
baserunner_3B_present = baserunner_state %in% c("3B", "1B-3B", "2B-3B", "Loaded"),
baserunner_1B_only = baserunner_state == "1B",
baserunner_2B_only = baserunner_state == "2B",
baserunner_3B_only = baserunner_state == "3B")
model_speed <- lmer(
pa_xwOBA ~ on_1B_speed* baserunner_1B_present + on_2B_speed + on_3B_speed +
batter_xwOBA + next_batter_xwOBA + outs_when_up + inning_grouped + baserunner_state +
(1 | pitcher_year),
data = pa_data_final
)
summary(model_speed)
model_speed <- lmer(
pa_xwOBA ~ on_1B_speed* baserunner_1B_present + on_2B_speed + on_3B_speed +
batter_xwOBA + next_batter_xwOBA + outs_when_up + inning_grouped +
(1 | pitcher_year),
data = pa_data_final
)
summary(model_speed)
model_speed <- lmer(
pa_xwOBA ~ on_1B_speed:baserunner_1B_present + on_2B_speed + on_3B_speed +
batter_xwOBA + next_batter_xwOBA + outs_when_up + inning_grouped +
(1 | pitcher_year),
data = pa_data_final
)
summary(model_speed)
model_speed <- lmer(
pa_xwOBA ~ on_1B_speed:baserunner_1B_only + on_2B_speed + on_3B_speed + current_matchup_advantage +
batter_xwOBA + next_batter_xwOBA + outs_when_up + inning_grouped +
(1 | pitcher_year),
data = pa_data_final
)
summary(model_speed)
model_speed <- lmer(
pa_xwOBA ~ on_1B_speed:baserunner_1B_only + on_2B_speed:baserunner_2B_only + on_3B_speed + current_matchup_advantage +
batter_xwOBA + next_batter_xwOBA + outs_when_up + inning_grouped +
(1 | pitcher_year),
data = pa_data_final
)
model_speed <- lmer(
pa_xwOBA ~
on_1B_speed * baserunner_1B_present +
on_2B_speed * baserunner_2B_present +
on_3B_speed * baserunner_3B_present +
batter_xwOBA + next_batter_xwOBA +
current_matchup_advantage + outs_when_up + inning_grouped +
(1 | pitcher_year),
data = pa_data_final
)
model_speed <- lmer(
pa_xwOBA ~
on_1B_speed * baserunner_1B_present +
on_2B_speed * baserunner_2B_present +
on_3B_speed * baserunner_3B_present +
batter_xwOBA + next_batter_xwOBA +
current_matchup_advantage + outs_when_up + inning_grouped +
(1 | pitcher_year),
data = pa_data_final
)
summary(model_speed)
pa_data_runners <- pa_data_final %>%
filter(baserunner_1B_present | baserunner_2B_present | baserunner_3B_present)
model_speed_runners <- lmer(
pa_xwOBA ~
on_1B_speed + on_2B_speed + on_3B_speed +
batter_xwOBA + next_batter_xwOBA +
current_matchup_advantage + outs_when_up + inning_grouped +
(1 | pitcher_year),
data = pa_data_runners
)
summary(model_speed_runners)
model_value <- lmer(
pa_xwOBA ~ first_base_runner_value + second_base_runner_value + third_base_runner_value +
batter_xwOBA + next_batter_xwOBA + outs_when_up + baserunner_state + inning_grouped +
(1 | pitcher_year),
data = pa_data_runners
)
summary(model_value)
model_elite <- lmer(
pa_xwOBA ~ top_runner_1B + top_runner_2B + top_runner_3B +
batter_xwOBA + next_batter_xwOBA + outs_when_up + baserunner_state + inning_grouped +
(1 | pitcher_year),
data = pa_data_runners
)
summary(model_elite)
summary(model_value)
summary(model_speed_runners)
summary(model_elite)
any_elite_runner_on_base = top_runner_1B | top_runner_2B | top_runner_3B
pa_data_final = pa_data_final%>%
mutate(any_elite_runner_on_base = (top_runner_1B | top_runner_2B | top_runner_3B))
model_elite <- lmer(
pa_xwOBA ~ any_elite_runner_on_base +
batter_xwOBA + next_batter_xwOBA + outs_when_up + baserunner_state + inning_grouped +
(1 | pitcher_year),
data = pa_data_runners
)
pa_data_final = pa_data_final%>%
mutate(any_elite_runner_on_base = (top_runner_1B | top_runner_2B | top_runner_3B))
model_elite <- lmer(
pa_xwOBA ~ any_elite_runner_on_base +
batter_xwOBA + next_batter_xwOBA + outs_when_up + baserunner_state + inning_grouped +
(1 | pitcher_year),
data = pa_data_runners
)
pa_data_runners = pa_data_runners %>%
mutate(any_elite_runner_on_base = top_runner_1B | top_runner_2B | top_runner_3B)
model_elite <- lmer(
pa_xwOBA ~ any_elite_runner_on_base +
batter_xwOBA + next_batter_xwOBA + outs_when_up + baserunner_state + inning_grouped +
(1 | pitcher_year),
data = pa_data_runners
)
summary(model_elite)
model_elite <- lmer(
pa_xwOBA ~ top_runner_1B + top_runner_2B + top_runner_3B +
batter_xwOBA + next_batter_xwOBA + outs_when_up + baserunner_state + inning_grouped +
(1 | pitcher_year),
data = pa_data_runners
)
model_elite <- lmer(
pa_xwOBA ~ top_runner_1B + top_runner_2B + top_runner_3B +
batter_xwOBA + next_batter_xwOBA + outs_when_up + baserunner_state + inning_grouped +game_year +
(1 | pitcher_year),
data = pa_data_runners
)
summary(model_elite)
# Generate texreg object and save to .tex file
baserunning_models = texreg(
list(model_value, model_speed_runners, model_elite),
custom.model.names = c("Runner Value Model", "Runner Speed Model", "Elite Runner Model"),
custom.coef.map = list(
"(Intercept)" = "Intercept",
"first_base_runner_value" = "1B Value",
"second_base_runner_value" = "2B Value",
"third_base_runner_value" = "3B Value",
"on_1B_speed" = "1B Speed",
"on_2B_speed" = "2B Speed",
"on_3B_speed" = "3B Speed",
"top_runner_1BTRUE" = "Elite 1B",
"top_runner_2BTRUE" = "Elite 2B",
"top_runner_3BTRUE" = "Elite 3B",
"batter_xwOBA" = "Batter xwOBA",
"next_batter_xwOBA" = "Next Batter xwOBA",
"current_matchup_advantage" = "Current Matchup Adv.",
"outs_when_up" = "Outs",
"inning_grouped2" = "Inning 2",
"inning_grouped3" = "Inning 3",
"inning_grouped4" = "Inning 4",
"inning_grouped5" = "Inning 5",
"inning_grouped6" = "Inning 6",
"inning_grouped7" = "Inning 7",
"inning_grouped8" = "Inning 8",
"inning_grouped9" = "Inning 9",
"inning_grouped10+" = "Inning 10+"
),
caption = "Effects of Baserunning Variables on Plate Appearance xwOBA",
label = "tab:baserunning_models",
stars = c(0.001, 0.01, 0.05, 0.1),
digits = 3,
booktabs = TRUE,
use.packages = FALSE
)
# GSub pitcher_year to PitcherYear in baserunning_models
baserunning_models = gsub("pitcher_year", "PitcherYear", baserunning_models)
# Save the texreg object to a .tex file
writeLines(
baserunning_models,
file = "baserunning_models.tex",
sep = "\n"
)
baserunning_models
# Save the texreg object to a .tex file
writeLines(
baserunning_models,
file = "baserunning_models.tex",
sep = "\n"
)
# GSub pitcher_year to PitcherYear in baserunning_models
baserunning_models = gsub("pitcher_year", "PitcherYear", baserunning_models)
baserunning_models
# Save the texreg object to a .tex file
writeLines(
baserunning_models,
file = "baserunning_models.tex",
sep = "\n"
)
# Save the texreg object to a .tex file
writeLines(
baserunning_models, "outputs/baserunning_models.tex"
)
m_protection_1a <- feols(
pa_xwOBA ~ next_batter_xwOBA + current_matchup_advantage +
next_matchup_advantage + baserunner_state + outs_when_up + run_diff |
batter_year + pitcher_year + batting_team_game,
data = pa_data_final
)
# Get the fixed effects
batter_year_fe <- fixef(m_protection_1a)$batter_year
# Convert to data frame
batter_year_fe_df <- data.frame(
batter_year = names(batter_year_fe),
fe_estimate = as.numeric(batter_year_fe)
)
batter_xwOBA_df <- pa_data_final %>%
group_by(batter_year) %>%
summarise(batter_xwOBA = unique(batter_xwOBA))
comparison_df <- batter_year_fe_df %>%
left_join(batter_xwOBA_df, by = "batter_year")
cor.test(comparison_df$batter_xwOBA, comparison_df$fe_estimate)
ggplot(comparison_df, aes(x = batter_xwOBA, y = fe_estimate)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Batter Season xwOBA", y = "Batter-Year Fixed Effect",
title = "Relationship between Batter-Year Fixed Effects and Batter xwOBA")+
theme_pub()
ggplot(comparison_df, aes(x = batter_xwOBA, y = fe_estimate)) +
geom_point(alpha = 0.75, color = "#003087", size = 2) +                # navy points
geom_smooth(method = "lm",
color = "#e63946", linewidth = 1.1,                        # red line
fill  = "#F7879A",  alpha = 0.30) +                        # soft pink ribbon
labs(
title    = "Relationship Between Batterâ€‘Year Fixed Effects and Batter xwOBA",
subtitle = paste0("r = ", round(cor.test(comparison_df$batter_xwOBA, comparison_df$fe_estimate), 3)),                          # correlationÂ here
x        = "Batter Season xwOBA",
y        = "Batterâ€‘Year Fixed Effect"
) +
theme_pub() +
theme(
plot.title    = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 11),
axis.title    = element_text(size = 12),
axis.text     = element_text(size = 11)
)
r_val = cor.test(comparison_df$batter_xwOBA, comparison_df$fe_estimate)
r_val
r_val = cor.test(comparison_df$batter_xwOBA, comparison_df$fe_estimate)$estimate
r_val
r_val = unname(round(cor.test(comparison_df$batter_xwOBA, comparison_df$fe_estimate)$estimate), 3)
r_val
r_val <- unname( round( cor.test(comparison_df$batter_xwOBA,
comparison_df$fe_estimate)$estimate , 3) )
r_val
ggplot(comparison_df, aes(x = batter_xwOBA, y = fe_estimate)) +
geom_point(alpha = 0.75, color = "#003087", size = 2) +                # navy points
geom_smooth(method = "lm",
color = "#e63946", linewidth = 1.1,                        # red line
fill  = "#F7879A",  alpha = 0.30) +                        # soft pink ribbon
labs(
title    = "Relationship Between Batterâ€‘Year Fixed Effects and Batter xwOBA",
subtitle = paste0("r = ", round(r_val, 3)),                          # correlationÂ here
x        = "Batter Season xwOBA",
y        = "Batterâ€‘Year Fixed Effect"
) +
theme_pub() +
theme(
plot.title    = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 11),
axis.title    = element_text(size = 12),
axis.text     = element_text(size = 11)
)
# Calculate mean and SD in one step
desc_table <- pa_data_final %>%
summarise(
`Batter xwOBA (mean)` = mean(batter_xwOBA, na.rm = TRUE),
`Batter xwOBA (sd)` = sd(batter_xwOBA, na.rm = TRUE),
`Next Batter xwOBA (mean)` = mean(next_batter_xwOBA, na.rm = TRUE),
`Next Batter xwOBA (sd)` = sd(next_batter_xwOBA, na.rm = TRUE),
`Current Matchup Adv. (mean)` = mean(current_matchup_advantage, na.rm = TRUE),
`Current Matchup Adv. (sd)` = sd(current_matchup_advantage, na.rm = TRUE),
`Next Matchup Adv. (mean)` = mean(next_matchup_advantage, na.rm = TRUE),
`Next Matchup Adv. (sd)` = sd(next_matchup_advantage, na.rm = TRUE),
`Expected Batting Avg (xBA, mean)` = mean(pa_xBA, na.rm = TRUE),
`Expected Batting Avg (xBA, sd)` = sd(pa_xBA, na.rm = TRUE),
`Walk Prob. (mean)` = mean(is_walk, na.rm = TRUE),
`Walk Prob. (sd)` = sd(is_walk, na.rm = TRUE),
`Strikeout Prob. (mean)` = mean(is_strikeout, na.rm = TRUE),
`Strikeout Prob. (sd)` = sd(is_strikeout, na.rm = TRUE),
`Extra-Base Hit Prob. (mean)` = mean(is_extra_base_hit, na.rm = TRUE),
`Extra-Base Hit Prob. (sd)` = sd(is_extra_base_hit, na.rm = TRUE),
`In-Play Out Prob. (mean)` = mean(is_ip_out, na.rm = TRUE),
`In-Play Out Prob. (sd)` = sd(is_ip_out, na.rm = TRUE),
`Outs When Up (mean)` = mean(outs_when_up, na.rm = TRUE),
`Outs When Up (sd)` = sd(outs_when_up, na.rm = TRUE),
`Run Diff. (mean)` = mean(run_diff, na.rm = TRUE),
`Run Diff. (sd)` = sd(run_diff, na.rm = TRUE)
) %>%
pivot_longer(cols = everything(),
names_to = c("Variable", ".value"),
names_pattern = "(.*) \\((.*)\\)") %>%
mutate(mean = round(mean, 3),
sd = round(sd, 3))
desc_table
summary(pa_data_final$current_matchup_advantage)
table(pa_data_final$current_matchup_advantage)
pa_data_final <- pa_data_final %>%
mutate(pa_xBA = ifelse(final_event %in% c("strikeout", "strikeout_double_play"), 0, pa_xBA))
# Calculate means
means <- pa_data_final %>%
summarise(
`Batter xwOBA` = mean(batter_xwOBA, na.rm = TRUE),
`Next Batter xwOBA` = mean(next_batter_xwOBA, na.rm = TRUE),
`Expected Batting Avg (xBA)` = mean(pa_xBA, na.rm = TRUE),
`Walk Probability` = mean(is_walk, na.rm = TRUE),
`Strikeout Probability` = mean(is_strikeout, na.rm = TRUE),
`Extra-Base Hit Probability` = mean(is_extra_base_hit, na.rm = TRUE),
`In-Play Out Probability` = mean(is_ip_out, na.rm = TRUE),
`Outs When Up` = mean(outs_when_up, na.rm = TRUE),
`Run Differential` = mean(run_diff, na.rm = TRUE)
)
# Calculate SDs only for continuous variables
sds <- pa_data_final %>%
summarise(
`Batter xwOBA` = sd(batter_xwOBA, na.rm = TRUE),
`Next Batter xwOBA` = sd(next_batter_xwOBA, na.rm = TRUE),
`Expected Batting Avg (xBA)` = sd(pa_xBA, na.rm = TRUE),
`Walk Probability` = NA,
`Strikeout Probability` = NA,
`Extra-Base Hit Probability` = NA,
`In-Play Out Probability` = NA,
`Outs When Up` = sd(outs_when_up, na.rm = TRUE),
`Run Differential` = sd(run_diff, na.rm = TRUE)
)
# Combine into one table
desc_table <- bind_rows(means, sds) %>%
pivot_longer(everything(), names_to = "Variable", values_to = "Value") %>%
group_by(Variable) %>%
mutate(Stat = c("Mean", "SD")) %>%
pivot_wider(names_from = Stat, values_from = Value)
# Round numbers
desc_table <- desc_table %>%
mutate(across(c(Mean, SD), ~ round(as.numeric(.), 3)))
# Print LaTeX table
desc_xtable <- xtable(desc_table,
caption = "Descriptive Statistics for Key Variables",
label = "tab:desc_stats",
align = c("l", "c", "c"))
sds
means
# Print LaTeX table
desc_xtable <- xtable(desc_table,
caption = "Descriptive Statistics for Key Variables",
label = "tab:desc_stats",
align = c("l", "l", "c", "c"))
print(desc_xtable, type = "latex", file = "outputs/descriptive_stats_table.tex",
caption.placement = "top",
include.rownames = FALSE,
floating = TRUE)
