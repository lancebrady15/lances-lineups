pa_data_qualified
ggplot(pa_data_qualified, aes(x = next_hitter_skill_scaled, y = outcomeDiff_scaled)) +
geom_point(color = "red", alpha = 0.3) +
geom_smooth(method = "lm", se = TRUE, color = "blue") +
labs(
title = "NextHitterSkill vs. OutcomeDiff (Loess Smooth)",
x = "Next Hitter Skill (xwOBA)",
y = "Outcome Difference"
) +
theme_minimal()
pa_data_qualified
pa_data_qualified$better_than_baseline <- ifelse(pa_data_qualified$pa_xwOBA > pa_data_qualified$current_hitter_skill, 1, 0)
m_protection_3 = glmer(better_than_baseline ~ next_hitter_skill + batter_handedness + potential_next_batter_handedness +
baserunner_state + outs_when_up + inning + run_diff + (1 | pitcher), family = binomial, data = pa_data_qualified)
m_protection_3 = glmer(better_than_baseline ~ next_hitter_skill + batter_handedness + potential_next_batter_handedness +
baserunner_state + outs_when_up + inning + run_diff + (1 | pitcher), family = binomial, data = pa_data_qualified)
pa_data_qualified$better_than_baseline
hist(pa_data_qualified$better_than_baseline)
vif(m_protection_3)
library(car)
vif(m_protection_3)
m_protection_3 = glmer(better_than_baseline ~ next_hitter_skill_scaled + batter_handedness + potential_next_batter_handedness +
baserunner_state + outs_when_up + inning + run_diff + (1 | pitcher), family = binomial, data = pa_data_qualified)
m_protection_3 = glmer(better_than_baseline ~ next_hitter_skill_scaled + batter_handedness + potential_next_batter_handedness +
baserunner_state + outs_when_up + inning + run_diff, family = binomial, data = pa_data_qualified)
m_protection_3 = glmer(better_than_baseline ~ next_hitter_skill_scaled + batter_handedness + potential_next_batter_handedness +
baserunner_state + outs_when_up + inning + run_diff,
family = binomial, data = pa_data_qualified)
library(brglm2)
m_protection_3
m_protection_3 = glmer(better_than_baseline ~ next_hitter_skill_scaled + batter_handedness + potential_next_batter_handedness +
baserunner_state + outs_when_up + inning + run_diff,
family = binomial, data = pa_data_qualified)
m_protection_3 = glmer(better_than_baseline ~ next_hitter_skill_scaled + batter_handedness + potential_next_batter_handedness +
baserunner_state + outs_when_up + inning + run_diff + (1 | pitcher),
family = binomial, data = pa_data_qualified)
options("copilot.enabled")
options(copilot.enabled = TRUE)
options("copilot.enabled")
quarto check
quarto check
copilot::is_authenticated()
copilot::is_authenticated()
rstudioapi::versionInfo()
rstudioapi::versionInfo()
vif(m_protection_3)
#| echo: false
#| output: false
library(tidyverse)
library(lme4)
library(lmerTest)
library(ggeffects)
library(readr)
library(car)
statcast_url = "https://lances-lineups-data.s3.us-east-2.amazonaws.com/statcast_data.csv"
statcast_data <- read_csv(statcast_url, show_col_types = FALSE)
pa_data <- statcast_data %>%
group_by(game_pk, at_bat_number) %>%
summarize(
batter = first(batter),
pitcher = first(pitcher),
inning = first(inning),
batter_handedness = first(stand),
inning_topbot = first(inning_topbot),
# Calculate PA xwOBA from pitch-by-pitch data:
pa_xwOBA = mean(estimated_woba_using_speedangle, na.rm = TRUE),
outs_when_up = first(outs_when_up),
# Compute run differential at the time the PA begins:
run_diff = first(bat_score) - first(fld_score),
# Capture final base occupancy for this PA:
on_1b = last(on_1b),
on_2b = last(on_2b),
on_3b = last(on_3b),
.groups = "drop"
) %>%
arrange(game_pk, inning, inning_topbot, at_bat_number)
pa_data <- statcast_data %>%
group_by(game_pk, at_bat_number) %>%
summarize(
batter = first(batter),
pitcher = first(pitcher),
inning = first(inning),
batter_handedness = first(stand),
inning_topbot = first(inning_topbot),
# Calculate PA xwOBA from pitch-by-pitch data:
pa_xwOBA = mean(estimated_woba_using_speedangle, na.rm = TRUE),
outs_when_up = first(outs_when_up),
# Compute run differential at the time the PA begins:
run_diff = first(bat_score) - first(fld_score),
# Capture final base occupancy for this PA:
on_1b = last(on_1b),
on_2b = last(on_2b),
on_3b = last(on_3b),
.groups = "drop"
) %>%
arrange(game_pk, inning, inning_topbot, at_bat_number)
statcast_data
pa_data <- statcast_data %>%
group_by(game_pk, at_bat_number) %>%
summarize(
batter = first(batter),
pitcher = first(pitcher),
inning = first(inning),
batter_handedness = first(stand),
inning_topbot = first(inning_topbot),
# Calculate PA xwOBA from pitch-by-pitch data:
pa_xwOBA = last(estimated_woba_using_speedangle, na.rm = TRUE),
outs_when_up = first(outs_when_up),
# Compute run differential at the time the PA begins:
run_diff = first(bat_score) - first(fld_score),
# Capture final base occupancy for this PA:
on_1b = last(on_1b),
on_2b = last(on_2b),
on_3b = last(on_3b),
.groups = "drop"
) %>%
arrange(game_pk, inning, inning_topbot, at_bat_number)
pa_data <- statcast_data %>%
group_by(game_pk, at_bat_number) %>%
summarize(
batter = first(batter),
pitcher = first(pitcher),
inning = first(inning),
batter_handedness = first(stand),
inning_topbot = first(inning_topbot),
# Calculate PA xwOBA from pitch-by-pitch data:
pa_xwOBA = last(na.omit(estimated_woba_using_speedangle))),
pa_data <- statcast_data %>%
group_by(game_pk, at_bat_number) %>%
summarize(
batter = first(batter),
pitcher = first(pitcher),
inning = first(inning),
batter_handedness = first(stand),
inning_topbot = first(inning_topbot),
# Calculate PA xwOBA from pitch-by-pitch data:
pa_xwOBA = last(na.omit(estimated_woba_using_speedangle)),
outs_when_up = first(outs_when_up),
# Compute run differential at the time the PA begins:
run_diff = first(bat_score) - first(fld_score),
# Capture final base occupancy for this PA:
on_1b = last(on_1b),
on_2b = last(on_2b),
on_3b = last(on_3b),
.groups = "drop"
) %>%
arrange(game_pk, inning, inning_topbot, at_bat_number)
Sys.sleep(10)
pryr::mem_used()
gc()
gc()
#| echo: false
#| output: false
library(tidyverse)
library(lme4)
library(lmerTest)
library(ggeffects)
library(readr)
library(car)
statcast_url = "https://lances-lineups-data.s3.us-east-2.amazonaws.com/statcast_data.csv"
statcast_data <- read_csv(statcast_url, show_col_types = FALSE)
pa_data <- statcast_data %>%
group_by(game_pk, at_bat_number) %>%
summarize(
batter = first(batter),
pitcher = first(pitcher),
inning = first(inning),
batter_handedness = first(stand),
inning_topbot = first(inning_topbot),
# Calculate PA xwOBA from pitch-by-pitch data:
pa_xwOBA = last(na.omit(estimated_woba_using_speedangle)),
outs_when_up = first(outs_when_up),
# Compute run differential at the time the PA begins:
run_diff = first(bat_score) - first(fld_score),
# Capture final base occupancy for this PA:
on_1b = last(on_1b),
on_2b = last(on_2b),
on_3b = last(on_3b),
.groups = "drop"
) %>%
arrange(game_pk, inning, inning_topbot, at_bat_number)
options(quarto.auto_render = FALSE)
pa_data <- statcast_data %>%
group_by(game_pk, at_bat_number) %>%
summarize(
batter = first(batter),
pitcher = first(pitcher),
inning = first(inning),
batter_handedness = first(stand),
inning_topbot = first(inning_topbot),
# Calculate PA xwOBA from pitch-by-pitch data:
pa_xwOBA = last(na.omit(estimated_woba_using_speedangle)),
outs_when_up = first(outs_when_up),
# Compute run differential at the time the PA begins:
run_diff = first(bat_score) - first(fld_score),
# Capture final base occupancy for this PA:
on_1b = last(on_1b),
on_2b = last(on_2b),
on_3b = last(on_3b),
.groups = "drop"
) %>%
arrange(game_pk, inning, inning_topbot, at_bat_number)
pa_data <- statcast_data %>%
group_by(game_pk, at_bat_number) %>%
summarize(
batter = first(batter),
pitcher = first(pitcher),
inning = first(inning),
batter_handedness = first(stand),
inning_topbot = first(inning_topbot),
# Calculate PA xwOBA from pitch-by-pitch data:
pa_xwOBA = last(na.omit(estimated_woba_using_speedangle)),
outs_when_up = first(outs_when_up),
# Compute run differential at the time the PA begins:
run_diff = first(bat_score) - first(fld_score),
# Capture final base occupancy for this PA:
on_1b = last(on_1b),
on_2b = last(on_2b),
on_3b = last(on_3b),
.groups = "drop"
) %>%
arrange(game_pk, inning, inning_topbot, at_bat_number)
options(quarto.auto_render = FALSE)
pa_data <- statcast_data %>%
group_by(game_pk, at_bat_number) %>%
summarize(
batter = first(batter),
pitcher = first(pitcher),
inning = first(inning),
batter_handedness = first(stand),
inning_topbot = first(inning_topbot),
# Calculate PA xwOBA from pitch-by-pitch data:
pa_xwOBA = last(na.omit(estimated_woba_using_speedangle)),
outs_when_up = first(outs_when_up),
# Compute run differential at the time the PA begins:
run_diff = first(bat_score) - first(fld_score),
# Capture final base occupancy for this PA:
on_1b = last(on_1b),
on_2b = last(on_2b),
on_3b = last(on_3b),
.groups = "drop"
) %>%
arrange(game_pk, inning, inning_topbot, at_bat_number)
#| echo: false
#| output: false
library(tidyverse)
library(lme4)
library(lmerTest)
library(ggeffects)
library(readr)
library(car)
statcast_url = "https://lances-lineups-data.s3.us-east-2.amazonaws.com/statcast_data.csv"
statcast_data <- read_csv(statcast_url, show_col_types = FALSE)
ggplot(pa_data_qualified, aes(x = next_hitter_skill, y = outcomeDiff)) +
geom_point(color = "red", alpha = 0.3) +
geom_smooth(method = "loess", se = TRUE, color = "blue") +
labs(
title = "NextHitterSkill vs. OutcomeDiff (Loess Smooth)",
x = "Next Hitter Skill (xwOBA)",
y = "Outcome Difference"
) +
theme_pub()
#| echo: false
#| output: false
library(tidyverse)
library(lme4)
library(lmerTest)
library(ggeffects)
library(readr)
library(car)
library(pubtheme)
statcast_url = "https://lances-lineups-data.s3.us-east-2.amazonaws.com/statcast_data.csv"
statcast_data <- read_csv(statcast_url, show_col_types = FALSE)
pa_data <- statcast_data %>%
group_by(game_pk, at_bat_number) %>%
summarize(
batter = first(batter),
pitcher = first(pitcher),
inning = first(inning),
batter_handedness = first(stand),
inning_topbot = first(inning_topbot),
# Calculate PA xwOBA from pitch-by-pitch data:
pa_xwOBA = last(na.omit(estimated_woba_using_speedangle)),
outs_when_up = first(outs_when_up),
# Compute run differential at the time the PA begins:
run_diff = first(bat_score) - first(fld_score),
# Capture final base occupancy for this PA:
on_1b = last(on_1b),
on_2b = last(on_2b),
on_3b = last(on_3b),
.groups = "drop"
) %>%
arrange(game_pk, inning, inning_topbot, at_bat_number)
R.version.string
pa_data <- statcast_data %>%
group_by(game_pk, at_bat_number) %>%
summarize(
batter = first(batter),
pitcher = first(pitcher),
inning = first(inning),
batter_handedness = first(stand),
inning_topbot = first(inning_topbot),
# Calculate PA xwOBA from pitch-by-pitch data:
pa_xwOBA = last(na.omit(estimated_woba_using_speedangle)),
outs_when_up = first(outs_when_up),
# Compute run differential at the time the PA begins:
run_diff = first(bat_score) - first(fld_score),
# Capture final base occupancy for this PA:
on_1b = last(on_1b),
on_2b = last(on_2b),
on_3b = last(on_3b),
.groups = "drop"
) %>%
arrange(game_pk, inning, inning_topbot, at_bat_number)
# Chunk 1
#| echo: false
#| output: false
library(tidyverse)
library(lme4)
library(lmerTest)
library(ggeffects)
library(readr)
library(car)
library(pubtheme)
# Chunk 2
statcast_url = "https://lances-lineups-data.s3.us-east-2.amazonaws.com/statcast_data.csv"
statcast_data <- read_csv(statcast_url, show_col_types = FALSE)
# Chunk 3
pa_data <- statcast_data %>%
group_by(game_pk, at_bat_number) %>%
summarize(
batter = first(batter),
pitcher = first(pitcher),
inning = first(inning),
batter_handedness = first(stand),
inning_topbot = first(inning_topbot),
# Calculate PA xwOBA from pitch-by-pitch data:
pa_xwOBA = last(na.omit(estimated_woba_using_speedangle)),
outs_when_up = first(outs_when_up),
# Compute run differential at the time the PA begins:
run_diff = first(bat_score) - first(fld_score),
# Capture final base occupancy for this PA:
on_1b = last(on_1b),
on_2b = last(on_2b),
on_3b = last(on_3b),
.groups = "drop"
) %>%
arrange(game_pk, inning, inning_topbot, at_bat_number)
library(tidyverse)
library(lme4)
library(lmerTest)
library(ggeffects)
library(readr)
library(car)
library(pubtheme)
statcast_url = "https://lances-lineups-data.s3.us-east-2.amazonaws.com/statcast_data.csv"
statcast_data <- read_csv(statcast_url, show_col_types = FALSE)
pa_data <- statcast_data %>%
group_by(game_pk, at_bat_number) %>%
summarize(
batter = first(batter),
pitcher = first(pitcher),
inning = first(inning),
batter_handedness = first(stand),
inning_topbot = first(inning_topbot),
# Calculate PA xwOBA from pitch-by-pitch data:
pa_xwOBA = last(na.omit(estimated_woba_using_speedangle)),
outs_when_up = first(outs_when_up),
# Compute run differential at the time the PA begins:
run_diff = first(bat_score) - first(fld_score),
# Capture final base occupancy for this PA:
on_1b = last(on_1b),
on_2b = last(on_2b),
on_3b = last(on_3b),
.groups = "drop"
) %>%
arrange(game_pk, inning, inning_topbot, at_bat_number)
statcast_url = "https://lances-lineups-data.s3.us-east-2.amazonaws.com/statcast_data.csv"
library(data.table)
# Read CSV with data.table
statcast_data <- fread(statcast_url)
# Convert to data.table
setDT(statcast_data)
# Compute the summarized data
pa_data <- statcast_data[, .(
batter = first(batter),
pitcher = first(pitcher),
inning = first(inning),
batter_handedness = first(stand),
inning_topbot = first(inning_topbot),
pa_xwOBA = tail(na.omit(estimated_woba_using_speedangle), 1), # Faster than dplyr's last(na.omit())
outs_when_up = first(outs_when_up),
run_diff = first(bat_score) - first(fld_score),
on_1b = tail(on_1b, 1),
on_2b = tail(on_2b, 1),
on_3b = tail(on_3b, 1)
), by = .(game_pk, at_bat_number)][order(game_pk, inning, inning_topbot, at_bat_number)]
pa_data <- statcast_data %>%
group_by(game_pk, at_bat_number) %>%
summarize(
batter = first(batter),
pitcher = first(pitcher),
inning = first(inning),
batter_handedness = first(stand),
inning_topbot = first(inning_topbot),
# Calculate PA xwOBA from pitch-by-pitch data:
pa_xwOBA = last(estimated_woba_using_speedangle),
outs_when_up = first(outs_when_up),
# Compute run differential at the time the PA begins:
run_diff = first(bat_score) - first(fld_score),
# Capture final base occupancy for this PA:
on_1b = last(on_1b),
on_2b = last(on_2b),
on_3b = last(on_3b),
.groups = "drop"
) %>%
arrange(game_pk, inning, inning_topbot, at_bat_number)
pa_data <- statcast_data %>%
group_by(game_pk, at_bat_number) %>%
summarize(
batter = first(batter),
pitcher = first(pitcher),
inning = first(inning),
batter_handedness = first(stand),
inning_topbot = first(inning_topbot),
# Calculate PA xwOBA from pitch-by-pitch data:
pa_xwOBA = mean(estimated_woba_using_speedangle, na.rm = TRUE),
outs_when_up = first(outs_when_up),
# Compute run differential at the time the PA begins:
run_diff = first(bat_score) - first(fld_score),
# Capture final base occupancy for this PA:
on_1b = last(on_1b),
on_2b = last(on_2b),
on_3b = last(on_3b),
.groups = "drop"
) %>%
arrange(game_pk, inning, inning_topbot, at_bat_number)
pa_data <- statcast_data %>%
group_by(game_pk, at_bat_number) %>%
summarize(
across(c(batter, pitcher, inning, stand, inning_topbot, outs_when_up, bat_score, fld_score), first),
pa_xwOBA = coalesce(last(estimated_woba_using_speedangle, na_rm = TRUE), NA_real_),
run_diff = first(bat_score, na_rm = TRUE) - first(fld_score, na_rm = TRUE),
across(c(on_1b, on_2b, on_3b), last, .names = "final_{.col}"),
.groups = "drop"
) %>%
arrange(game_pk, inning, inning_topbot, at_bat_number)
system.time(pa_data <- statcast_data[, .(
batter = first(batter),
pitcher = first(pitcher),
inning = first(inning),
batter_handedness = first(stand),
inning_topbot = first(inning_topbot),
pa_xwOBA = tail(na.omit(estimated_woba_using_speedangle), 1),
outs_when_up = first(outs_when_up),
run_diff = first(bat_score) - first(fld_score),
on_1b = tail(on_1b, 1),
on_2b = tail(on_2b, 1),
on_3b = tail(on_3b, 1)
), by = .(game_pk, at_bat_number)][order(game_pk, inning, inning_topbot, at_bat_number)])
system.time({
pa_data_base <- aggregate(
estimated_woba_using_speedangle ~ game_pk + at_bat_number,
data = statcast_data,
function(x) tail(na.omit(x), 1)
)
})
asd
```{r}
pa_data <- statcast_data %>%
group_by(game_pk, at_bat_number) %>%
summarize(
batter = first(batter),
pitcher = first(pitcher),
inning = first(inning),
batter_handedness = first(stand),
inning_topbot = first(inning_topbot),
# Calculate PA xwOBA from pitch-by-pitch data:
pa_xwOBA = max(estimated_woba_using_speedangle, na.rm = TRUE),
outs_when_up = first(outs_when_up),
# Compute run differential at the time the PA begins:
run_diff = first(bat_score) - first(fld_score),
# Capture final base occupancy for this PA:
on_1b = last(on_1b),
on_2b = last(on_2b),
on_3b = last(on_3b),
.groups = "drop"
) %>%
arrange(game_pk, inning, inning_topbot, at_bat_number)
setwd("/Users/Lance/Desktop/sds_492")
#| echo: false
#| output: false
library(tidyverse)
library(lme4)
library(lmerTest)
library(ggeffects)
library(car)
library(pubtheme)
library(baseballr)
pa_data_final <- readRDS("~/Desktop/sds_492/data/pa_data_final.rds")
pa_data <- readRDS("~/Desktop/sds_492/data/pa_data.rds")
test = pa_data_final %>%
sample_n(100000)
ggplot(test, aes(x = next_batter_xwOBA, y = pa_xwOBA)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
labs(
title = "Batter xwOBA vs. Plate Appearance xwOBA",
x = "Batter xwOBA",
y = "Plate Appearance xwOBA"
) +
theme_pub()
