{
  "hash": "c4fd7cf0c4848237d7c46d58f77579c3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Appendix: Blog Post #3\"\nauthor: \"Lance Brady\"\ndate: \"2025-03-05\"\ncategories: [baserunning, lineups, statcast]\nformat: html\neditor: visual\nimage: blog1.jpg\nexecute:\n  eval: false\n---\n\n\n\n## Methods\nFirst, we loaded in our libraries and read the data, which contains almost every pitch from the 2023 and 2024 seasons (excluding when poor data was retrieved).\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npa_data_final = readRDS(\"data/pa_data_final.rds\")\nbaserunning_data = readRDS(\"data/baserunning_data.rds\")\nstatcast_data = readRDS(\"data/statcast_all_years.rds\")\n```\n:::\n\n\n\nOur baserunning dataset, `baserunning_data` contains 1806 rows, each representing a player/year combination, each listed with baserunning contributions broken down by stolen bases (SB) and extra bases taken (XB).\n\nWe will want to do our analysis taking into account how many opportunities each player has to generate baserunning runs. This is more representative of their true baserunning threat than just the number of total baserunning runs they generated.\n\nIn this code, we first create a lookup table of `running_opportunities` at the player–year level by collecting all the baserunner IDs from `on_1b`, `on_2b`, and `on_3b` in `pa_data_final` and grouping by both `runner_id` and `game_year`. Next, we merge these counts with `baserunning_data`—after converting its `start_year` column into a `game_year`—to compute a per-player average value (`runner_average_value`), defined as `runner_runs_tot` divided by `running_opportunities` for each player-year. We then merge these calculated averages back into `pa_data_final` by joining on each of the on-base columns (`on_1b`, `on_2b`, and `on_3b`) along with `game_year`, thereby creating new columns `first_base_runner_value`, `second_base_runner_value`, and `third_base_runner_value` (with any missing values set to 0). \n\nFinally, we construct a `running_opportunities` column that counts the occupied bases in each plate appearance and compute a new metric, `pa_runner_average_value`, by dividing the sum of the individual base runner values by the number of opportunities. This metric reflects the average baserunning value per opportunity for each plate appearance, accounting for player performance on a player–year basis.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Create a table of running opportunities per player-year.\n## For every plate appearance in pa_data_final, collect the baserunner IDs\n## from `on_1b`, `on_2b`, and `on_3b`, and group by both `game_year` and the runner ID.\nbaserunner_opportunities <- pa_data_final %>%\n  select(game_pk, at_bat_number, game_year, on_1b, on_2b, on_3b) %>%\n  pivot_longer(\n    cols = c(on_1b, on_2b, on_3b),\n    names_to = \"base\",\n    values_to = \"runner_id\"\n  ) %>%\n  filter(!is.na(runner_id)) %>%\n  group_by(game_year, runner_id) %>%\n  summarize(running_opportunities = n(), .groups = \"drop\")\n\n## Create a lookup table for runner values based on baserunning_data.\n## We assume baserunning_data contains columns: `player_id` and `runner_runs_tot`.\n## We convert `player_id` to character and also set `game_year` equal to `start_year`.\nbaserunning_data <- baserunning_data %>%\n  mutate(\n    player_id = as.character(player_id),\n    game_year = as.character(start_year)\n  )\n\nbaserunner_opportunities = baserunner_opportunities %>%\n  mutate(\n    game_year = as.character(game_year),\n    runner_id = as.character(runner_id)\n  )\n\nbaserunner_values <- baserunning_data %>%\n  select(game_year, player_id, runner_runs_tot) %>%\n  left_join(baserunner_opportunities, by = c(\"game_year\", \"player_id\" = \"runner_id\")) %>%\n  filter(running_opportunities >= 30) %>%\n  mutate(\n    runner_average_value = ifelse(running_opportunities > 0,\n                                  runner_runs_tot / running_opportunities,\n                                  0)\n  )\n\n## Join runner_average_value back to pa_data_final for each base.\n## First, ensure the on-base columns and game_year in pa_data_final are characters.\npa_data_final <- pa_data_final %>%\n  mutate(\n    on_1b = as.character(on_1b),\n    on_2b = as.character(on_2b),\n    on_3b = as.character(on_3b),\n    game_year = as.character(game_year)\n  )\n\n# Join for 1B:\npa_data_final <- pa_data_final %>%\n  left_join(\n    baserunner_values %>% select(game_year, player_id, runner_average_value),\n    by = c(\"game_year\", \"on_1b\" = \"player_id\")\n  ) %>%\n  rename(first_base_runner_value = runner_average_value)\n\n# Join for 2B:\npa_data_final <- pa_data_final %>%\n  left_join(\n    baserunner_values %>% select(game_year, player_id, runner_average_value),\n    by = c(\"game_year\", \"on_2b\" = \"player_id\")\n  ) %>%\n  rename(second_base_runner_value = runner_average_value)\n\n# Join for 3B:\npa_data_final <- pa_data_final %>%\n  left_join(\n    baserunner_values %>% select(game_year, player_id, runner_average_value),\n    by = c(\"game_year\", \"on_3b\" = \"player_id\")\n  ) %>%\n  rename(third_base_runner_value = runner_average_value)\n\n## Replace NAs (if a base is empty) with 0 runner value.\npa_data_final <- pa_data_final %>%\n  mutate(\n    first_base_runner_value   = ifelse(is.na(on_1b), 0, first_base_runner_value),\n    second_base_runner_value   = ifelse(is.na(on_2b), 0, second_base_runner_value),\n    third_base_runner_value = ifelse(is.na(on_3b), 0, third_base_runner_value)\n  )\n\n## Create a \"running_opportunities\" column in pa_data_final.\n## This counts how many bases are occupied (i.e. not NA) for that plate appearance.\npa_data_final <- pa_data_final %>%\n  mutate(\n    running_opportunities = ifelse(!is.na(on_1b), 1, 0) +\n                              ifelse(!is.na(on_2b), 1, 0) +\n                              ifelse(!is.na(on_3b), 1, 0)\n  )\n\n## Compute the plate appearance's average runner value.\npa_data_final <- pa_data_final %>%\n  mutate(\n    pa_runner_total_value   = first_base_runner_value + \n      second_base_runner_value + third_base_runner_value,\n    pa_runner_average_value = ifelse(running_opportunities > 0,\n                                     pa_runner_total_value / running_opportunities,\n                                     0)\n  )\n```\n:::\n\n\n\n## Model #1: Pitcher Behavior\n\nWe need to create a new dataframe `statcast_data_baserunning`, which allows us to study pitch-level Statcast data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Perform a left_join on (game_pk, at_bat_number)\nstatcast_data_baserunning <- statcast_data %>%\n  left_join(\n    pa_data_final %>%\n      select(game_pk, at_bat_number,\n             # Choose whichever columns you need from pa_data_final:\n             pa_runner_average_value,\n             first_base_runner_value,\n             second_base_runner_value,\n             third_base_runner_value,\n             pa_runner_total_value,\n             run_diff, baserunner_state \n      ),\n    by = c(\"game_pk\", \"at_bat_number\")\n  )\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}