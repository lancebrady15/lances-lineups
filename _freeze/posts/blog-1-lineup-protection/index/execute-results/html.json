{
  "hash": "dd9544d771c8a2d41c7ef1e793b9ba59",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Blog Post #1: Lineup Protection or Lineup Penalty\"\nauthor: \"Lance Brady\"\ndate: \"2025-02-18\"\ncategories: [lineup protection, lineups, statcast]\nformat: html\neditor: visual\nimage: blog1.jpg\n---\n\n\n\n## Takeaways\n\n1.  The next batter's xwOBA does have a small but significant impact on the current plate appearance's xwOBA, and this effect is negative. A stronger on-deck hitter results in lower than expected outcomes for that plate appearance.\n2.  Some of the league's best pitchers perform better when a strong hitter is on deck, serving as an indication of mental aptitude or ability to elevate in high-leverage moments that makes them so successful. This suggests that lineup protection may not be a universal phenomenon and that individual pitchers may have different responses to it.\n3.  While we see evidence pointing to fewer walks, more strikeouts, and fewer extra base hits with better `next_batter_xwOBA`, we cannot conclusively point to the next batter's xwOBA as the cause of these effects.\n4.  Even when controlling for batter skill, matchup effects, and game state, a higher next_batter_xwOBA is associated with a small but statistically significant decrease in the current batter’s expected batting average (xBA) for that plate appearance. If the next batter’s xwOBA goes up by 0.100, we estimate a \\~-0.003 reduction in pa_xBA per plate appearance—over 500 plate appearances, that amounts to about 1.5 fewer hits compared to otherwise.\n5.  When we select certain fixed effects, we find that the next batter's xwOBA continue to have a small but significant impact on the current plate appearance's xwOBA, and this effect is negative. A stronger on-deck hitter results in lower than expected outcomes for that plate appearance.\n\n## Introduction to Lineup Protection\n\nBatting order optimization is a heavily studied aspect of baseball decision-making, where teams construct lineups to maximize run production. Most studies in this area assume that hitters in the lineup are independent of one another. However, the concept of lineup protection—the idea that a hitter’s performance is influenced by the quality of the hitter after them—remains debated within the sabermetrics community, most often not believed in by it; it has not been supported by previous statistical studies. Although batting order decisions may offer only marginal advantages in expected runs, in an era where every competitive edge counts, even subtle effects like lineup protection deserve closer examination. The theory behind lineup protection is that a hitter with a good hitter behind them will be harder to pitch around because pitchers won't want to face the guy after him either, particularly with more runners on base. Thus, walks would decrease, and that would mean more fastballs, strikes, and pitches over the plate, essentially increasing the probability for productive hitting, specifically extra-base hits (doubles, triples, and homeruns).\n\nThere are two main ways to study lineup protection:\n\n**Pitcher-Centric Analysis:** Examining how pitchers alter their approach based on the quality next hitter. Previous research using 30 hitter pairs since the advent of Statcast suggested that protected hitters see an average of 0.25% more strikes compared to league average, and 0.07% more pitches down the middle of the zone. This would lead to 6 additional strikes and 2 additional pitches down the middle over a season. This study was extremely limited, however, and did not account for situations without protection, only used 30 pairs of hitters, and only compared the strike percentage a protected hitter received to the league average of that year, not to the strike percentage they had in other non-protected plate appearances. If lineup protection were to exist, teams should avoid wasting lineup protection on free swingers (putting free swingers before \"protectors\") so that the protection is not wasted on hitters who would swing at a higher rate anyway (The Paraball Notes, 2024). Quantitatively, the hitter who bats behind you SHOULD impact the pitches you see, because the run expectancy of certain plays occurring (like walks) would change based on who the following batter is (Weinberg, 2013). Evidence of certain pairs often seems to point to the opposite, with a 2012 evaluation of players hitting after Andrew McCutchen, Ryan Braun, and Joey Votto showing no evidence that pitchers were pitching them differently based on the protection they had (Cameron, 2012).\n\nHall of Famer Miguel Cabrera attributed part of his power struggles early in the 2019 season to a lack of lineup protection, essentially calling out productive-yet-not-spectacular hitter behind him, Niko Goodrum, saying, \"In the past... I got a big bat behind me. You see the way guys pitch me? that explains everything.\" His manager responded by saying his statement was \"crazy.\" Data revealed that he wasn't getting particularly fewer fastballs, strikes, or good pitches to hit in general, and that in his particular case, there wasn't evidence for lineup protection (Stavenhagen, 2019).\n\n**Hitter Outcome Analysis:** Investigating whether the quality of the next hitter influences the current hitter’s performance. Pre-Pitch F/X research found that pitchers who know that a good hitter is up next will \"pitch around\" the current hitter, resulting in significantly more walks, and moderately more strikeouts. However, it found that when it comes to putting the ball in play, there was no significant impact (Tango, 2006). Much of the sabermetric community says that lineup protection is a myth, and that a player's production is almost solely determined by their own skills; luck and random variation also play a small role (Ambrosino, 2011). A 2008 study found that with a small magnitude, the quality of the on-deck hitter negatively impacts the preceding hitter (Bradbury, 2008).\n\nHowever, a study in 2011 using Retrosheet play-by-play data from 2002-2009 MLB seasons found that power numbers did have significant differences in situations of potential lineup protection. This study argues that previous evidence of lineup protection was not uncovered because endogeneity bias introduced by managers selectively choosing their lineups. For a player's own performance, they likely are hitting better than their own season averages when they are near the top of the lineup (they have more protection) because they are already doing well at that time for a number of reasons. A good hitter who, for whatever reason, is hitting poorly will be put at the bottom of the lineup (and have less protection), but likely hit well at that spot, and thus, we would observe better hitting with less protection. Thus, protection and performance numbers become tangled in unobservable ways. While these endogeneity issues are a concern, they seem to work in both directions, and with a robust enough dataset, we should be able to see the effects of lineup protection, if it is a real phenomenon.\n\nUsing injuries to a batter’s “protector” as a quasi-random natural experiment, this study finds that batters who have stronger protection (i.e., a higher OPS hitter behind them) produce significantly more power. Specifically, a 100-point increase in the protector’s OPS correlates with a 9.7% rise in extra-base hits, and the effect is especially pronounced for third hitters (a 26% increase). The results also suggest that when left unprotected, batters draw more walks—particularly intentional walks, as previous literature has supported (Phillips, 2011). It also found that hits in general remained unchanged with protection or not, suggesting that batters are not simply putting the ball into play fewer times, but having less powerful, and thus, productive, contact. However, this study simply made claims about the distribution of outcomes and not about overall offensive production. Protected hitters got fewer walks and more extra-base hits, which act in opposing manners. Our study will use Expected Weighted On-Base Average, an offensive statistic that correlates directly with a player's overall contribution to run production from the plate, to tackle this gap in research.\n\nWe will also use a large sample size of over 3 million plate appearances from 2015-2024 to ensure that our results are robust.\n\nMost other previous literature of hitter outcome analysis has been rather anecdotal, focusing on specific players and how they fare with protection. Using over 3000 Plate Appearances from Pete Alonso's career before his 2024 season, we can see higher slugging percentages with better hitters behind him, along with being 11% more likely to homer. With worse protection, he is more likely to walk, although his strikeout rates go against previous research and actually decrease with poor hitters behind him (Britton, 2024). Other research takes specific teams and analyzes whether the topic of lineup protection even applies and whether it serves a purpose in that roster's decision-making. When the Diamondbacks acquired Mark Trumbo in 2014, writers brought up the fact that even though Trumbo's power threat could serve to protect Paul Goldschmidt, Trumbo may not even be much better than other Diamondbacks hitters who could replace him in terms of offensive threat in general (Wiser, 2014). In 2015, Billy Hamilton pointed to a different sort of offensive advantage owing to the hitter behind him–knowing Joey Votto was hitting after him, an incredibly selective hitter often with long counts, allowed Hamilton to be patient and wait for the right pitch to steal on. In this situation, with a small sample size, the threat of Votto was preventing opposing pitchers from throwing fastballs with Hamilton on base, allowing Hamilton to get better base-stealing opportunities (Petriello, 2015).\n\nIt is worth noting that many within baseball discuss lineup protection with certainty. Alonso had pushed for J.D. Martinez to join and hit behind him for the Mets in 2024, hoping it would help his offensive statistics. Interviews with several within the game in 2015 resulted in a plethora of answers, from Joe Girardi saying lineup protection was most significant in lefty-righty matchups, Madison Bumgarner saying he doesn't pay attention to the on-deck circle, Tim Hudson saying that it's \"foolish if you don't look at the next hitter,\" and multiple other pitchers saying it is a factor in their decision-making, especially later in the game (Laurila, 2016).\n\nIt is also worth noting that these anecdotal examinations are subject to sample size constraints and extremely limited in their ability to observe lineup protection on a large scale in Major League Baseball. This article aims to tackle that problem.\n\n## Aim\n\nThis article aims to provide further insights into lineup protection using pitch-by-pitch data Statcast data from the 2015 to 2024 Major League Baseball seasons, focusing on analyzing hitter outcomes. While literature is mixed and often negative on the existence of lineup protection, it often uses anecdotal evidence, and a more thorough investigation is necessary, especially one using the more advanced expected statistics we now have available.\n\n## Setup\n\nWe would like our independent variables to be the following:\n\n-   Current pitcher random effects\n\n-   Current hitter's handedness and underlying quality (e.g. xwOBA, xBA)\n\n-   Next hitter's handedness and underlying quality (e.g. xwOBA, xBA)\n\n-   Base-out state\n\n-   Inning\n\n-   Run differential\n\nPrevious studies have looked at protection as a binary independent variable, but that is a narrow view on lineup protection. Lineup protection must be considered as a continuous variable because some players will protect more than others.\n\nOur outcome variable for our first model will be that plate appearance's xwOBA, which will essentially give us the quality of that plate appearance based on the independent variables. We would then like to see what factor the quality of the next batter has in the outcome.\n\nWe will use a mixed-effects linear model to account for the random effects of pitchers and batters. Our models are described in detail below.\n\n## Methods\n\nFor full methods and model outputs [view the full appendix here](../../appendix/blog1-appendix.qmd).\n\n## Model #1: Mixed Effects Linear Model of Plate Appearances\n\n### I. Overall Offensive Value: wOBA and xWOBA\n\nFirst, let's look at residuals from season-long averages for each plate appearance. We will read in our libraries and data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lme4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: Matrix\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(lmerTest)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'lmerTest'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:lme4':\n\n    lmer\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:stats':\n\n    step\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ tidyr::expand() masks Matrix::expand()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n✖ tidyr::pack()   masks Matrix::pack()\n✖ tidyr::unpack() masks Matrix::unpack()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(pubtheme)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: plotly\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggrepel\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(purrr)\n\npa_data_final = readRDS(\"data/pa_data_final.rds\")\n```\n:::\n\n\n\nOur first model will be a mixed-effects linear model of plate appearances, where we will use the xwOBA of the current plate appearance as our outcome variable. We will use the xwOBA of the current and next batters as our main independent fixed effect, and we will also include the batter's handedness matchup, the next batter's handedness matchup, the baserunner state, outs when up, run differential, and game year as fixed effects. We will also include random effects for pitcher and batter. Note that the next batter's handedness matchup is the handedness of the next batter with the handedness of the current pitcher, and thus does not account for potential anticipated calls to the bullpen (when a pitcher knows they are coming out after the current batter) or pinch-hitting situations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm_protection_1 <- lmer(\n  pa_xwOBA ~ batter_xwOBA + next_batter_xwOBA + \n    current_matchup_advantage + next_matchup_advantage +\n    baserunner_state + outs_when_up + run_diff + game_year +\n    (1 | pitcher),\n  data = pa_data_final\n)\n\nsummary(m_protection_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: \npa_xwOBA ~ batter_xwOBA + next_batter_xwOBA + current_matchup_advantage +  \n    next_matchup_advantage + baserunner_state + outs_when_up +  \n    run_diff + game_year + (1 | pitcher)\n   Data: pa_data_final\n\nREML criterion at convergence: 660744.5\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.3714 -0.7743 -0.3857  0.7199  4.7175 \n\nRandom effects:\n Groups   Name        Variance  Std.Dev.\n pitcher  (Intercept) 0.0005352 0.02313 \n Residual             0.1470937 0.38353 \nNumber of obs: 715653, groups:  pitcher, 2212\n\nFixed effects:\n                            Estimate Std. Error         df t value Pr(>|t|)    \n(Intercept)                3.143e-03  5.415e-03  4.286e+05   0.580  0.56162    \nbatter_xwOBA               1.020e+00  1.219e-02  7.156e+05  83.644  < 2e-16 ***\nnext_batter_xwOBA         -3.042e-02  1.261e-02  7.155e+05  -2.413  0.01583 *  \ncurrent_matchup_advantage  1.966e-02  9.643e-04  4.498e+05  20.391  < 2e-16 ***\nnext_matchup_advantage     6.010e-04  9.671e-04  4.205e+05   0.621  0.53434    \nbaserunner_state1B         1.144e-03  1.223e-03  7.155e+05   0.936  0.34937    \nbaserunner_state1B-2B      1.024e-03  1.900e-03  7.156e+05   0.539  0.59017    \nbaserunner_state1B-3B      6.660e-03  2.830e-03  7.156e+05   2.354  0.01858 *  \nbaserunner_state2B         8.328e-03  1.722e-03  7.155e+05   4.837 1.32e-06 ***\nbaserunner_state2B-3B      3.512e-03  3.251e-03  7.155e+05   1.080  0.27995    \nbaserunner_state3B         5.001e-03  2.888e-03  7.155e+05   1.731  0.08337 .  \nbaserunner_stateLoaded     1.002e-03  3.129e-03  7.149e+05   0.320  0.74884    \nouts_when_up              -4.564e-03  5.724e-04  7.153e+05  -7.973 1.55e-15 ***\nrun_diff                   6.880e-04  1.526e-04  4.994e+05   4.509 6.50e-06 ***\ngame_year2017              1.094e-03  1.825e-03  3.261e+05   0.599  0.54896    \ngame_year2018              8.712e-04  1.872e-03  1.702e+05   0.465  0.64168    \ngame_year2019              5.813e-03  1.967e-03  1.231e+05   2.955  0.00313 ** \ngame_year2020              3.715e-04  3.224e-03  3.075e+05   0.115  0.90825    \ngame_year2021              4.102e-03  1.979e-03  6.594e+04   2.073  0.03820 *  \ngame_year2022              5.015e-03  1.995e-03  4.980e+04   2.513  0.01197 *  \ngame_year2023              5.837e-03  1.974e-03  3.703e+04   2.957  0.00311 ** \ngame_year2024              5.295e-03  2.026e-03  2.890e+04   2.614  0.00896 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nCorrelation matrix not shown by default, as p = 22 > 12.\nUse print(x, correlation=TRUE)  or\n    vcov(x)        if you need it\n```\n\n\n:::\n:::\n\n\n\nOne piece of verifying evidence for our model is that the coefficient of `batter_xwOBA` is about 1 (it is 1.02), as we are predicting the xwOBA of a player's plate appearance using their average xwOBA from the year. It is also verifying that our `current_matchup_advantage` is positive and signficant, with a coefficient of 0.02, indicating that the batter's handedness matchup advantage does have a positive impact on the xwOBA of the current plate appearance.\n\nWhen accounting for all of the other variables, we can see that the coefficient of `next_batter_xwOBA` is negative, at -0.02742, and signficant at the $\\alpha$ = 0.05 level, with a p-value of 0.02.\n\nThis coefficient means that with a 0.100 increase in the next batter's xwOBA, we would expect a 0.0027 decrease in the current plate appearance's xwOBA. This is a small effect, but it is statistically significant and suggests that a reverse lineup protection, or a lineup penalty does exist to some degree when a better hitter is on deck.\n\nWe do not find that a matchup advantage on deck has a significant impact on the current plate appearance's xwOBA, with a coefficient of 0.0008 and a p-value of 0.37.\n\nWhile we will want to use model selection techniques to check if all of these variables are important, other signficant coefficients make sense. The only two `baserunner_state` with a singificant coefficient is when a runner is on 2B, with a positive coefficient of 0.008, or 1B and 3B, with a postivie coefficient of 0.006 indicating that having a runner on 2B or 1B-3B increases the xwOBA of the current plate appearance. The `outs_when_up` variable has a negative and signficiant coefficient, indicating that having more outs when up decreases the xwOBA of the current plate appearance. The `run_diff` variable has a positive and signficant coefficient, indicating that having a larger run differential increases the xwOBA of the current plate appearance. This could indicate that when teams are up by a lot, they tend to be facing weaker pitchers, or have a confidence that helps them at the plate. Overall, this effect is incredibly small. `game_year` also makes sense, as the most signficant positive coefficeints in years 2019, 2021, 2022, 2023, and 2024 were all years with higher run scoring environments than the reference level of 2015.\n\nLet's check this model with a mixed-effects linear model of plate appearances, where we will use the xwOBA difference of the current plate appearance from the batter's season long average as the outcome variable. We will use the xwOBA of the next batter as our main independent variable, and we will also include the batter's handedness, the next batter's handedness, the baserunner state, outs when up, run differential, and game year as fixed effects. We will also include random effects for pitcher.\n\nIt is worth noting that initially we got a singularity with regards to the random effect `(1 | batter)` when it was included. This indicated that the model already had the effect of the batter baked into the model through the `xwOBA_diff` outcome variable, which is derived from `pa_xwOBA` and `batter_xwOBA`. So, we knew that almost all of the variance between batters can be accounted for by their season-long `batter_xwOBA`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm_protection_2 <- lmer(\n  xwOBA_diff ~ next_batter_xwOBA + \n    current_matchup_advantage + next_matchup_advantage +\n    baserunner_state + outs_when_up + run_diff + game_year +\n    (1 | pitcher),\n  data = pa_data_final\n)\n\nsummary(m_protection_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: xwOBA_diff ~ next_batter_xwOBA + current_matchup_advantage +  \n    next_matchup_advantage + baserunner_state + outs_when_up +  \n    run_diff + game_year + (1 | pitcher)\n   Data: pa_data_final\n\nREML criterion at convergence: 660740.1\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.3639 -0.7748 -0.3861  0.7209  4.7122 \n\nRandom effects:\n Groups   Name        Variance  Std.Dev.\n pitcher  (Intercept) 0.0005351 0.02313 \n Residual             0.1470941 0.38353 \nNumber of obs: 715653, groups:  pitcher, 2212\n\nFixed effects:\n                            Estimate Std. Error         df t value Pr(>|t|)    \n(Intercept)                7.947e-03  4.521e-03  3.092e+05   1.758  0.07880 .  \nnext_batter_xwOBA         -2.535e-02  1.221e-02  7.156e+05  -2.076  0.03787 *  \ncurrent_matchup_advantage  1.961e-02  9.637e-04  4.503e+05  20.345  < 2e-16 ***\nnext_matchup_advantage     5.899e-04  9.671e-04  4.206e+05   0.610  0.54189    \nbaserunner_state1B         1.178e-03  1.223e-03  7.155e+05   0.963  0.33534    \nbaserunner_state1B-2B      1.049e-03  1.900e-03  7.156e+05   0.552  0.58103    \nbaserunner_state1B-3B      6.685e-03  2.829e-03  7.156e+05   2.362  0.01816 *  \nbaserunner_state2B         8.346e-03  1.722e-03  7.155e+05   4.847 1.25e-06 ***\nbaserunner_state2B-3B      3.479e-03  3.251e-03  7.155e+05   1.070  0.28443    \nbaserunner_state3B         5.011e-03  2.888e-03  7.155e+05   1.735  0.08277 .  \nbaserunner_stateLoaded     9.891e-04  3.129e-03  7.149e+05   0.316  0.75194    \nouts_when_up              -4.562e-03  5.724e-04  7.153e+05  -7.970 1.59e-15 ***\nrun_diff                   6.922e-04  1.526e-04  4.996e+05   4.538 5.69e-06 ***\ngame_year2017              1.146e-03  1.825e-03  3.260e+05   0.628  0.53018    \ngame_year2018              8.636e-04  1.872e-03  1.702e+05   0.461  0.64458    \ngame_year2019              5.929e-03  1.966e-03  1.229e+05   3.016  0.00256 ** \ngame_year2020              5.667e-04  3.221e-03  3.070e+05   0.176  0.86036    \ngame_year2021              4.182e-03  1.978e-03  6.583e+04   2.114  0.03451 *  \ngame_year2022              4.895e-03  1.994e-03  4.972e+04   2.455  0.01411 *  \ngame_year2023              5.861e-03  1.974e-03  3.702e+04   2.969  0.00299 ** \ngame_year2024              5.210e-03  2.025e-03  2.887e+04   2.572  0.01011 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nCorrelation matrix not shown by default, as p = 21 > 12.\nUse print(x, correlation=TRUE)  or\n    vcov(x)        if you need it\n```\n\n\n:::\n:::\n\n\n\nCoefficients of this model mirror those of the previous model in both signficance and direction, but our `next_batter_xwOBA` coefficient has decreased in magnitude to -0.02224, and is still signficant at the $\\alpha$ = 0.05 level, with a p-value of 0.05. This further supports our evidence that the next batter's xwOBA does have a small but significant impact on the current plate appearance's xwOBA, and that this effect is negative.\n\nFor interpretability, we will go back to predicting `pa_xwOBA` in our next model, as it is a more intuitive metric to understand than the difference from the batter's season-long average.\n\n**Takeaway:** The next batter's xwOBA does have a small but significant impact on the current plate appearance's xwOBA, and this effect is negative. A stronger on-deck hitter results in lower than expected outcomes for that plate appearance.\n\nIf we now want to incorporate how different hitters and pitchers are affected by the next batter, we can add a slope for the next batter's xwOBA as a random effect. This will allow us to see how the effect of the next batter's xwOBA varies by pitcher. We do not expect an equivalent effect with batters, as players describe how the pitcher will act differently based on the abilities of the next batter, not the batter. To make sure there is enough data to get a good estimate of the slope, we will only include pitchers with at least 200 plate appearances in our dataset. We will treat the slope and intercept independently, as we do not expect that pitchers who allow higher/lower overall xwOBA also respond differently to lineup protection.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count number of plate appearances per pitcher per year\npitcher_counts <- pa_data_final %>%\n  group_by(pitcher, game_year) %>%\n  summarize(n_pa = n(), .groups = \"drop\") %>%\n  filter(n_pa >= 100) \n\n# Filter dataset to just those pitchers\npa_filtered <- pa_data_final %>%\n  mutate(pitcher_year = interaction(pitcher, game_year)) %>%\n  filter(pitcher_year %in% interaction(pitcher_counts$pitcher, pitcher_counts$game_year))\n```\n:::\n\n\n\nLet's run our model using `pa_filtered`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm_protection_slope <- lmer(\n  pa_xwOBA ~ batter_xwOBA + next_batter_xwOBA +\n    current_matchup_advantage + next_matchup_advantage +\n    baserunner_state + outs_when_up + run_diff + game_year +\n    (1 + next_batter_xwOBA || pitcher_year),  # uncorrelated random effects\n  data = pa_filtered\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in checkConv(attr(opt, \"derivs\"), opt$par, ctrl = control$checkConv, :\nModel failed to converge with max|grad| = 0.0117053 (tol = 0.002, component 1)\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(m_protection_slope)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: \npa_xwOBA ~ batter_xwOBA + next_batter_xwOBA + current_matchup_advantage +  \n    next_matchup_advantage + baserunner_state + outs_when_up +  \n    run_diff + game_year + (1 + next_batter_xwOBA || pitcher_year)\n   Data: pa_filtered\n\nREML criterion at convergence: 499452.4\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.3596 -0.7700 -0.3879  0.7061  4.7136 \n\nRandom effects:\n Groups         Name              Variance Std.Dev.\n pitcher_year   (Intercept)       0.000414 0.02035 \n pitcher_year.1 next_batter_xwOBA 0.002436 0.04935 \n Residual                         0.146133 0.38227 \nNumber of obs: 543995, groups:  pitcher_year, 2551\n\nFixed effects:\n                            Estimate Std. Error         df t value Pr(>|t|)    \n(Intercept)                3.108e-03  6.305e-03  8.983e+04   0.493  0.62204    \nbatter_xwOBA               1.014e+00  1.396e-02  5.439e+05  72.637  < 2e-16 ***\nnext_batter_xwOBA         -3.441e-02  1.449e-02  1.105e+05  -2.374  0.01759 *  \ncurrent_matchup_advantage  1.915e-02  1.095e-03  3.111e+05  17.492  < 2e-16 ***\nnext_matchup_advantage     7.348e-04  1.096e-03  2.824e+05   0.670  0.50263    \nbaserunner_state1B         1.096e-03  1.398e-03  5.438e+05   0.784  0.43287    \nbaserunner_state1B-2B     -3.769e-04  2.231e-03  5.440e+05  -0.169  0.86585    \nbaserunner_state1B-3B      3.556e-03  3.326e-03  5.439e+05   1.069  0.28508    \nbaserunner_state2B         6.850e-03  1.980e-03  5.439e+05   3.460  0.00054 ***\nbaserunner_state2B-3B     -4.961e-04  3.813e-03  5.438e+05  -0.130  0.89648    \nbaserunner_state3B         6.745e-03  3.334e-03  5.439e+05   2.023  0.04309 *  \nbaserunner_stateLoaded    -3.580e-03  3.868e-03  5.437e+05  -0.925  0.35476    \nouts_when_up              -4.489e-03  6.543e-04  5.435e+05  -6.861 6.82e-12 ***\nrun_diff                   1.091e-04  1.970e-04  3.924e+05   0.554  0.57970    \ngame_year2017             -9.815e-04  2.894e-03  2.047e+03  -0.339  0.73457    \ngame_year2018             -2.376e-03  2.918e-03  2.036e+03  -0.814  0.41562    \ngame_year2019              1.943e-03  3.084e-03  2.141e+03   0.630  0.52871    \ngame_year2020             -1.177e-02  1.491e-02  4.119e+03  -0.790  0.42985    \ngame_year2021              9.753e-04  3.010e-03  2.147e+03   0.324  0.74594    \ngame_year2022              7.351e-04  2.968e-03  2.069e+03   0.248  0.80442    \ngame_year2023              9.523e-05  2.870e-03  2.093e+03   0.033  0.97353    \ngame_year2024             -2.692e-03  2.927e-03  2.051e+03  -0.920  0.35788    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nCorrelation matrix not shown by default, as p = 22 > 12.\nUse print(x, correlation=TRUE)  or\n    vcov(x)        if you need it\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\noptimizer (nloptwrap) convergence code: 0 (OK)\nModel failed to converge with max|grad| = 0.0117053 (tol = 0.002, component 1)\n```\n\n\n:::\n:::\n\n\n\nWhile the signficance of `game_year` coefficients have disappeared, the rest of the coefficients are similar to the previous model. The coefficient of `next_batter_xwOBA` is now -0.0315, and is signficant at the $\\alpha$ = 0.05 level, with a p-value of 0.02.\n\n#### IA. Inspection of the Random Effects for xwOBA\n\nIn order to get an indication of whether these random slopes are important and not just a product of random noise, we can look at the random effects of the model. We can do this by looking at the random slopes for the next batter's xwOBA for each pitcher-year combination.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Convert to a dataframe with rownames as a column\nre_df <- ranef(m_protection_slope)$pitcher_year %>%\n  as.data.frame() %>%\n  rownames_to_column(var = \"pitcher_year\")\n\n## Separate into pitcher ID and year\nre_df <- re_df %>%\n  separate(pitcher_year, into = c(\"pitcher\", \"year\"), sep = \"\\\\.\", convert = TRUE)\n\n## Initialize a list to store correlation results\nyoy_results <- list()\n\n## Loop through each year pair and calculate correlations\nyears <- sort(unique(re_df$year))\n\nfor (i in 1:(length(years) - 1)) {\n  y1 <- years[i]\n  y2 <- years[i + 1]\n  \n  df_pair <- re_df %>%\n    filter(year %in% c(y1, y2)) %>%\n    select(pitcher, year, next_batter_xwOBA) %>%\n    pivot_wider(names_from = year, values_from = next_batter_xwOBA, names_prefix = \"xwOBA_\") %>%\n    drop_na()\n  \n  cor_val <- cor(df_pair[[paste0(\"xwOBA_\", y1)]], df_pair[[paste0(\"xwOBA_\", y2)]])\n  \n  yoy_results[[paste0(y1, \"_to_\", y2)]] <- list(\n    from = y1,\n    to = y2,\n    correlation = cor_val,\n    n_shared_pitchers = nrow(df_pair)\n  )\n}\n\n## Print all year-over-year correlations\nyoy_df <- bind_rows(yoy_results, .id = \"year_pair\")\nprint(yoy_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 5\n  year_pair     from    to correlation n_shared_pitchers\n  <chr>        <int> <int>       <dbl>             <int>\n1 2016_to_2017  2016  2017       0.373               220\n2 2017_to_2018  2017  2018       0.366               200\n3 2018_to_2019  2018  2019       0.376               185\n4 2019_to_2020  2019  2020       0.175                 9\n5 2020_to_2021  2020  2021       0.568                 9\n6 2021_to_2022  2021  2022       0.315               182\n7 2022_to_2023  2022  2023       0.327               191\n8 2023_to_2024  2023  2024       0.260               199\n```\n\n\n:::\n:::\n\n\n\nAll of these Year-Over-Year correlations (with 2020 results ommitted due to limited sample size) are positive and greater than 0.3, except for 2019 to 2021 (still 0.25). This indicates that the random slopes for the next batter's xwOBA are relatively stable over time, and that pitchers who are more affected by the next batter's xwOBA in one year are likely to be similarly affected in the following year. This implies that the effect of the next batter's xwOBA is not just a product of random noise, but rather a consistent pattern across pitchers.\n\nWe can graph the most recent year pair (2023 to 2024) to visualize the relationship between the random slopes for the next batter's xwOBA in those two years.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Make a graph for the most recent year pair (2023 to 2024)\nre_23_24 <- re_df %>%\n  filter(year %in% c(2023, 2024)) %>%\n  select(pitcher, year, next_batter_xwOBA) %>%\n  pivot_wider(names_from = year, values_from = next_batter_xwOBA, names_prefix = \"xwOBA_\") %>%\n  drop_na()\n\n## Plot\nggplot(re_23_24, aes(x = xwOBA_2023, y = xwOBA_2024)) +\n  geom_point(alpha = 0.6) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"blue\") +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"red\") +\n  labs(\n    title = \"Pitcher Susceptibility to Lineup Protection (2023 vs. 2024)\",\n    subtitle = paste0(\"r = \", round(cor(re_23_24$xwOBA_2023, re_23_24$xwOBA_2024), 3)),\n    x = \"Random Slope on next_batter_xwOBA (2023)\",\n    y = \"Random Slope on next_batter_xwOBA (2024)\"\n  ) +\n  theme_pub()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nNow that we know that these random slopes are stable over time, we will decide to keep them in our model going forward for interpretability.\n\nThis also means that studying indvidual pitcher's susceptibility to lineup protection is a worthwhile endeavor. We can look at the top 10 and bottom 10 pitchers in terms of their random slope for the next batter's xwOBA.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Get 2024 slopes\nslopes_2024 <- re_df %>%\n  filter(year == 2024) %>%\n  select(pitcher, year, next_batter_xwOBA)\n\n## Get top and bottom 10\ntop_10 <- slopes_2024 %>% arrange(desc(next_batter_xwOBA)) %>% slice(1:10)\nbottom_10 <- slopes_2024 %>% arrange(next_batter_xwOBA) %>% slice(1:10)\n\n## Base URL of the data\nbase_url <- \"https://raw.githubusercontent.com/chadwickbureau/register/master/data/\"\n\n## Create vector of suffixes for filenames\nsuffixes <- c(0:9, letters[1:6])\nfile_urls <- paste0(base_url, \"people-\", suffixes, \".csv\")\n\n## Read and combine all files safely, treating all columns as characters\npeople <- map_dfr(file_urls, ~ read_csv(.x, col_types = cols(.default = \"c\")))\n\n## Clean and convert MLBAM ID for joining\npeople_clean <- people %>%\n  select(key_mlbam, name_first, name_last) %>%\n  mutate(key_mlbam = as.integer(key_mlbam))\n\n## Join to top 10 and bottom 10 results\ntop_10 <- top_10 %>%\n  left_join(people_clean, by = c(\"pitcher\" = \"key_mlbam\")) %>%\n  select(name_first, name_last, pitcher, next_batter_xwOBA)\n\nbottom_10 <- bottom_10 %>%\n  left_join(people_clean, by = c(\"pitcher\" = \"key_mlbam\")) %>%\n  select(name_first, name_last, pitcher, next_batter_xwOBA)\n\n## Display\ntop_10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   name_first name_last pitcher next_batter_xwOBA\n1     Roddery     Muñoz  682610        0.06436306\n2      Martín     Pérez  527048        0.05498584\n3     Taijuan    Walker  592836        0.05464153\n4       Randy   Vásquez  681190        0.04533037\n5     Emerson   Hancock  676106        0.03982448\n6         Jon      Gray  592351        0.03780134\n7     Valente   Bellozo  678368        0.03539113\n8     Anthony    Molina  683627        0.03483042\n9       Kenta     Maeda  628317        0.03406114\n10       Kyle    Gibson  502043        0.03294523\n```\n\n\n:::\n\n```{.r .cell-code}\nbottom_10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   name_first name_last pitcher next_batter_xwOBA\n1       Tyler   Glasnow  607192       -0.05574332\n2       Mason    Miller  695243       -0.05086609\n3        Paul    Skenes  694973       -0.04305211\n4      Raisel  Iglesias  628452       -0.04194312\n5       Bryan       Woo  693433       -0.04075505\n6      Justin    Steele  657006       -0.03881543\n7         Joe   Jiménez  641729       -0.03817278\n8        Ryan    Walker  676254       -0.03736169\n9        Sean    Hjelle  663546       -0.03453973\n10     Carlos     Rodón  607074       -0.03453727\n```\n\n\n:::\n:::\n\n\n\nIn 2024, the random slopes on next_batter_xwOBA reveal how individual pitchers deviated from the average lineup protection effect—where the fixed effect of next_batter_xwOBA was negative, indicating that pitchers tend to allow lower expected outcomes when a strong hitter is looming. At the top of the slope distribution, pitchers like Roddery Muñoz, Martín Pérez, and Randy Vásquez had positive random slopes, meaning the usual lineup protection suppression effect was less true for them—or even reversed. These pitchers were more susceptible to lineup protection (they allow better results when a stronger batter is on deck).\n\nIn contrast, pitchers like Tyler Glasnow, Paul Skenes, and Bryan Woo had even more negative slopes than average, suggesting they are especially effective at suppressing outcomes when a strong next batter is present. These pitchers were less affected (or may even pitch better) in those scenarios where a stronger batter is on deck.\n\nIt is worth noting that although some of the league's best pitchers (like Glasnow and Skenes) are at the bottom of this list, this does not mean that these lists are simply a ranking of pitcher quality. The random slopes are not correlated with the fixed effect of next_batter_xwOBA, and thus, a pitcher can be very good and still have a high random slope. This is because the random slope is measuring how much the pitcher deviates from the average lineup protection effect, not how good they are overall.\n\nSo, when we see some of the leagues best pitchers at the bottom of this list, it means that one of their skills is to be able to pitch well regardless of the next batter's quality, and potentially even better when there is a threat looming.\n\n**Takeaway:** Some of the league's best pitchers perform better when a strong hitter is on deck, serving as an indication of mental aptitude or ability to elevate in high-leverage moments that makes them so successful. This suggests that lineup protection may not be a universal phenomenon and that individual pitchers may have different responses to it.\n\n#### IB. Drivers of the Overall Offensive Effect\n\nLet's try to uncover where these overall offensive effects are coming from. Since `is_walk`, `is_strikeout`, and `is_extra_base_hit` are binary outcome variables (TRUE/FALSE), we'll want to use logistic regression models. We will use `glm` instead of `glmer` as models including failed to converge within a reasonable amount of time. First, we will look at walks.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm_protection_walk <- glm(\n  is_walk ~ batter_bb_pct + next_batter_xwOBA +\n    current_matchup_advantage + next_matchup_advantage +\n    baserunner_state + outs_when_up + run_diff + game_year,\n  data = pa_data_final,\n  family = binomial(link = \"logit\")\n)\nsummary(m_protection_walk)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = is_walk ~ batter_bb_pct + next_batter_xwOBA + current_matchup_advantage + \n    next_matchup_advantage + baserunner_state + outs_when_up + \n    run_diff + game_year, family = binomial(link = \"logit\"), \n    data = pa_data_final)\n\nCoefficients:\n                           Estimate Std. Error z value Pr(>|z|)    \n(Intercept)               -3.503639   0.054803 -63.931  < 2e-16 ***\nbatter_bb_pct             10.672839   0.159989  66.710  < 2e-16 ***\nnext_batter_xwOBA         -0.220682   0.147812  -1.493 0.135441    \ncurrent_matchup_advantage  0.142243   0.011076  12.842  < 2e-16 ***\nnext_matchup_advantage    -0.022171   0.010990  -2.018 0.043643 *  \nbaserunner_state1B        -0.106256   0.014874  -7.144 9.07e-13 ***\nbaserunner_state1B-2B     -0.016479   0.022493  -0.733 0.463785    \nbaserunner_state1B-3B     -0.151029   0.035152  -4.296 1.74e-05 ***\nbaserunner_state2B         0.365064   0.017762  20.553  < 2e-16 ***\nbaserunner_state2B-3B      0.402851   0.033318  12.091  < 2e-16 ***\nbaserunner_state3B         0.303847   0.029790  10.200  < 2e-16 ***\nbaserunner_stateLoaded    -0.249409   0.041070  -6.073 1.26e-09 ***\nouts_when_up               0.085092   0.006693  12.713  < 2e-16 ***\nrun_diff                   0.009172   0.001790   5.124 3.00e-07 ***\ngame_year2017             -0.092815   0.020633  -4.498 6.85e-06 ***\ngame_year2018             -0.078969   0.020571  -3.839 0.000124 ***\ngame_year2019             -0.047349   0.021397  -2.213 0.026905 *  \ngame_year2020             -0.053877   0.031850  -1.692 0.090729 .  \ngame_year2021             -0.046262   0.020840  -2.220 0.026431 *  \ngame_year2022             -0.030979   0.021134  -1.466 0.142697    \ngame_year2023             -0.045577   0.020561  -2.217 0.026646 *  \ngame_year2024             -0.069715   0.021365  -3.263 0.001102 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 266727  on 449654  degrees of freedom\nResidual deviance: 260801  on 449633  degrees of freedom\n  (272816 observations deleted due to missingness)\nAIC: 260845\n\nNumber of Fisher Scoring iterations: 5\n```\n\n\n:::\n:::\n\n\n\nAs expected, `batter_bb_pct` and `current_matchup_advantage` both have positive and signficant coefficients in our walk model. `m_protection_walk` shows that the coefficient of `next_batter_xwOBA` is negative, but insignificant. This indicates that the next batter's xwOBA does not have a significant impact on the current plate appearance's walk rate. We can do the same for strikeouts:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm_protection_strikeout <- glm(\n  is_strikeout ~ batter_k_pct + next_batter_xwOBA +\n    current_matchup_advantage + next_matchup_advantage +\n    baserunner_state + outs_when_up + run_diff + game_year,\n  data = pa_data_final,\n  family = binomial(link = \"logit\")\n)\nsummary(m_protection_strikeout)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = is_strikeout ~ batter_k_pct + next_batter_xwOBA + \n    current_matchup_advantage + next_matchup_advantage + baserunner_state + \n    outs_when_up + run_diff + game_year, family = binomial(link = \"logit\"), \n    data = pa_data_final)\n\nCoefficients:\n                           Estimate Std. Error z value Pr(>|z|)    \n(Intercept)               -2.750214   0.043429 -63.326  < 2e-16 ***\nbatter_k_pct               6.235906   0.072977  85.450  < 2e-16 ***\nnext_batter_xwOBA          0.108577   0.106417   1.020   0.3076    \ncurrent_matchup_advantage -0.064773   0.007793  -8.311  < 2e-16 ***\nnext_matchup_advantage    -0.003771   0.007796  -0.484   0.6286    \nbaserunner_state1B        -0.143846   0.010284 -13.987  < 2e-16 ***\nbaserunner_state1B-2B     -0.108373   0.015923  -6.806 1.00e-11 ***\nbaserunner_state1B-3B     -0.299590   0.025105 -11.934  < 2e-16 ***\nbaserunner_state2B        -0.106118   0.014300  -7.421 1.16e-13 ***\nbaserunner_state2B-3B     -0.133558   0.027765  -4.810 1.51e-06 ***\nbaserunner_state3B        -0.135093   0.024123  -5.600 2.14e-08 ***\nbaserunner_stateLoaded    -0.144283   0.026912  -5.361 8.26e-08 ***\nouts_when_up               0.060115   0.004748  12.662  < 2e-16 ***\nrun_diff                  -0.013258   0.001266 -10.471  < 2e-16 ***\ngame_year2017              0.022271   0.014882   1.497   0.1345    \ngame_year2018              0.022000   0.014866   1.480   0.1389    \ngame_year2019              0.004706   0.015573   0.302   0.7625    \ngame_year2020              0.020197   0.023329   0.866   0.3866    \ngame_year2021              0.029018   0.015035   1.930   0.0536 .  \ngame_year2022              0.016858   0.015206   1.109   0.2676    \ngame_year2023              0.018945   0.014825   1.278   0.2013    \ngame_year2024              0.027397   0.015104   1.814   0.0697 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 447829  on 449654  degrees of freedom\nResidual deviance: 439292  on 449633  degrees of freedom\n  (272816 observations deleted due to missingness)\nAIC: 439336\n\nNumber of Fisher Scoring iterations: 4\n```\n\n\n:::\n:::\n\n\n\nThe coefficient of `next_batter_xwOBA` is positive, but insignificant again. This indicates that the next batter's xwOBA does not have a significant impact on the current plate appearance's strikeout rate.\n\nWe will also look at extra base hits:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm_protection_extra_base_hit <- glm(\n  is_extra_base_hit ~ batter_xbh_rate + next_batter_xwOBA +\n    current_matchup_advantage + next_matchup_advantage +\n    baserunner_state + outs_when_up + run_diff + game_year,\n  data = pa_data_final,\n  family = binomial(link = \"logit\")\n)\nsummary(m_protection_extra_base_hit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = is_extra_base_hit ~ batter_xbh_rate + next_batter_xwOBA + \n    current_matchup_advantage + next_matchup_advantage + baserunner_state + \n    outs_when_up + run_diff + game_year, family = binomial(link = \"logit\"), \n    data = pa_data_final)\n\nCoefficients:\n                           Estimate Std. Error z value Pr(>|z|)    \n(Intercept)               -3.412939   0.043580 -78.315  < 2e-16 ***\nbatter_xbh_rate           12.981602   0.203705  63.727  < 2e-16 ***\nnext_batter_xwOBA         -0.165899   0.116296  -1.427 0.153718    \ncurrent_matchup_advantage  0.135143   0.008683  15.564  < 2e-16 ***\nnext_matchup_advantage    -0.009744   0.008650  -1.126 0.259979    \nbaserunner_state1B         0.015609   0.011253   1.387 0.165417    \nbaserunner_state1B-2B      0.008968   0.017549   0.511 0.609319    \nbaserunner_state1B-3B      0.023024   0.025991   0.886 0.375711    \nbaserunner_state2B        -0.093610   0.016468  -5.684 1.31e-08 ***\nbaserunner_state2B-3B     -0.086934   0.031214  -2.785 0.005351 ** \nbaserunner_state3B        -0.046456   0.027375  -1.697 0.089695 .  \nbaserunner_stateLoaded     0.096459   0.028185   3.422 0.000621 ***\nouts_when_up              -0.046305   0.005319  -8.706  < 2e-16 ***\nrun_diff                   0.007544   0.001395   5.409 6.35e-08 ***\ngame_year2017             -0.023226   0.016318  -1.423 0.154657    \ngame_year2018             -0.018036   0.016533  -1.091 0.275328    \ngame_year2019             -0.018810   0.016820  -1.118 0.263445    \ngame_year2020             -0.023744   0.028865  -0.823 0.410743    \ngame_year2021             -0.008552   0.016806  -0.509 0.610862    \ngame_year2022             -0.002138   0.016992  -0.126 0.899877    \ngame_year2023             -0.001149   0.016342  -0.070 0.943957    \ngame_year2024             -0.006162   0.016845  -0.366 0.714491    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 423027  on 722470  degrees of freedom\nResidual deviance: 418374  on 722449  degrees of freedom\nAIC: 418418\n\nNumber of Fisher Scoring iterations: 5\n```\n\n\n:::\n:::\n\n\n\nAgain, the coefficient of `next_batter_xwOBA` is negative, but insignificant.\n\nThese results suggest that the overall offensive effect attributed to lineup protection is not strongly driven by any single offensive outcome. While pitchers may slightly adjust their approach (especially walk likelihood) when facing a strong next batter or easier upcoming matchup, these adjustments do not translate significantly into changes in strikeout, walk, or extra-base hit rates.\n\n**Takeaway:** While we see evidence pointing to fewer walks, more strikeouts, and fewer extra base hits with better `next_batter_xwOBA`, we cannot conclusively point to the next batter's xwOBA as the cause of these effects.\n\n### II. Increased Interpretability: xBA\n\nIn order to increase interpretability, we will also look at the xBA of the current plate appearance. We will use the same model as above, but with `pa_xBA` as our outcome variable instead of `pa_xwOBA`. We will also use the xBA of the current batter as our main independent fixed effect, along with the next batter's strength (as determined by xwOBA). We will also include the batter's handedness matchup, the next batter's handedness matchup, the baserunner state, outs when up, run differential, and game year as fixed effects. We will also include random effects for pitcher and batter.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npa_data_xba <- pa_data_final %>%\n  mutate(pa_xBA = ifelse(is.na(pa_xBA) & pa_xwOBA == 0, 0, pa_xBA)) %>%\n  filter(!is.na(pa_xBA) & !is.na(batter_xBA) & !is.na(next_batter_xBA))\n\nm_protection_xBA <- lmer(\n  pa_xBA ~ batter_xBA + next_batter_xwOBA + \n    current_matchup_advantage + next_matchup_advantage +\n    baserunner_state + outs_when_up + run_diff + game_year +\n    (1 | pitcher),\n  data = pa_data_xba\n)\n\nsummary(m_protection_xBA)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: pa_xBA ~ batter_xBA + next_batter_xwOBA + current_matchup_advantage +  \n    next_matchup_advantage + baserunner_state + outs_when_up +  \n    run_diff + game_year + (1 | pitcher)\n   Data: pa_data_xba\n\nREML criterion at convergence: 245880.5\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.3715 -0.7904 -0.4389  0.6381  2.9444 \n\nRandom effects:\n Groups   Name        Variance  Std.Dev.\n pitcher  (Intercept) 0.0004767 0.02183 \n Residual             0.0853343 0.29212 \nNumber of obs: 648022, groups:  pitcher, 2204\n\nFixed effects:\n                            Estimate Std. Error         df t value Pr(>|t|)    \n(Intercept)                1.597e-02  4.585e-03  4.177e+05   3.483 0.000495 ***\nbatter_xBA                 9.839e-01  1.401e-02  6.478e+05  70.237  < 2e-16 ***\nnext_batter_xwOBA         -2.426e-02  1.009e-02  6.478e+05  -2.404 0.016237 *  \ncurrent_matchup_advantage  1.160e-02  7.744e-04  4.907e+05  14.985  < 2e-16 ***\nnext_matchup_advantage     2.323e-04  7.765e-04  4.738e+05   0.299 0.764800    \nbaserunner_state1B         4.637e-03  9.745e-04  6.478e+05   4.758 1.96e-06 ***\nbaserunner_state1B-2B      2.514e-03  1.520e-03  6.480e+05   1.654 0.098029 .  \nbaserunner_state1B-3B      1.211e-02  2.254e-03  6.479e+05   5.373 7.73e-08 ***\nbaserunner_state2B        -4.461e-04  1.397e-03  6.478e+05  -0.319 0.749470    \nbaserunner_state2B-3B     -2.299e-03  2.638e-03  6.478e+05  -0.871 0.383547    \nbaserunner_state3B        -1.167e-03  2.347e-03  6.477e+05  -0.497 0.618937    \nbaserunner_stateLoaded     8.172e-03  2.496e-03  6.478e+05   3.274 0.001061 ** \nouts_when_up              -5.860e-03  4.581e-04  6.475e+05 -12.792  < 2e-16 ***\nrun_diff                   4.575e-04  1.224e-04  5.036e+05   3.737 0.000186 ***\ngame_year2017              9.097e-04  1.465e-03  3.542e+05   0.621 0.534602    \ngame_year2018              1.567e-04  1.509e-03  2.034e+05   0.104 0.917277    \ngame_year2019              3.096e-03  1.587e-03  1.515e+05   1.951 0.051098 .  \ngame_year2020             -2.795e-03  2.606e-03  3.383e+05  -1.072 0.283507    \ngame_year2021              1.987e-03  1.603e-03  8.312e+04   1.240 0.215063    \ngame_year2022              2.168e-03  1.621e-03  6.411e+04   1.337 0.181132    \ngame_year2023              3.788e-03  1.606e-03  4.739e+04   2.359 0.018341 *  \ngame_year2024              3.879e-03  1.652e-03  3.621e+04   2.349 0.018852 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nCorrelation matrix not shown by default, as p = 22 > 12.\nUse print(x, correlation=TRUE)  or\n    vcov(x)        if you need it\n```\n\n\n:::\n:::\n\n\n\nThis model examines how a plate appearance’s batting average metric (`pa_xBA`) depends on the batter’s season-long average (`batter_xBA`), the following hitter’s season-long expected wOBA (`next_batter_xwOBA`), and various other contextual factors. The large positive coefficient on batter_xBA (\\~0.989) reaffirms that the best predictor of a single PA’s batting outcome is the batter’s own established average. Meanwhile, having a higher `next_batter_xwOBA` (coefficient \\~-0.029) shows a small but statistically significant negative association, indicating the current hitter’s `pa_xBA` may drop a bit when a stronger hitter is on deck. Some baserunner states (e.g., runner on 1B, 1B-2B, or 1B-#B) slightly increase pa_xBA, others (like runner on 2B alone) decrease it, and having more outs also lowers pa_xBA.\n\n**Takeaway:** Even when controlling for batter skill, matchup effects, and game state, a higher next_batter_xwOBA is associated with a small but statistically significant decrease in the current batter’s expected batting average (xBA) for that plate appearance. If the next batter’s xwOBA goes up by 0.100, we estimate a \\~-0.003 reduction in pa_xBA per plate appearance—over 500 plate appearances, that amounts to about 1.5 fewer hits compared to otherwise.\n\n### III. Model Selection of the Overall Offensive Output\n\nLet's return to our `m_protection_slope` model and see if we can improve it with model selection. Using the `drop1` function, which uses F-tests with Satterthwaite’s approximation for degrees of freedom to see what would happen to model fit if we removed each fixed effect one at a time, we get the following results.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrop1(m_protection_slope, test = \"Chisq\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSingle term deletions using Satterthwaite's method:\n\nModel:\npa_xwOBA ~ batter_xwOBA + next_batter_xwOBA + current_matchup_advantage + next_matchup_advantage + baserunner_state + outs_when_up + run_diff + game_year + ((1 | pitcher_year) + (0 + next_batter_xwOBA | pitcher_year))\n                          Sum Sq Mean Sq NumDF  DenDF   F value    Pr(>F)    \nbatter_xwOBA              771.02  771.02     1 543946 5276.1268 < 2.2e-16 ***\nnext_batter_xwOBA           0.82    0.82     1 110508    5.6370   0.01759 *  \ncurrent_matchup_advantage  44.71   44.71     1 311072  305.9590 < 2.2e-16 ***\nnext_matchup_advantage      0.07    0.07     1 282355    0.4494   0.50263    \nbaserunner_state            2.59    0.37     7 543671    2.5329   0.01325 *  \nouts_when_up                6.88    6.88     1 543532   47.0796 6.823e-12 ***\nrun_diff                    0.04    0.04     1 392433    0.3067   0.57970    \ngame_year                   0.65    0.08     8   2312    0.5585   0.81248    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\nAs expected, `batter_xwOBA` is incredibly important to the model, along with `current_matchup_advantage`. `next_batter_xwOBA`, `outs_when_up`, and `baserunner_state` are also important, while `next_matchip_advantage`, `run_diff`, and `game_year` are not.\n\nLet's create a final model with just the most important fixed effects. We will also include the random slope for the next batter's xwOBA.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm_protection_final <- lmer(\n  pa_xwOBA ~ batter_xwOBA + next_batter_xwOBA +\n    current_matchup_advantage + \n    baserunner_state + outs_when_up +\n    (1 + next_batter_xwOBA || pitcher_year),  # uncorrelated random effects\n  data = pa_filtered\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in checkConv(attr(opt, \"derivs\"), opt$par, ctrl = control$checkConv, :\nModel failed to converge with max|grad| = 0.00310026 (tol = 0.002, component 1)\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(m_protection_final)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: \npa_xwOBA ~ batter_xwOBA + next_batter_xwOBA + current_matchup_advantage +  \n    baserunner_state + outs_when_up + (1 + next_batter_xwOBA ||  \n    pitcher_year)\n   Data: pa_filtered\n\nREML criterion at convergence: 499352.9\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.3596 -0.7701 -0.3879  0.7060  4.7154 \n\nRandom effects:\n Groups         Name              Variance  Std.Dev.\n pitcher_year   (Intercept)       0.0004131 0.02032 \n pitcher_year.1 next_batter_xwOBA 0.0024432 0.04943 \n Residual                         0.1461321 0.38227 \nNumber of obs: 543995, groups:  pitcher_year, 2551\n\nFixed effects:\n                            Estimate Std. Error         df t value Pr(>|t|)    \n(Intercept)                2.608e-03  5.933e-03  2.294e+05   0.439 0.660326    \nbatter_xwOBA               1.015e+00  1.393e-02  5.412e+05  72.879  < 2e-16 ***\nnext_batter_xwOBA         -3.357e-02  1.445e-02  1.110e+05  -2.323 0.020203 *  \ncurrent_matchup_advantage  1.896e-02  1.059e-03  4.390e+05  17.903  < 2e-16 ***\nbaserunner_state1B         1.097e-03  1.398e-03  5.438e+05   0.785 0.432349    \nbaserunner_state1B-2B     -3.628e-04  2.231e-03  5.440e+05  -0.163 0.870790    \nbaserunner_state1B-3B      3.606e-03  3.325e-03  5.439e+05   1.085 0.278126    \nbaserunner_state2B         6.884e-03  1.979e-03  5.439e+05   3.479 0.000503 ***\nbaserunner_state2B-3B     -4.365e-04  3.812e-03  5.439e+05  -0.114 0.908849    \nbaserunner_state3B         6.777e-03  3.334e-03  5.439e+05   2.033 0.042048 *  \nbaserunner_stateLoaded    -3.561e-03  3.867e-03  5.436e+05  -0.921 0.357149    \nouts_when_up              -4.479e-03  6.537e-04  5.435e+05  -6.852  7.3e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr) bt_OBA n__OBA crrn__ bsr_1B b_1B-2 b_1B-3 bsr_2B b_2B-3\nbattr_xwOBA -0.572                                                        \nnxt_btt_OBA -0.608 -0.250                                                 \ncrrnt_mtch_ -0.119  0.033 -0.003                                          \nbsrnnr_st1B -0.028 -0.017  0.008  0.005                                   \nbsrnn_1B-2B -0.019 -0.008  0.014  0.010  0.161                            \nbsrnn_1B-3B -0.009 -0.004  0.007  0.008  0.109  0.074                     \nbsrnnr_st2B -0.009 -0.008  0.001  0.004  0.180  0.120  0.082              \nbsrnn_2B-3B -0.013  0.006  0.004  0.009  0.095  0.064  0.044  0.072       \nbsrnnr_st3B  0.005 -0.003 -0.002  0.006  0.112  0.077  0.053  0.087  0.047\nbsrnnr_sttL -0.015  0.003  0.007  0.010  0.094  0.065  0.044  0.071  0.039\nouts_when_p -0.211 -0.005  0.017  0.006 -0.107 -0.115 -0.089 -0.130 -0.078\n            bsr_3B bsrn_L\nbattr_xwOBA              \nnxt_btt_OBA              \ncrrnt_mtch_              \nbsrnnr_st1B              \nbsrnn_1B-2B              \nbsrnn_1B-3B              \nbsrnnr_st2B              \nbsrnn_2B-3B              \nbsrnnr_st3B              \nbsrnnr_sttL  0.046       \nouts_when_p -0.126 -0.078\noptimizer (nloptwrap) convergence code: 0 (OK)\nModel failed to converge with max|grad| = 0.00310026 (tol = 0.002, component 1)\n```\n\n\n:::\n:::\n\n\n\nIn our final model, all coefficients, except for the different levels of `baserunner_state`, are significant. The coefficient of `next_batter_xwOBA` is -0.03083, and is signficant at the $\\alpha$ = 0.05 level, with a p-value of 0.02. This indicates that the next batter's xwOBA does have a small but significant impact on the current plate appearance's xwOBA, and this effect is negative.\n\n**Takeaway:** When we select certain fixed effects, we find that the next batter's xwOBA continue to have a small but significant impact on the current plate appearance's xwOBA, and this effect is negative. A stronger on-deck hitter results in lower than expected outcomes for that plate appearance.\n\n## Discussion\n\nThis study, although rather simple, tackles some of the problems with sabermetrics' view of lineup protection. By accounting for different game situations, we find that the skill of the next batter does have a statistically significant impact on the offensive outcomes of the current one. While small, this will have significant implications for player evaluation and valuation, as we are establishing dependencies between players that have not been accounted for in the past. We also importantly incorporate the current baserunner situation, number of outs, and current batter handedness advantages, which proved signficant. These all point to the idea that simulations of baseball lineups should both include game situation states and the next batter's skill in order to get a more accurate picture of the current batter's expected outcomes. Each batter does not come up as an indepdent entity with a unique and stationary probability distribution of their outcomes, but rather a probability distribution slightly altered by externalities.\n\n## References\n\nAmbrosino, D. (2011, November 30). *Orders of protection*. The Hardball Times. <https://tht.fangraphs.com/orders-of-protection/>\n\nBradbury, J. C., & Drinen, D. J. (2007). Pigou at the plate. *Journal of Sports Economics*, *9*(2), 211-224. <https://doi.org/10.1177/1527002507300178>\n\nBritton, T. (2024, April 26). J.D. Martinez will be Pete Alonso’s protection in Mets lineup. Does that matter? *The New York Times*. <https://www.nytimes.com/athletic/5443604/2024/04/26/mets-pete-alonso-jd-martinez-lineup/>\n\nCameron, D. (2012, May 25). *Cameron: McCutchen disproves lineup protection*. ESPN.com. <https://insider.espn.com/mlb/insider/story/_/id/7970598/andrew-mccutchen-another-example-why-lineup-protection-myth-mlb>\n\nHow to quantify lineup protection in baseball — The Paraball notes. (2024, April 9). *The Paraball Notes*. <https://www.paraballnotes.com/blog/how-to-quantify-lineup-protection-in-baseball>\n\nLaurila, D. (2016, July 14). *Player’s view: Does lineup protection exist?* FanGraphs Baseball. <https://blogs.fangraphs.com/players-view-does-lineup-protection-exist/>\n\nPetriello, M. (2015, April 13). *Billy Hamilton’s reverse lineup protection*. FanGraphs Baseball. <https://blogs.fangraphs.com/billy-hamiltons-reverse-lineup-protection/>\n\nPhillips, D. C. (2011). You're hurting my game: Lineup protection and injuries in Major League Baseball. *Journal of Quantitative Analysis in Sports*, *7*(3). <https://doi.org/10.2202/1559-0410.1296>\n\nStavenhagen, C. (2019, May 7). The (latest) numbers behind Miguel Cabrera’s remarks on lineup protection. *The New York Times*. <https://www.nytimes.com/athletic/965467/2019/05/07/the-latest-numbers-behind-miguel-cabreras-remarks-on-lineup-protection/>\n\nTango, T. (2006, April 7). *Pitching around batters*. The Hardball Times. <https://tht.fangraphs.com/pitching-around-batters/>\n\nWeinberg, N. (2013, January 1). *Lineup protection: Fact or fiction?* New English D. <https://newenglishd.com/2013/01/01/lineup-protection-fact-or-fiction/>\n\nWiser, J. (2014, February 19). *Let’s talk about lineup protection*. Inside the 'Zona. <https://insidethezona.com/2014/02/lets-talk-lineup-protection/>\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}