[
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Data Sources",
    "section": "",
    "text": "This page lists the datasets used in the blog.\n\nBlog Post #1: Lineup Protection\nüìÑ Download statcast_data.csv\n\n\nBlog Post #2: Swing Profiles\nüìÑ Download statcast_data.csv"
  },
  {
    "objectID": "posts/blog-3-baserunning/Untitled.html",
    "href": "posts/blog-3-baserunning/Untitled.html",
    "title": "Blog #3: Baserunning",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "posts/blog-3-baserunning/Untitled.html#quarto",
    "href": "posts/blog-3-baserunning/Untitled.html#quarto",
    "title": "Blog #3: Baserunning",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "posts/blog-3-baserunning/Untitled.html#running-code",
    "href": "posts/blog-3-baserunning/Untitled.html#running-code",
    "title": "Blog #3: Baserunning",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n\nShow Code\n1 + 1\n\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "posts/blog-2-swing-profiles/index.html",
    "href": "posts/blog-2-swing-profiles/index.html",
    "title": "Blog Post #2: Swing Profiles",
    "section": "",
    "text": "Recent advances in Statcast technology have allowed for the direct measurement of bat speed and swing length on pitches where the batter swings. These new metrics open the door to exploring questions that were previously left to inference, scouting reports, or assumptions about mechanics. Specifically, we have become interested in the idea of swing consistency: How much do a batter‚Äôs bat speed and swing length deviate from pitch to pitch or from game to game? How do differing swing profiles on a roster correlate with run generation during a game?\nThis article addresses three connected but distinct angles on these new metrics:\nIndividual-Level Swing Diversity: Do stable or volatile swing metrics for a single batter over a season correlate with that batter‚Äôs offensive success, measured through wOBA or xwOBA?\nGame-Level Team Swing Diversity: Does a club whose hitters share similar or very different swing metrics on a given day see any advantage in that day‚Äôs run production?\nOur analysis aims not to prove a direct cause-and-effect relationship but rather to uncover whether correlations exist that might guide roster construction, daily lineup decisions, or player development. Given that these bat speed and swing length metrics are new, we expect some initial findings to be exploratory, setting the stage for deeper or more controlled studies in the future.\nFundamental Questions Of Our Study\n\nIndividual: Is consistency associated with higher personal performance once I factor out average skill?\nGame: On a day-to-day basis, does having a consistent or varied approach correlate with daily offensive output?"
  },
  {
    "objectID": "posts/blog-2-swing-profiles/index.html#introduction-to-swing-profile-data",
    "href": "posts/blog-2-swing-profiles/index.html#introduction-to-swing-profile-data",
    "title": "Blog Post #2: Swing Profiles",
    "section": "",
    "text": "Recent advances in Statcast technology have allowed for the direct measurement of bat speed and swing length on pitches where the batter swings. These new metrics open the door to exploring questions that were previously left to inference, scouting reports, or assumptions about mechanics. Specifically, we have become interested in the idea of swing consistency: How much do a batter‚Äôs bat speed and swing length deviate from pitch to pitch or from game to game? How do differing swing profiles on a roster correlate with run generation during a game?\nThis article addresses three connected but distinct angles on these new metrics:\nIndividual-Level Swing Diversity: Do stable or volatile swing metrics for a single batter over a season correlate with that batter‚Äôs offensive success, measured through wOBA or xwOBA?\nGame-Level Team Swing Diversity: Does a club whose hitters share similar or very different swing metrics on a given day see any advantage in that day‚Äôs run production?\nOur analysis aims not to prove a direct cause-and-effect relationship but rather to uncover whether correlations exist that might guide roster construction, daily lineup decisions, or player development. Given that these bat speed and swing length metrics are new, we expect some initial findings to be exploratory, setting the stage for deeper or more controlled studies in the future.\nFundamental Questions Of Our Study\n\nIndividual: Is consistency associated with higher personal performance once I factor out average skill?\nGame: On a day-to-day basis, does having a consistent or varied approach correlate with daily offensive output?"
  },
  {
    "objectID": "posts/blog-2-swing-profiles/index.html#methods",
    "href": "posts/blog-2-swing-profiles/index.html#methods",
    "title": "Blog Post #2: Swing Profiles",
    "section": "Methods",
    "text": "Methods\nFirst, we loaded in our libraries and read the data, which contains almost every pitch from the 2024 season (excluding when poor data was retrieved).\n\n\nShow Code\n# url included if we wanted to use read_csv with this data from an AWS S3 bucket\n# statcast_url = \"https://lances-lineups-data.s3.us-east-2.amazonaws.com/statcast_data.csv\"\nstatcast_data &lt;- read.csv(\"data/statcast_data.csv\")\n\n\n\nQuestion I: Does having a variety of average swing characteristics across players on the roster help or hurt scoring?\n\nQuestion IA: Does Variation in Swing Length or Swing Speed individually help a Team across a season?\nWe will want to create a weighted standard deviation-like metric for a team‚Äôs between-player swing style, either swing length or swing speed, variation. This will essentially be a weighted standard deviation of a team‚Äôs player‚Äôs average swing style for those two variables. I decide to give weight to each player by Plate Appearances, not by number of swings. This is because for a particular team, we do not want to overweight the free-swinging players just because they have more swing data. We want to consider player-team combinations, so that a player‚Äôs plate appearances for a certain team are treated separately from their plate appearances for another team, if they played for multiple teams in this season for some reason. This will account for the fact that a player might change swing characteristics upon getting to a new team.\nFirst, let‚Äôs create a unique ID for each Plate Appearance in pitches.\nFor each at-bat, decide if the batter is on the home_team (if inning_topbot == ‚ÄúBot‚Äù) or the away_team (if inning_topbot == ‚ÄúTop‚Äù). This assignment handles trades automatically, because the data for each game has the correct home/away teams for that date.\n\n\nShow Code\npitches &lt;- statcast_data %&gt;%\n  mutate(\n    PA_id = paste(game_pk, at_bat_number, sep=\"_\"),\n    batter_team = ifelse(inning_topbot == \"Bot\", home_team, away_team)\n  )\n\n\nAt this point, a single batter can have multiple rows with different batter_team values if they switched teams mid-season. Each row corresponds to a single plate appearance.\nNow we define each combination (batter, batter_team) separately, so we only include that player‚Äôs PAs while on that team.\n\n\nShow Code\n# Each (batter, batter_team) combination with total PAs\nbatter_team_pa_count &lt;- pitches %&gt;%\n  group_by(batter, batter_team) %&gt;%\n  distinct(PA_id) %&gt;%\n  summarise(total_PA_for_that_team = n(), .groups=\"drop\") %&gt;%\n  arrange(batter, batter_team)\n\n\nChecking players who switched teams midway through, like Justin Turner, who had 349 PAs for Toronto along with 190 PAs for Seattle, we can see that the batter_team_pa_count is about correct. We get 332 and 189 PAs in our data respectively, likely due to some missing data.\nTo get mean swing length for a player, we need to use only the rows from the times the batter was on that team. That means merging in batter_team_map so we can group by (batter, batter_team).\n\n\nShow Code\nbatter_team_swing_stats &lt;- pitches %&gt;%\n  # Keep rows where swing_length and bat_speed are not NA\n  filter(!is.na(swing_length), !is.na(bat_speed)) %&gt;%\n  group_by(batter, batter_team) %&gt;%\n  summarise(\n    mean_swing_length = mean(swing_length, na.rm=TRUE),\n    mean_bat_speed = mean(bat_speed, na.rm=TRUE), # Will need in Question IB\n    sd_swing_length = sd(swing_length, na.rm=TRUE), # Will need later\n    sd_bat_speed = sd(bat_speed, na.rm=TRUE), # Will need later\n    .groups=\"drop\"\n  )\n\n\nFor each batter-team combination, we now have the mean swing length and bat speed, along with standard deviation. We can now calculate the weighted standard deviation of swing length for each team.\nWe want to first add the total PA for each batter-team combination to the batter_team_swing_stats data frame. This will allow us to weight the standard deviation of swing length by the number of plate appearances for each player.\n\n\nShow Code\nbatter_team_swing_stats &lt;- batter_team_swing_stats %&gt;%\n  left_join(batter_team_pa_count, by=c(\"batter\", \"batter_team\"))\n\n\nWe‚Äôll define a small helper to compute weighted SD:\n\n\nShow Code\nweighted_sd &lt;- function(x, w) {\n  w_mean &lt;- sum(x * w, na.rm=TRUE) / sum(w, na.rm=TRUE)\n  w_var  &lt;- sum(w * (x - w_mean)^2, na.rm=TRUE) / sum(w, na.rm=TRUE)\n  sqrt(w_var)\n}\n\n\n\n\nShow Code\nteam_diversity &lt;- batter_team_swing_stats %&gt;%\n  group_by(batter_team) %&gt;%\n  summarise(\n    # Weighted SD of each player's mean bat_speed\n    team_sd_mean_bat_speed = weighted_sd(mean_bat_speed, total_PA_for_that_team),\n    # Weighted SD of each player's mean swing_length\n    team_sd_mean_swing_length = weighted_sd(mean_swing_length, total_PA_for_that_team),\n    .groups=\"drop\"\n  )\n\n\nWe now have the weighted standard deviation of swing length for each team. We can now check if this variation in swing length helps or hurts scoring. We will use wOBA and xWOBA as proxies for scoring. We will do these calculations manually as our dataset does not include all 2024 Plate Appearances so we will only focus on our subset of the data. We will use the woba_value and woba_denom column in pitches to calculate wOBA for each plate appearance. We will then calculate the average wOBA for each team.\nTypically, wOBA is credited once per completed PA (plate appearance). In many Statcast datasets, woba_value and woba_denom are only non-zero on the final pitch of the PA. However, to ensure we only count each PA once, we can explicitly slice the final pitch of each (game_pk, at_bat_number).\n\n\nShow Code\n# We'll define \"final pitch\" as the last pitch_number in that (game_pk, at_bat_number)\nfinal_pitches &lt;- pitches %&gt;%\n  group_by(game_pk, at_bat_number) %&gt;%\n  slice_max(order_by = pitch_number, n = 1) %&gt;%\n  ungroup()\n\n\nNow final_pitches has exactly 1 row per completed PA. This is our formula for wOBA:\nUpon inspecting the data, we can see that there are some rows for which woba_value or woba_denom are NA, so we will filter those out.\n\n\nShow Code\nfinal_pitches_clean &lt;- final_pitches %&gt;%\n  filter(!is.na(woba_denom), !is.na(woba_value))\n\n\n\n\nShow Code\nteam_woba &lt;- final_pitches_clean %&gt;%\n  group_by(batter_team) %&gt;%\n  summarise(\n    total_woba_value = sum(woba_value, na.rm=TRUE),\n    total_woba_denom = sum(woba_denom, na.rm=TRUE),\n    team_wOBA = ifelse(total_woba_denom == 0, NA,\n                       total_woba_value / total_woba_denom),\n    .groups=\"drop\"\n  ) %&gt;%\n  select(-total_woba_value, -total_woba_denom) %&gt;%\n  arrange(desc(team_wOBA))\n\n\nThis list seems to make sense and is in line with overall 2024 data. Typically, woba_denom is 1 for outcomes like walks, hit-by-pitch, or batted-ball events. For sacrifice flies or other rare events, it can vary slightly. The sum of woba_denom for a team is essentially the sum of PAs used in the wOBA formula (excluding some events like catcher interference or maybe intentionals, depending on how MLBAM codes them). So, its sum is essentially ‚Äúthe count of wOBA-relevant plate appearances‚Äù.\n\n\nShow Code\nanalysis_df &lt;- team_diversity %&gt;%\n  left_join(team_woba,  by=\"batter_team\")\n\n\nWe can also calculate xwOBA for each team. xwOBA is a more advanced metric that uses exit velocity and launch angle to estimate the expected wOBA for each batted ball. We will use the estimated_woba_using_speedangle column in pitches to calculate xwOBA for each batted-ball plate appearance, then account for walks, hit-by-pitches, etc. We will then calculate the average xwOBA for each team.\n\n\nShow Code\nfinal_pitches_xwoba &lt;- final_pitches %&gt;%\n  filter(!is.na(estimated_woba_using_speedangle)) %&gt;%\n  mutate(\n    xWOBA_value = estimated_woba_using_speedangle,\n    xWOBA_denom = 1\n  )\n\n\n\n\nShow Code\nteam_xwoba &lt;- final_pitches_xwoba %&gt;%\n  group_by(batter_team) %&gt;%\n  summarise(\n    total_xwoba_value = sum(xWOBA_value, na.rm=TRUE),\n    total_xwoba_denom = sum(xWOBA_denom, na.rm=TRUE),\n    team_xwOBA = ifelse(total_xwoba_denom == 0, NA,\n                        total_xwoba_value / total_xwoba_denom),\n    .groups=\"drop\"\n  ) %&gt;%\n  select(-total_xwoba_value, -total_xwoba_denom) %&gt;%\n  arrange(desc(team_xwOBA))\n\n\nThis also seems to make sense and is in line with overall 2024 data.\n\n\nShow Code\nanalysis_df &lt;- analysis_df %&gt;%\n  left_join(team_xwoba, by=\"batter_team\")\n\n\n\n\nBat Speed\n\n\nShow Code\nggplot(analysis_df, aes(x=team_sd_mean_bat_speed, y=team_wOBA)) +\n  geom_point() +\n  labs(\n    title=\"Team Swing Speed Diversity vs. Team wOBA\",\n    x=\"Team SD of Mean Bat Speed\",\n    y=\"Team wOBA\"\n  )+\n  theme_pub()+\n  ## Add trendline\n  geom_smooth(method=\"lm\", se=TRUE)\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nLet‚Äôs create a linear model to see if there is a significant relationship between team swing speed diversity and team wOBA.\n\n\nShow Code\nlm_woba &lt;- lm(team_wOBA ~ team_sd_mean_bat_speed, data=analysis_df)\nsummary(lm_woba)\n\n\n\nCall:\nlm(formula = team_wOBA ~ team_sd_mean_bat_speed, data = analysis_df)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.037205 -0.007888 -0.001217  0.010741  0.024043 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)            0.305091   0.015363  19.859   &lt;2e-16 ***\nteam_sd_mean_bat_speed 0.005201   0.005375   0.968    0.341    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.01376 on 28 degrees of freedom\nMultiple R-squared:  0.03236,   Adjusted R-squared:  -0.002197 \nF-statistic: 0.9364 on 1 and 28 DF,  p-value: 0.3415\n\n\nIn this linear model, we get a negative Adjusted R-squared, signalling that there‚Äôs almost no linear relationship‚Äîin other words, once the penalty for adding a predictor is applied, the model explains less variance than just using the mean. The p-value is 0.341, which is insignificant at the 0.05 level. This suggests that there is no significant relationship between team swing speed diversity and team wOBA.\nLet‚Äôs also check the relationship between team swing speed diversity and team xwOBA.\n\n\nShow Code\nggplot(analysis_df, aes(x=team_sd_mean_bat_speed, y=team_xwOBA)) +\n  geom_point() +\n  labs(\n    title=\"Team Swing Speed Diversity vs. Team xwOBA\",\n    x=\"Team SD of Mean Bat Speed\",\n    y=\"Team xwOBA\"\n  )+\n  theme_pub()+\n  geom_smooth(method=\"lm\", se=TRUE)\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nShow Code\nlm_xwoba &lt;- lm(team_xwOBA ~ team_sd_mean_bat_speed, data=analysis_df)\nsummary(lm_xwoba)\n\n\n\nCall:\nlm(formula = team_xwOBA ~ team_sd_mean_bat_speed, data = analysis_df)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.028354 -0.008561 -0.002876  0.008982  0.025606 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)            0.290644   0.014814  19.619   &lt;2e-16 ***\nteam_sd_mean_bat_speed 0.007635   0.005183   1.473    0.152    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.01327 on 28 degrees of freedom\nMultiple R-squared:  0.07193,   Adjusted R-squared:  0.03879 \nF-statistic:  2.17 on 1 and 28 DF,  p-value: 0.1519\n\n\nThe Adjusted R-Squared for this model is positive, and the p-value of team-level bat speed diversity has gone down to 0.177. It is possible that with more data from other seasons, we would be able to see more signficiant relationships between team-level bat speed diversity and team xwOBA.\nHowever, at this point, it is worth noting that our data is pointing to the possibility of a relationship, even if it is small, between team-level bat speed diversity and team xwOBA. This is worth more exploration.\nLet‚Äôs do the same for swing length.\n\n\nSwing Length\n\n\nShow Code\nggplot(analysis_df, aes(x=team_sd_mean_swing_length, y=team_wOBA)) +\n  geom_point() +\n  labs(\n    title=\"Team Swing Length Diversity vs. Team wOBA\",\n    x=\"Team SD of Mean Swing Length\",\n    y=\"Team wOBA\"\n  )+\n  theme_pub()+\n  geom_smooth(method=\"lm\", se=TRUE)\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nShow Code\nlm_woba &lt;- lm(team_wOBA ~ team_sd_mean_swing_length, data=analysis_df)\nsummary(lm_woba)\n\n\n\nCall:\nlm(formula = team_wOBA ~ team_sd_mean_swing_length, data = analysis_df)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.036636 -0.008650 -0.002102  0.011271  0.024778 \n\nCoefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)               0.317075   0.012163  26.068   &lt;2e-16 ***\nteam_sd_mean_swing_length 0.006875   0.030472   0.226    0.823    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.01398 on 28 degrees of freedom\nMultiple R-squared:  0.001814,  Adjusted R-squared:  -0.03384 \nF-statistic: 0.0509 on 1 and 28 DF,  p-value: 0.8231\n\n\nThe Adjusted R-squared for swing length is also negative, and the p-value is 0.823, which is insignificant at the 0.05 level. This suggests that there is no significant relationship between team swing length diversity and team wOBA.\nLet‚Äôs also check the relationship between team swing length diversity and team xwOBA.\n\n\nShow Code\nggplot(analysis_df, aes(x=team_sd_mean_swing_length, y=team_xwOBA)) +\n  geom_point() +\n  labs(\n    title=\"Team Swing Length Diversity vs. Team xwOBA\",\n    x=\"Team SD of Mean Swing Length\",\n    y=\"Team xwOBA\"\n  )+\n  theme_pub()+\n  geom_smooth(method=\"lm\", se=TRUE)\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nShow Code\nlm_xwoba &lt;- lm(team_xwOBA ~ team_sd_mean_swing_length, data=analysis_df)\nsummary(lm_xwoba)\n\n\n\nCall:\nlm(formula = team_xwOBA ~ team_sd_mean_swing_length, data = analysis_df)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.028497 -0.009080 -0.002055  0.011655  0.028380 \n\nCoefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                0.30086    0.01179  25.526   &lt;2e-16 ***\nteam_sd_mean_swing_length  0.02899    0.02953   0.982    0.335    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.01354 on 28 degrees of freedom\nMultiple R-squared:  0.03329,   Adjusted R-squared:  -0.001233 \nF-statistic: 0.9643 on 1 and 28 DF,  p-value: 0.3345\n\n\nAgain, our Adjusted R-Squared is negative, and the p-value of the team-level swing length diversity is 0.367. This suggests that there is no significant relationship between team swing length diversity and team xwOBA.\nIn conclusion, we have found that there is no significant relationship between team swing length diversity and team wOBA or xwOBA. This suggests that having a variety of average swing length characteristics across players on the roster does not help or hurt scoring.\nIt is worth noting that our xwOBA data seems to point towards stronger relationships than our wOBA data. In theory, xwOBA is a more trustworthy measure of offensive production, because it looks to eliminate the noise of defense and luck. Sometimes including both together‚Äîor creating a combined 2D measure‚Äîcan reveal patterns not evident in either metric separately.\nPerhaps the simplest approach is to include both predictors in the same linear model as a multiple regression model.\n\n\n\nMultivariate Approach of Swing ‚ÄúStyle‚Äù\n\nMultiple Regression Model\nIf team_sd_mean_swing_length was ‚Äúuseless‚Äù by itself, it could still contribute additional explanatory power in the presence of team_sd_mean_bat_speed. For example, maybe a team with both high bat‚Äêspeed diversity and high swing‚Äêlength diversity has synergy (or a deficiency).\n\n\nShow Code\n# Using wOBA\nmod_multi &lt;- lm(team_wOBA ~ team_sd_mean_bat_speed + team_sd_mean_swing_length,\n                data = analysis_df)\nsummary(mod_multi)\n\n\n\nCall:\nlm(formula = team_wOBA ~ team_sd_mean_bat_speed + team_sd_mean_swing_length, \n    data = analysis_df)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.036697 -0.008451 -0.001479  0.010265  0.024673 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                0.306548   0.015998  19.161   &lt;2e-16 ***\nteam_sd_mean_bat_speed     0.006809   0.006726   1.012    0.320    \nteam_sd_mean_swing_length -0.015350   0.037546  -0.409    0.686    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.01397 on 27 degrees of freedom\nMultiple R-squared:  0.03832,   Adjusted R-squared:  -0.03292 \nF-statistic: 0.5379 on 2 and 27 DF,  p-value: 0.5901\n\n\nShow Code\n# Using xWOBA\nmod_multi &lt;- lm(team_xwOBA ~ team_sd_mean_bat_speed + team_sd_mean_swing_length,\n                data = analysis_df)\nsummary(mod_multi)\n\n\n\nCall:\nlm(formula = team_xwOBA ~ team_sd_mean_bat_speed + team_sd_mean_swing_length, \n    data = analysis_df)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.028559 -0.008475 -0.003035  0.009484  0.025352 \n\nCoefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)               0.290056   0.015467  18.754   &lt;2e-16 ***\nteam_sd_mean_bat_speed    0.006987   0.006503   1.074    0.292    \nteam_sd_mean_swing_length 0.006191   0.036297   0.171    0.866    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.01351 on 27 degrees of freedom\nMultiple R-squared:  0.07293,   Adjusted R-squared:  0.004259 \nF-statistic: 1.062 on 2 and 27 DF,  p-value: 0.3598\n\n\nThe Adjusted R-Squared for both models are negative, suggesting that while team-level bat speed variation may help explain between-team variation in xWOBA, a combined model with swing length is not providing any explanation for the variation in xWOBA or wOBA. In both models, the p-values for both predictors are also insignificant at the 0.05 level.\nIt is worth noting that other models with interaction and transformed predictors were considered, though nothing yielded a realistic and suitable result.\nGiven that all of this data analysis was done on 30 data points (30 teams), we would like to consider a team‚Äôs wOBA and xWOBA for each game.\nTakeaway #1: Having a variety of swing speeds on a roster could correlate with expected scoring statistics for a team over a season, but a variety of swing lengths does not.\n\n\n\nQuestion IB: Within a game, does consistency of a team‚Äôs swings help or hurt scoring?\nIn this model, we can incorporate situational or day‚Äêto‚Äêday changes in the team‚Äôs lineup (maybe a star was resting, or they traded for a new hitter mid‚Äêseason). We will want to compute each team‚Äôs in‚Äêgame diversity of swing speed and swing length weighted by plate appearances, then comparing that to the team‚Äôs in‚Äêgame wOBA and xwOBA.\nFirst, we group by (game_pk, batter_team, batter) to compute the mean and median for each player in that game. We also count how many plate appearances that batter had in that game.\n\n\nShow Code\npitches = read.csv(\"data/statcast_data.csv\")\n\npitches &lt;- pitches %&gt;%\n  mutate(\n    PA_id = paste(game_pk, at_bat_number, sep=\"_\"),\n    batter_team = ifelse(inning_topbot == \"Bot\", home_team, away_team)\n  )\n\nplayer_game_allPA &lt;- pitches %&gt;%\n  group_by(game_pk, batter, batter_team) %&gt;%\n  summarise(\n    total_pa_game = n_distinct(PA_id),    # all PAs in that game for that batter\n    .groups = \"drop\"\n  )\n\n# Subset to actual swings\nbatter_game_swings &lt;- pitches %&gt;%\n  filter(!is.na(bat_speed), !is.na(swing_length)) %&gt;%\n  group_by(game_pk, batter, batter_team) %&gt;%\n  summarise(\n    # mean & median for the swings that occurred\n    game_median_bat_speed    = median(bat_speed, na.rm=TRUE),\n    game_median_swing_length = median(swing_length, na.rm=TRUE),\n    .groups=\"drop\"\n  )\n\n\nFinally, we do a left_join so that every (game, batter, team) from player_game_allPA is preserved‚Äîeven if the player never swung:\n\n\nShow Code\nbatter_game_stats &lt;- player_game_allPA %&gt;%\n  left_join(batter_game_swings,\n            by = c(\"game_pk\", \"batter\", \"batter_team\"))\n\n\nSome batters (especially if they only had one PA) might have 0 swings and thus NA data for the swing columns. That is okay, as they will not effect our weighted standard deviations.\nNow, let‚Äôs get our team-level game-by-game diversity of swing speed and swing length. We will use the same weighted standard deviation formula as before, but this time we will use the game_mean_bat_speed and game_mean_swing_length columns.\n\n\nShow Code\nteam_game_diversity &lt;- batter_game_stats %&gt;%\n  group_by(game_pk, batter_team) %&gt;%\n  summarise(\n    # Weighted SD of each player's median (bat_speed)\n    game_sd_median_bat_speed = weighted_sd(game_median_bat_speed, total_pa_game),\n\n    # Weighted SD of each player's median (swing_length)\n    game_sd_median_swing_length = weighted_sd(game_median_swing_length, total_pa_game),\n    \n    .groups = \"drop\"\n  )\n\n\nNow each row in team_game_diversity is a single (game_pk, batter_team) with four different ‚Äúdiversity‚Äù metrics (two based on mean, two based on median).\nNext, we will compute game-level xWOBA and wOBA for each team. We will use the same formula as before, but this time we will use the woba_value and woba_denom columns in pitches to calculate wOBA for each plate appearance. We will then calculate the average wOBA for each team.\n\n\nShow Code\ngame_woba &lt;- final_pitches_clean %&gt;%\n  group_by(game_pk, batter_team) %&gt;%\n  summarise(\n    total_woba_val   = sum(woba_value, na.rm=TRUE),\n    total_woba_denom = sum(woba_denom, na.rm=TRUE),\n    game_wOBA = ifelse(total_woba_denom == 0, NA,\n                       total_woba_val / total_woba_denom),\n    .groups=\"drop\"\n  ) %&gt;%\n  select(game_pk, batter_team, game_wOBA)\n\ngame_xwoba &lt;- final_pitches_xwoba %&gt;%\n  group_by(game_pk, batter_team) %&gt;%\n  summarise(\n    total_xwoba_value   = sum(xWOBA_value, na.rm=TRUE),\n    total_xwoba_denom = sum(xWOBA_denom, na.rm=TRUE),\n    game_xwOBA = ifelse(total_xwoba_denom == 0, NA,\n                        total_xwoba_value / total_xwoba_denom),\n    .groups=\"drop\"\n  ) %&gt;%\n  select(game_pk, batter_team, game_xwOBA)\n\n\nNow, combine into an analysis dataframe:\n\n\nShow Code\nanalysis_game_df &lt;- team_game_diversity %&gt;%\n  left_join(game_woba, by=c(\"game_pk\", \"batter_team\"))\n\nanalysis_game_df &lt;- analysis_game_df %&gt;%\n  left_join(game_xwoba, by=c(\"game_pk\",\"batter_team\"))\n\n\nLet‚Äôs make our models for swing length:\n\n\nShow Code\n# Median-based statistics\nmedian_woba_swing_length_model &lt;- lm(game_wOBA ~ game_sd_median_swing_length,\n                    data=analysis_game_df)\nsummary(median_woba_swing_length_model)\n\n\n\nCall:\nlm(formula = game_wOBA ~ game_sd_median_swing_length, data = analysis_game_df)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.280789 -0.061869 -0.002215  0.062242  0.311536 \n\nCoefficients:\n                             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                  0.331454   0.004442  74.610  &lt; 2e-16 ***\ngame_sd_median_swing_length -0.035054   0.008007  -4.378 1.22e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.0898 on 4804 degrees of freedom\nMultiple R-squared:  0.003973,  Adjusted R-squared:  0.003766 \nF-statistic: 19.16 on 1 and 4804 DF,  p-value: 1.225e-05\n\n\nShow Code\nmedian_xwoba_swing_length_model &lt;- lm(game_xwOBA ~ game_sd_median_swing_length,\n                    data=analysis_game_df)\nsummary(median_xwoba_swing_length_model)\n\n\n\nCall:\nlm(formula = game_xwOBA ~ game_sd_median_swing_length, data = analysis_game_df)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.240329 -0.046413 -0.002318  0.044446  0.235543 \n\nCoefficients:\n                             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                  0.320361   0.003298   97.13  &lt; 2e-16 ***\ngame_sd_median_swing_length -0.022292   0.005945   -3.75 0.000179 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.06667 on 4804 degrees of freedom\nMultiple R-squared:  0.002918,  Adjusted R-squared:  0.002711 \nF-statistic: 14.06 on 1 and 4804 DF,  p-value: 0.0001792\n\n\nWe tried out both mean and median-based models to ensure that outliers in the data were not influencing individual player‚Äôs swing data. However, the mean-based and median-based models are showing similar results. Thus, we are going to graph just median-based results, as they are much more signficiant. These four models are all interesting though, with significant p-values for all coefficients of team swing length diversity, and positive Adjusted R-Squared values, even if incredibly small, for all models.\nThe coefficients for team swing length diversity are all negative, suggesting that on a game-by-game basis, a more consistent swing length is correlated with better offensive production. The p-values are all significant at the 0.05 level, suggesting that there is a significant relationship between team swing length diversity and team wOBA and xwOBA. The Adjusted R-Squared values are all positive, suggesting that the models explain some variance in team wOBA and xwOBA.\nThis finding is interesting, as it could point to a number of things: - Consistent team-wide swing length approaches might be best for scoring - Our team-by-team data might simply have not had enough sample size to find significant correlations\nOne possible explanation: The teams with the best scouting and analytics can prepare their players similarly for a particular game, allowing them to capitalize on the opponents‚Äô weaknesses or particular ballpark-related advantages.\nLet‚Äôs make our models for bat speed:\n\n\nShow Code\n# Median-based statistics\nmedian_woba_bat_speed_model &lt;- lm(game_wOBA ~ game_sd_median_bat_speed,\n                    data=analysis_game_df)\nsummary(median_woba_bat_speed_model)\n\n\n\nCall:\nlm(formula = game_wOBA ~ game_sd_median_bat_speed, data = analysis_game_df)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.280950 -0.062190 -0.001972  0.062406  0.311361 \n\nCoefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)               0.316606   0.003393  93.312   &lt;2e-16 ***\ngame_sd_median_bat_speed -0.001043   0.000871  -1.198    0.231    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.08997 on 4804 degrees of freedom\nMultiple R-squared:  0.0002985, Adjusted R-squared:  9.044e-05 \nF-statistic: 1.435 on 1 and 4804 DF,  p-value: 0.2311\n\n\nShow Code\nmedian_xwoba_bat_speed_model &lt;- lm(game_xwOBA ~ game_sd_median_bat_speed,\n                    data=analysis_game_df)\nsummary(median_xwoba_bat_speed_model)\n\n\n\nCall:\nlm(formula = game_xwOBA ~ game_sd_median_bat_speed, data = analysis_game_df)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.237892 -0.046046 -0.002679  0.044713  0.232560 \n\nCoefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)              3.082e-01  2.518e-03 122.407   &lt;2e-16 ***\ngame_sd_median_bat_speed 8.167e-05  6.465e-04   0.126    0.899    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.06677 on 4804 degrees of freedom\nMultiple R-squared:  3.323e-06, Adjusted R-squared:  -0.0002048 \nF-statistic: 0.01596 on 1 and 4804 DF,  p-value: 0.8995\n\n\nIn all models except 1, we got both a negative Adjusted R-Squared and an insignifcant sign of the coefficient. In our model of game-level team bat speed diversity with wOBA, we got a positive Adjusted R-Squared, but the p-value of the coefficient is insignificant at the 0.05 level, and it does not line up with the model using xWOBA, and thus, I will ignore it as likely due to random chance. This suggests that on a game-by-game basis, consistency in a team‚Äôs bat speed does not correlate positively or negatively with increased scoring.\nThis inversion from our potential correlations in team-level bat speed diversity and team xwOBA is interesting.\nOne possible explanation: Throughout a season, a team that has a variety of bat speeds can more easily adapt to the many pitchers they face. In one particular game, a team‚Äôs variety of bat speeds does not prove useful when they may only face two or three pitchers, provided that the starter pitches for a large portion of the game.\nLet‚Äôs graph these scenarios, using the median variation values and xWOBA:\n\n\nShow Code\nggplot(analysis_game_df, aes(x=game_sd_median_swing_length, y=game_xwOBA)) +\n  geom_point() +\n  labs(\n    title=\"Team Swing Length Diversity vs. Team xwOBA\",\n    x=\"Game SD of Median Swing Length\",\n    y=\"Game xwOBA\"\n  )+\n  theme_pub()+\n  geom_smooth(method=\"lm\", se=TRUE)\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nShow Code\nggplot(analysis_game_df, aes(x=game_sd_median_bat_speed, y=game_xwOBA)) +\n  geom_point() +\n  labs(\n    title=\"Team Swing Speed Diversity vs. Team xwOBA\",\n    x=\"Game SD of Median Bat Speed\",\n    y=\"Game xwOBA\"\n  )+\n  theme_pub()+\n  geom_smooth(method=\"lm\", se=TRUE)\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nTakeaway #2: On a game-by-game basis, a team‚Äôs swing length consistency is correlated with better offensive production, while a team‚Äôs bat speed consistency is not.\nThinking about Takeaways 1 and 2 together, it is possible that a team‚Äôs swing length consistency in a particular game points to the idea that they have prepared for a particular set of pitchers well and are able to achieve similar swing lengths to best capitalize on the attributes of the opposing pitchers or of the ballpark. However, over an entire season, it could be advantageous to have a variety of swing speeds on a roster to be able to attack the wide variety of pitchers faced, while optimal swing lengths average out over a long season and many pitchers. It is possible that swing lengths are easier to fluctuate on a per-game basis, but swing speeds are more difficult to change, thus a variety is needed on a roster.\n\nMultivariate Model\nLet‚Äôs also try one multivariate model to see if we can find a relationship between swing style consistency and xwOBA.\n\n\nShow Code\nmod_multi &lt;- lm(game_xwOBA ~ game_sd_median_bat_speed + game_sd_median_swing_length,\n                data = analysis_game_df)\nsummary(mod_multi)\n\n\n\nCall:\nlm(formula = game_xwOBA ~ game_sd_median_bat_speed + game_sd_median_swing_length, \n    data = analysis_game_df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.23922 -0.04616 -0.00230  0.04443  0.23585 \n\nCoefficients:\n                              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                  0.3186182  0.0033550  94.969  &lt; 2e-16 ***\ngame_sd_median_bat_speed     0.0021913  0.0007875   2.783  0.00541 ** \ngame_sd_median_swing_length -0.0338689  0.0072529  -4.670  3.1e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.06663 on 4803 degrees of freedom\nMultiple R-squared:  0.004523,  Adjusted R-squared:  0.004108 \nF-statistic: 10.91 on 2 and 4803 DF,  p-value: 1.871e-05\n\n\nIn this model, both bat speed and swing length are significant at the 0.05 level, and the Adjusted R-Squared is positive. This suggests that there is a significant relationship between team swing length and bat speed consistency and team xwOBA on a game-by-game basis.\nThis suggests that, holding swing length diversity constant, having a range of bat speeds within the lineup may help on a game-by-game basis. It could allow the team to adapt to differing pitch velocities and styles from the opposing pitchers.\nMeanwhile, holding bat speed diversity constant, a more consistent (less diverse) swing length appears beneficial. If everyone‚Äôs length is dialed in for that day‚Äôs pitcher(s), the team might more efficiently square up pitches or stay in the optimal ‚Äúcontact window.‚Äù\nOn a single‚Äêgame basis, these results indicate that a consistent swing length is linked to better offensive output, while some diversity in bat speed can be helpful. This aligns with the idea that hitters can unify their swing lengths to match that day‚Äôs pitchers and still bring different swing speeds to handle velocity changes or relief pitchers.\nOne possible explanation: For a particular game, a team‚Äôs swing length helps them better adjust for ballpark dimensions or aspects of the weather/environment, but a team‚Äôs bat speed diversity helps them adjust to the variety of pitchers they face.\n\n\n\nQuestion II: Does a player‚Äôs swing consistency help or hurt scoring?\nNow, we‚Äôd like to ask whether on a player-by-player basis, does a player‚Äôs swing consistency during a season correlate with success at the plate? We will use the same weighted standard deviation formula as before, but this time we will use the player‚Äôs mean swing length and bat speed for the season. Asked another way: Does having a consistent swing over a season correlate with a particular player generating offense.\n\n\nShow Code\npitches &lt;- pitches %&gt;%\n  mutate(\n    PA_id = paste(game_pk, at_bat_number, sep=\"_\"),\n    batter_team = ifelse(inning_topbot == \"Bot\", home_team, away_team)\n  )\n\nplayer_swing_consistency &lt;- pitches %&gt;%\n  filter(!is.na(swing_length), !is.na(bat_speed)) %&gt;%\n  group_by(batter) %&gt;%\n  summarise(\n    # Season-long means\n    mean_swing_length = mean(swing_length, na.rm=TRUE),\n    mean_bat_speed    = mean(bat_speed, na.rm=TRUE),\n    # Season-long standard deviations\n    sd_swing_length = sd(swing_length, na.rm=TRUE),\n    sd_bat_speed    = sd(bat_speed, na.rm=TRUE),\n    .groups = \"drop\"\n  )\n\n## Take out players with NA standard deviation\nplayer_swing_consistency &lt;- player_swing_consistency %&gt;%\n  filter(!is.na(sd_swing_length), !is.na(sd_bat_speed))\n\n\nThis gives us one row per batter, capturing that player‚Äôs overall pitch-to-pitch variation in swing metrics across the entire season.\nNow, let‚Äôs calculate xWOBA for all players over the season.\n\n\nShow Code\n# We'll define \"final pitch\" as the last pitch_number in that (game_pk, at_bat_number)\nfinal_pitches &lt;- pitches %&gt;%\n  group_by(game_pk, at_bat_number) %&gt;%\n  slice_max(order_by = pitch_number, n = 1) %&gt;%\n  ungroup()\n\nfinal_pitches_xwoba &lt;- final_pitches %&gt;%\n  filter(!is.na(estimated_woba_using_speedangle)) %&gt;%\n  mutate(\n    xWOBA_value = estimated_woba_using_speedangle,\n    xWOBA_denom = 1\n  )\n\nplayer_xwoba &lt;- final_pitches_xwoba %&gt;%\n  group_by(batter) %&gt;%\n  summarise(\n    total_xwoba_value = sum(xWOBA_value, na.rm=TRUE),\n    total_xwoba_denom = sum(xWOBA_denom, na.rm=TRUE),\n    player_xwOBA = ifelse(total_xwoba_denom == 0, NA,\n                          total_xwoba_value / total_xwoba_denom),\n    .groups=\"drop\"\n  ) %&gt;%\n  select(batter, player_xwOBA)\n\n\nNow, combine into an analysis dataframe:\n\n\nShow Code\nplayer_analysis_df &lt;- player_swing_consistency %&gt;%\n  left_join(player_xwoba, by=\"batter\")\n\n\nLet‚Äôs graph these scenarios, using the median variation values and xWOBA:\n\n\nShow Code\nggplot(player_analysis_df, aes(x=sd_swing_length, y=player_xwOBA)) +\n  geom_point() +\n  labs(\n    title=\"Player Swing Length Consistency vs. Player xwOBA\",\n    x=\"Player SD of Swing Length\",\n    y=\"Player xwOBA\"\n  )+\n  theme_pub()+\n  geom_smooth(method=\"lm\", se=TRUE)\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nShow Code\nggplot(player_analysis_df, aes(x=sd_bat_speed, y=player_xwOBA)) +\n  geom_point() +\n  labs(\n    title=\"Player Bat Speed Consistency vs. Player xwOBA\",\n    x=\"Player SD of Bat Speed\",\n    y=\"Player xwOBA\"\n  )+\n  theme_pub()+\n  geom_smooth(method=\"lm\", se=TRUE)\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nLet‚Äôs also create linear models to see if there is a significant relationship between player swing consistency and player xwOBA.\n\n\nShow Code\nmodel_sd_swing_length &lt;- lm(player_xwOBA ~ mean_swing_length + sd_swing_length, data=player_analysis_df)\nsummary(model_sd_swing_length)\n\n\n\nCall:\nlm(formula = player_xwOBA ~ mean_swing_length + sd_swing_length, \n    data = player_analysis_df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.28461 -0.02441  0.00420  0.02957  0.45818 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)        0.255807   0.044570   5.739 1.46e-08 ***\nmean_swing_length  0.014405   0.005614   2.566   0.0105 *  \nsd_swing_length   -0.074224   0.011873  -6.252 7.39e-10 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.05872 on 644 degrees of freedom\nMultiple R-squared:  0.0837,    Adjusted R-squared:  0.08085 \nF-statistic: 29.41 on 2 and 644 DF,  p-value: 5.977e-13\n\n\nShow Code\nmodel_sd_bat_speed &lt;- lm(player_xwOBA ~ mean_bat_speed + sd_bat_speed, data=player_analysis_df)\nsummary(model_sd_bat_speed)\n\n\n\nCall:\nlm(formula = player_xwOBA ~ mean_bat_speed + sd_bat_speed, data = player_analysis_df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.28346 -0.02297  0.00717  0.02965  0.45133 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)    -0.1240647  0.0614252  -2.020   0.0438 *  \nmean_bat_speed  0.0060523  0.0008243   7.342 6.36e-13 ***\nsd_bat_speed   -0.0003156  0.0010415  -0.303   0.7620    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.05818 on 644 degrees of freedom\nMultiple R-squared:  0.1005,    Adjusted R-squared:  0.09771 \nF-statistic: 35.98 on 2 and 644 DF,  p-value: 1.544e-15\n\n\nIn both models, the Adjusted R-Squared is positive, and the p-value of the coefficient is significant at the 0.05 level. This suggests that there is a significant relationship between player swing consistency and player xwOBA for both swing length and bat speed. The coefficients are negative, suggesting that a more consistent swing length and bat speed is correlated with better offensive production. This likely points to the idea that the best hitters have found optimal swing lengths and bat speeds, and while they will likely slightly deviate from them to better match the pitcher, they have less reason to adjust over the entire season. Worse hitters need to continuously adjust their swings over the season in searching for their best swing type.\n\nMultivariate Model\nLet‚Äôs also try one multivariate model to see if we can find a relationship between player swing consistency and xwOBA.\n\n\nShow Code\nmod_multi &lt;- lm(player_xwOBA ~ mean_swing_length + mean_bat_speed + sd_swing_length + sd_bat_speed,\n                data = player_analysis_df)\nsummary(mod_multi)\n\n\n\nCall:\nlm(formula = player_xwOBA ~ mean_swing_length + mean_bat_speed + \n    sd_swing_length + sd_bat_speed, data = player_analysis_df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.25051 -0.02456  0.00750  0.02774  0.44048 \n\nCoefficients:\n                    Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)       -0.0560129  0.0607960  -0.921    0.357    \nmean_swing_length -0.0084696  0.0067087  -1.262    0.207    \nmean_bat_speed     0.0066330  0.0009783   6.780 2.73e-11 ***\nsd_swing_length   -0.1243124  0.0187631  -6.625 7.34e-11 ***\nsd_bat_speed       0.0077605  0.0015873   4.889 1.28e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.05632 on 642 degrees of freedom\nMultiple R-squared:  0.1599,    Adjusted R-squared:  0.1546 \nF-statistic: 30.54 on 4 and 642 DF,  p-value: &lt; 2.2e-16\n\n\nShow Code\nlibrary(car)\nvif(mod_multi)\n\n\nmean_swing_length    mean_bat_speed   sd_swing_length      sd_bat_speed \n         1.677701          1.928688          2.934572          3.180154 \n\n\nShow Code\n## Show collinearity between predictors\ncor(player_analysis_df$sd_swing_length, player_analysis_df$sd_bat_speed)\n\n\n[1] 0.8117863\n\n\nShow Code\ncor(player_analysis_df$mean_swing_length, player_analysis_df$mean_bat_speed)\n\n\n[1] 0.6349418\n\n\nShow Code\ncor(player_analysis_df$mean_swing_length, player_analysis_df$sd_swing_length)\n\n\n[1] -0.2732526\n\n\nShow Code\ncor(player_analysis_df$mean_bat_speed, player_analysis_df$sd_bat_speed)\n\n\n[1] -0.4694914\n\n\nAlthough our VIF values are all less than 5, suggesting that multicollinearity is likely not a problem and just a result of using real imperfect data, we can try to create a ‚Äúmechanical variability‚Äù combined component using Principal Components Analysis to combine the two predictors into one.\n\n\nShow Code\n# Step 1: Standardize variables\nplayer_analysis_df &lt;- player_analysis_df %&gt;%\n  mutate(\n    sd_swing_length_scaled = scale(sd_swing_length),\n    sd_bat_speed_scaled = scale(sd_bat_speed)\n  )\n\n# Step 2: Perform PCA\npca_model &lt;- prcomp(player_analysis_df[, c(\"sd_swing_length_scaled\", \"sd_bat_speed_scaled\")],\n                    center = TRUE, scale. = TRUE)\n\n# Step 3: Add first principal component to the dataset\nplayer_analysis_df &lt;- player_analysis_df %&gt;%\n  mutate(mechanical_variability = pca_model$x[, 1])\n\n# Check PCA results\nsummary(pca_model)\n\n\nImportance of components:\n                          PC1     PC2\nStandard deviation     1.3460 0.43384\nProportion of Variance 0.9059 0.09411\nCumulative Proportion  0.9059 1.00000\n\n\n\n\nShow Code\nmodel &lt;- lm(player_xwOBA ~ mean_swing_length + mean_bat_speed + mechanical_variability,\n            data = player_analysis_df)\nsummary(model)\n\n\n\nCall:\nlm(formula = player_xwOBA ~ mean_swing_length + mean_bat_speed + \n    mechanical_variability, data = player_analysis_df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.28904 -0.02304  0.00739  0.02948  0.44140 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)            -0.0595545  0.0567898  -1.049   0.2947    \nmean_swing_length      -0.0086844  0.0068948  -1.260   0.2083    \nmean_bat_speed          0.0059808  0.0009995   5.984 3.62e-09 ***\nmechanical_variability -0.0048351  0.0018997  -2.545   0.0112 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.05788 on 643 degrees of freedom\nMultiple R-squared:  0.1112,    Adjusted R-squared:  0.1071 \nF-statistic: 26.82 on 3 and 643 DF,  p-value: 2.363e-16\n\n\nShow Code\nvif(model)\n\n\n     mean_swing_length         mean_bat_speed mechanical_variability \n              1.677655               1.905632               1.260858 \n\n\nOur VIFs are again under 5, signalling that this is a good model.\nTakeaway #3: On a player-by-player basis, a player‚Äôs swing consistency is correlated with better offensive production. This is likely because the best players have found their optimal swing lengths and bat speeds, and while they will slightly deviate from them to better match the pitcher, they have less reason to adjust over the entire season. Worse hitters need to continuously adjust their swings over the season in searching for their best swing type."
  },
  {
    "objectID": "posts/blog-1-lineup-protection/index.html",
    "href": "posts/blog-1-lineup-protection/index.html",
    "title": "Blog Post #1: Lineup Protection",
    "section": "",
    "text": "Batting order optimization is a heavily studied aspect of baseball decision-making, where teams construct lineups to maximize run production. Most studies in this area assume that hitters in the lineup are independent of one another. However, the concept of lineup protection‚Äîthe idea that a hitter‚Äôs performance is influenced by the quality of the hitter after them‚Äîremains debated within the sabermetrics community. Although batting order decisions may offer only marginal advantages in expected runs, in an era where every competitive edge counts, even subtle effects like lineup protection deserve closer examination. The theory behind lineup protection is that a hitter with a good hitter behind them will be harder to pitch around because pitchers won‚Äôt want to face the guy after him either, particularly with more runners on base. Thus, walks would decrease, and that would mean more fastballs, strikes, and pitches over the plate, essentially increasing the probability for productive hitting.\nThere are two main ways to study lineup protection:\nPitcher-Centric Analysis: Examining how pitchers alter their approach based on the quality next hitter. Previous research using 30 hitter pairs since the advent of Statcast suggested that protected hitters see an average of 0.25% more strikes compared to league average, and 0.07% more pitches down the middle of the zone. This would lead to 6 additional strikes and 2 additional pitches down the middle over a season. This study was extremely limited, however, and did not account for situations without protection, only used 30 pairs of hitters, and only compared the strike percentage a protected hitter received to the league average of that year, not to the strike percentage they had in other non-protected plate appearances. If lineup protection were to exist, teams should avoid wasting lineup protection on free swingers (putting free swingers before ‚Äúprotectors‚Äù) so that the protection is not wasted on hitters who would swing at a higher rate anyway (The Paraball Notes, 2024). Quantitatively, the hitter who bats behind you SHOULD impact the pitches you see, because the run expectancy of certain plays occurring (like walks) would change based on who the following batter is (Weinberg, 2013). Evidence of certain pairs often seems to point to the opposite, with a 2012 evaluation of players hitting after Andrew McCutchen, Ryan Braun, and Joey Votto showing no evidence that pitchers were pitching them differently based on the protection they had (Cameron, 2012).\nHall of Famer Miguel Cabrera attributed part of his power struggles early in the 2019 season to a lack of lineup protection, essentially calling out productive-yet-not-spectacular hitter behind him, Niko Goodrum, saying, ‚ÄúIn the past‚Ä¶ I got a big bat behind me. You see the way guys pitch me? that explains everything.‚Äù His manager responded by saying his statement was ‚Äúcrazy.‚Äù Data revealed that he wasn‚Äôt getting particularly fewer fastballs, strikes, or good pitches to hit in general, and that in his particular case, there wasn‚Äôt evidence for lineup protection (Stavenhagen, 2019).\nHitter Outcome Analysis: Investigating whether the quality of the next hitter influences the current hitter‚Äôs performance. Pre-Pitch F/X research found that pitchers who know that a good hitter is up next will ‚Äúpitch around‚Äù the current hitter, resulting in significantly more walks, and moderately more strikeouts. However, it found that when it comes to putting the ball in play, there was no significant impact (Tango, 2006). Much of the sabermetric community says that lineup protection is a myth, and that a player‚Äôs production is almost solely determined by their own skills; luck and random variation also play a small role (Ambrosino, 2011).\n\nHowever, a study in 2011 found that power numbers did have significant differences in situations of potential lineup protection (Phillips, 2011).\nMuch of this hitter outcome analysis is rather anecdotal, focusing on specific players and how they fare with protection. Using over 3000 Plate Appearances from Pete Alonso‚Äôs career using data from before his 2024 season, we can see higher slugging percentages with better hitters behind him, along with being 11% more likely to homer. With worse protection, he is more likely to walk, although his strikeout rates go against previous research and actually decrease with poor hitters behind him (Britton, 2024). Other research takes specific teams and analyzes whether the topic of lineup protection even applies and whether it serves a purpose in that roster‚Äôs decision-making. When the Diamondbacks acquired Mark Trumbo in 2014, writers brought up the fact that even though Trumbo‚Äôs power threat could serve to protect Paul Goldschmidt, Trumbo may not even be much better than other Diamondbacks hitters who could replace him in terms of offensive threat in general (Wiser, 2014). In 2015, Billy Hamilton pointed to a different sort of offensive advantage owing to the hitter behind him‚Äìknowing Joey Votto was hitting after him, an incredibly selective hitter often with long counts, allowed Hamilton to be patient and wait for the right pitch to steal on. In this situation, with a small sample size, the threat of Votto was preventing opposing pitchers from throwing fastballs with Hamilton on base, allowing Hamilton to get better base-stealing opportunities (Petriello, 2015).\nIt is worth noting that many within baseball discuss lineup protection with certainty. Alonso had pushed for J.D. Martinez to join and hit behind him for the Mets in 2024. Interviews with several within the game in 2015 resulted in a plethora of answers, from Joe Girardi saying lineup protection was most significant in lefty-righty matchups, Madison Bumgarner saying he doesn‚Äôt pay attention to the on-deck circle, Tim Hudson saying that it‚Äôs ‚Äúfoolish if you don‚Äôt look at the next hitter,‚Äù and multiple other pitchers saying it is a factor in their decision-making, especially later in the game."
  },
  {
    "objectID": "posts/blog-1-lineup-protection/index.html#introduction-to-lineup-protection",
    "href": "posts/blog-1-lineup-protection/index.html#introduction-to-lineup-protection",
    "title": "Blog Post #1: Lineup Protection",
    "section": "",
    "text": "Batting order optimization is a heavily studied aspect of baseball decision-making, where teams construct lineups to maximize run production. Most studies in this area assume that hitters in the lineup are independent of one another. However, the concept of lineup protection‚Äîthe idea that a hitter‚Äôs performance is influenced by the quality of the hitter after them‚Äîremains debated within the sabermetrics community. Although batting order decisions may offer only marginal advantages in expected runs, in an era where every competitive edge counts, even subtle effects like lineup protection deserve closer examination. The theory behind lineup protection is that a hitter with a good hitter behind them will be harder to pitch around because pitchers won‚Äôt want to face the guy after him either, particularly with more runners on base. Thus, walks would decrease, and that would mean more fastballs, strikes, and pitches over the plate, essentially increasing the probability for productive hitting.\nThere are two main ways to study lineup protection:\nPitcher-Centric Analysis: Examining how pitchers alter their approach based on the quality next hitter. Previous research using 30 hitter pairs since the advent of Statcast suggested that protected hitters see an average of 0.25% more strikes compared to league average, and 0.07% more pitches down the middle of the zone. This would lead to 6 additional strikes and 2 additional pitches down the middle over a season. This study was extremely limited, however, and did not account for situations without protection, only used 30 pairs of hitters, and only compared the strike percentage a protected hitter received to the league average of that year, not to the strike percentage they had in other non-protected plate appearances. If lineup protection were to exist, teams should avoid wasting lineup protection on free swingers (putting free swingers before ‚Äúprotectors‚Äù) so that the protection is not wasted on hitters who would swing at a higher rate anyway (The Paraball Notes, 2024). Quantitatively, the hitter who bats behind you SHOULD impact the pitches you see, because the run expectancy of certain plays occurring (like walks) would change based on who the following batter is (Weinberg, 2013). Evidence of certain pairs often seems to point to the opposite, with a 2012 evaluation of players hitting after Andrew McCutchen, Ryan Braun, and Joey Votto showing no evidence that pitchers were pitching them differently based on the protection they had (Cameron, 2012).\nHall of Famer Miguel Cabrera attributed part of his power struggles early in the 2019 season to a lack of lineup protection, essentially calling out productive-yet-not-spectacular hitter behind him, Niko Goodrum, saying, ‚ÄúIn the past‚Ä¶ I got a big bat behind me. You see the way guys pitch me? that explains everything.‚Äù His manager responded by saying his statement was ‚Äúcrazy.‚Äù Data revealed that he wasn‚Äôt getting particularly fewer fastballs, strikes, or good pitches to hit in general, and that in his particular case, there wasn‚Äôt evidence for lineup protection (Stavenhagen, 2019).\nHitter Outcome Analysis: Investigating whether the quality of the next hitter influences the current hitter‚Äôs performance. Pre-Pitch F/X research found that pitchers who know that a good hitter is up next will ‚Äúpitch around‚Äù the current hitter, resulting in significantly more walks, and moderately more strikeouts. However, it found that when it comes to putting the ball in play, there was no significant impact (Tango, 2006). Much of the sabermetric community says that lineup protection is a myth, and that a player‚Äôs production is almost solely determined by their own skills; luck and random variation also play a small role (Ambrosino, 2011).\n\nHowever, a study in 2011 found that power numbers did have significant differences in situations of potential lineup protection (Phillips, 2011).\nMuch of this hitter outcome analysis is rather anecdotal, focusing on specific players and how they fare with protection. Using over 3000 Plate Appearances from Pete Alonso‚Äôs career using data from before his 2024 season, we can see higher slugging percentages with better hitters behind him, along with being 11% more likely to homer. With worse protection, he is more likely to walk, although his strikeout rates go against previous research and actually decrease with poor hitters behind him (Britton, 2024). Other research takes specific teams and analyzes whether the topic of lineup protection even applies and whether it serves a purpose in that roster‚Äôs decision-making. When the Diamondbacks acquired Mark Trumbo in 2014, writers brought up the fact that even though Trumbo‚Äôs power threat could serve to protect Paul Goldschmidt, Trumbo may not even be much better than other Diamondbacks hitters who could replace him in terms of offensive threat in general (Wiser, 2014). In 2015, Billy Hamilton pointed to a different sort of offensive advantage owing to the hitter behind him‚Äìknowing Joey Votto was hitting after him, an incredibly selective hitter often with long counts, allowed Hamilton to be patient and wait for the right pitch to steal on. In this situation, with a small sample size, the threat of Votto was preventing opposing pitchers from throwing fastballs with Hamilton on base, allowing Hamilton to get better base-stealing opportunities (Petriello, 2015).\nIt is worth noting that many within baseball discuss lineup protection with certainty. Alonso had pushed for J.D. Martinez to join and hit behind him for the Mets in 2024. Interviews with several within the game in 2015 resulted in a plethora of answers, from Joe Girardi saying lineup protection was most significant in lefty-righty matchups, Madison Bumgarner saying he doesn‚Äôt pay attention to the on-deck circle, Tim Hudson saying that it‚Äôs ‚Äúfoolish if you don‚Äôt look at the next hitter,‚Äù and multiple other pitchers saying it is a factor in their decision-making, especially later in the game."
  },
  {
    "objectID": "posts/blog-1-lineup-protection/index.html#aim",
    "href": "posts/blog-1-lineup-protection/index.html#aim",
    "title": "Blog Post #1: Lineup Protection",
    "section": "Aim",
    "text": "Aim\nThis article aims to provide further insights into lineup protection using pitch-by-pitch data Statcast data from the 2024 Major League Baseball season, focusing on analyzing hitter outcomes. While literature is mixed and often negative on the existence of lineup protection, it often uses anecdotal evidence, and a more thorough investigation is necessary, especially one using the more advanced expected statistics we now have available."
  },
  {
    "objectID": "posts/blog-1-lineup-protection/index.html#setup",
    "href": "posts/blog-1-lineup-protection/index.html#setup",
    "title": "Blog Post #1: Lineup Protection",
    "section": "Setup",
    "text": "Setup\nWe would like our independent variables to be the following.\n\nCurrent batter and pitcher random effects\nCurrent hitter‚Äôs handedness and underlying quality (xwOBA)\nNext hitter‚Äôs handedness and underlying quality (xwOBA)\nBase-out state\nInning\nRun differential\n\nPrevious studies have looked at protection as a binary independent variable, but that is a narrow view on lineup protection. Lineup protection must be considered as a continuous variable because some players will protect more than others.\nOur outcome variable will be that plate appearance‚Äôs xwOBA, which will essentially give us the quality of that plate appearance based on the independent variables We would then like to see what factor the quality of the next batter has in the outcome."
  },
  {
    "objectID": "posts/blog-1-lineup-protection/index.html#methods",
    "href": "posts/blog-1-lineup-protection/index.html#methods",
    "title": "Blog Post #1: Lineup Protection",
    "section": "Methods",
    "text": "Methods\nFirst, we loaded in our libraries and read the data, which contains almost every pitch from the 2024 season (excluding when poor data was retrieved).\n\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.1     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.3     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nLoading required package: Matrix\n\n\nAttaching package: 'Matrix'\n\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\n\n\nAttaching package: 'lmerTest'\n\n\nThe following object is masked from 'package:lme4':\n\n    lmer\n\n\nThe following object is masked from 'package:stats':\n\n    step\n\n\n\n\nShow Code\nstatcast_url = \"https://lances-lineups-data.s3.us-east-2.amazonaws.com/statcast_data.csv\"\nstatcast_data &lt;- read_csv(statcast_url)\n\n\nRows: 701557 Columns: 113\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr  (16): pitch_type, player_name, events, description, des, game_type, sta...\ndbl  (88): release_speed, release_pos_x, release_pos_z, batter, pitcher, zon...\nlgl   (8): spin_dir, spin_rate_deprecated, break_angle_deprecated, break_len...\ndate  (1): game_date\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nFor each plate appearance, we aggregate key variables. We calculate pa_xwOBA as the average estimated_woba_using_speedangle for that plate appearance. We also compute run differential as the difference between bat_score and fld_score using the first pitch in the plate appearance, which reflects the score before the plate appearance starts.\n\n\nShow Code\npa_data &lt;- statcast_data %&gt;%\n  group_by(game_pk, at_bat_number) %&gt;%\n  summarize(\n    batter = first(batter),\n    pitcher = first(pitcher),\n    inning = first(inning),\n    batter_handedness = first(stand),\n    inning_topbot = first(inning_topbot),\n    # Calculate PA xwOBA from pitch-by-pitch data:\n    pa_xwOBA = mean(estimated_woba_using_speedangle, na.rm = TRUE),\n    outs_when_up = first(outs_when_up),\n    # Compute run differential at the time the PA begins:\n    run_diff = first(bat_score) - first(fld_score),\n    # Capture final base occupancy for this PA:\n    on_1b = last(on_1b),\n    on_2b = last(on_2b),\n    on_3b = last(on_3b),\n    .groups = \"drop\"\n  ) %&gt;%\n  arrange(game_pk, inning, inning_topbot, at_bat_number)\n\n\nWe then find the next batter in the lineup and get their handedness.\n\n\nShow Code\npa_data &lt;- pa_data %&gt;%\n  arrange(game_pk, inning_topbot, at_bat_number) %&gt;%\n  mutate(\n    potential_next_batter = lead(batter),\n    potential_next_batter_handedness = lead(batter_handedness)\n  ) %&gt;%\n  ungroup()\n\n\nLet‚Äôs also create a single baserunner state variable.\n\n\nShow Code\npa_data &lt;- pa_data %&gt;%\n  mutate(\n    baserunner_state = case_when(\n      !is.na(on_1b) & is.na(on_2b) & is.na(on_3b) ~ \"1B\",\n      is.na(on_1b) & !is.na(on_2b) & is.na(on_3b) ~ \"2B\",\n      is.na(on_1b) & is.na(on_2b) & !is.na(on_3b) ~ \"3B\",\n      !is.na(on_1b) & !is.na(on_2b) & is.na(on_3b) ~ \"1B-2B\",\n      !is.na(on_1b) & is.na(on_2b) & !is.na(on_3b) ~ \"1B-3B\",\n      is.na(on_1b) & !is.na(on_2b) & !is.na(on_3b) ~ \"2B-3B\",\n      !is.na(on_1b) & !is.na(on_2b) & !is.na(on_3b) ~ \"Loaded\",\n      TRUE ~ \"Empty\"\n    )\n  )\n\n\n\n\nShow Code\n# SPECIAL CASE: Remove next batter for bottom 9th+ with 2 outs and bases loaded\npa_data &lt;- pa_data %&gt;%\n  mutate(\n    bases_loaded = ifelse(!is.na(on_1b) & !is.na(on_2b) & !is.na(on_3b), 1, 0),\n    potential_next_batter = ifelse(inning_topbot == \"Bot\" & inning &gt;= 9 & outs_when_up == 2 & bases_loaded == 1, NA, potential_next_batter)\n  ) %&gt;%\n  select(-bases_loaded)\n\n\nWe will then want to make sure all hitters considered (and next hitters) are qualified, so that their xwOBA over the season has stabilized somewhat. This is a threshold of 502 plate appearances.\n\n\nShow Code\n# Count the number of plate appearances per batter (as the current batter)\nbatter_counts &lt;- pa_data %&gt;%\n  group_by(batter) %&gt;%\n  summarize(pa_count = n(), .groups = \"drop\")\n\n# Count the appearances for batters when they appear as the potential next batter (on-deck)\npotential_next_batter_counts &lt;- pa_data %&gt;%\n  group_by(potential_next_batter) %&gt;%\n  summarize(next_pa_count = n(), .groups = \"drop\")\n\n# Define the qualification threshold (502 PAs)\nqualified_threshold &lt;- 502\n\n# Identify batters who have at least 502 PAs as the current batter\nqualified_batters &lt;- batter_counts %&gt;%\n  filter(pa_count &gt;= qualified_threshold) %&gt;%\n  pull(batter)\n\n# Identify batters who have at least 502 PAs as the potential next batter (on-deck)\nqualified_next_batters &lt;- potential_next_batter_counts %&gt;%\n  filter(next_pa_count &gt;= qualified_threshold) %&gt;%\n  pull(potential_next_batter)\n\n# Filter pa_data to retain only those rows where both the current batter \n# and the potential next batter (on-deck hitter) are qualified.\npa_data_qualified &lt;- pa_data %&gt;%\n  filter(\n    batter %in% qualified_batters,\n    !is.na(potential_next_batter),         # Ensure there is a potential next batter\n    potential_next_batter %in% qualified_next_batters\n  )\n\n\nWe then calculate the current batter‚Äôs season-long xwOBA and the outcome difference between each plate appearance and that baseline xwOBA.\n\n\nShow Code\n# (a) For each current batter, calculate their season-long baseline PA xwOBA.\ncurrent_baseline &lt;- pa_data_qualified %&gt;%\n  group_by(batter) %&gt;%\n  summarize(baseline_current = mean(pa_xwOBA, na.rm = TRUE), .groups = \"drop\")\n\n# (b) Merge the baseline back into our data and compute outcomeDiff:\n# outcomeDiff = PA xwOBA - current batter's baseline xwOBA.\npa_data_qualified &lt;- pa_data_qualified %&gt;%\n  left_join(current_baseline, by = \"batter\") %&gt;%\n  mutate(outcomeDiff = pa_xwOBA - baseline_current)\n\n\nWe then calculate the next batter‚Äôs season-long xwOBA.\n\n\nShow Code\n# Next batter's baseline xwOBA\nnext_baseline &lt;- pa_data_qualified %&gt;%\n  group_by(potential_next_batter) %&gt;%\n  summarize(baseline_next = mean(pa_xwOBA, na.rm = TRUE), .groups = \"drop\")\n\n# Merge next batter's baseline\npa_data_qualified &lt;- pa_data_qualified %&gt;%\n  left_join(next_baseline, by = c(\"potential_next_batter\" = \"potential_next_batter\"))\n\n# nextHitterSkill\npa_data_qualified &lt;- pa_data_qualified %&gt;%\n  mutate(\n    nextHitterSkill = baseline_next\n  )\n\n\nNow, let‚Äôs create our mixed-effects linear model and graph!\n\n\nShow Code\npa_data_qualified$batter_handedness &lt;- factor(pa_data_qualified$batter_handedness)\npa_data_qualified$potential_next_batter_handedness &lt;- factor(pa_data_qualified$potential_next_batter_handedness)\n\n# Fit model!\nm_protection &lt;- lmer(\n  outcomeDiff ~ nextHitterSkill + batter_handedness + potential_next_batter_handedness + \n    baserunner_state + outs_when_up + inning + run_diff +\n    (1 | batter) + (1 | pitcher),\n  data = pa_data_qualified\n)\n\n\nboundary (singular) fit: see help('isSingular')\n\n\nShow Code\nsummary(m_protection)\n\n\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: \noutcomeDiff ~ nextHitterSkill + batter_handedness + potential_next_batter_handedness +  \n    baserunner_state + outs_when_up + inning + run_diff + (1 |  \n    batter) + (1 | pitcher)\n   Data: pa_data_qualified\n\nREML criterion at convergence: 38790.5\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.3626 -0.7670 -0.3533  0.6864  4.4658 \n\nRandom effects:\n Groups   Name        Variance  Std.Dev. \n pitcher  (Intercept) 2.196e-04 1.482e-02\n batter   (Intercept) 2.438e-34 1.561e-17\n Residual             1.512e-01 3.889e-01\nNumber of obs: 40706, groups:  pitcher, 811; batter, 130\n\nFixed effects:\n                                    Estimate Std. Error         df t value\n(Intercept)                       -1.022e-01  1.775e-02  2.913e+04  -5.758\nnextHitterSkill                    3.246e-01  4.695e-02  3.965e+04   6.913\nbatter_handednessR                 1.244e-03  4.081e-03  3.213e+04   0.305\npotential_next_batter_handednessR -3.313e-03  4.076e-03  3.335e+04  -0.813\nbaserunner_state1B-2B              8.182e-03  8.715e-03  4.069e+04   0.939\nbaserunner_state1B-3B              1.818e-02  1.189e-02  4.069e+04   1.530\nbaserunner_state2B                 7.758e-03  8.738e-03  4.069e+04   0.888\nbaserunner_state2B-3B              1.503e-02  1.669e-02  4.069e+04   0.900\nbaserunner_state3B                -1.206e-02  1.362e-02  4.069e+04  -0.885\nbaserunner_stateEmpty             -8.238e-03  5.019e-03  4.067e+04  -1.642\nbaserunner_stateLoaded             1.275e-04  1.367e-02  4.066e+04   0.009\nouts_when_up                      -1.769e-03  2.434e-03  4.069e+04  -0.727\ninning                            -1.318e-04  7.476e-04  2.084e+03  -0.176\nrun_diff                           1.194e-03  6.716e-04  2.667e+04   1.777\n                                  Pr(&gt;|t|)    \n(Intercept)                       8.59e-09 ***\nnextHitterSkill                   4.80e-12 ***\nbatter_handednessR                  0.7605    \npotential_next_batter_handednessR   0.4163    \nbaserunner_state1B-2B               0.3478    \nbaserunner_state1B-3B               0.1261    \nbaserunner_state2B                  0.3746    \nbaserunner_state2B-3B               0.3680    \nbaserunner_state3B                  0.3762    \nbaserunner_stateEmpty               0.1007    \nbaserunner_stateLoaded              0.9926    \nouts_when_up                        0.4673    \ninning                              0.8601    \nrun_diff                            0.0756 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nCorrelation matrix not shown by default, as p = 14 &gt; 12.\nUse print(x, correlation=TRUE)  or\n    vcov(x)        if you need it\n\n\noptimizer (nloptwrap) convergence code: 0 (OK)\nboundary (singular) fit: see help('isSingular')\n\n\nBased on our mixed-effects model, we find that when we account for all of the aspects of the game situation, the next batter‚Äôs skill level has a statistically significant effect on the outcomeDiff, meaning better on-deck hitters (above league average) correlate with higher performance (relative to the batter‚Äôs own baseline). We find that a 1-unit increase in xwOBA is associated with a 0.3246 increase in the current PA‚Äôs outcomeDiff.\nOur random variation at the pitcher level (~0.015) shows us that some pitchers systematically allow slightly higher or lower outcomeDiff."
  },
  {
    "objectID": "posts/blog-1-lineup-protection/index.html#visualizations",
    "href": "posts/blog-1-lineup-protection/index.html#visualizations",
    "title": "Blog Post #1: Lineup Protection",
    "section": "Visualizations",
    "text": "Visualizations\n\n\nShow Code\nggplot(pa_data_qualified, aes(x = nextHitterSkill, y = outcomeDiff)) +\n  geom_point(color = \"red\", alpha = 0.3) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"blue\") +\n  labs(\n    title = \"NextHitterSkill vs. OutcomeDiff (Loess Smooth)\",\n    x = \"Next Hitter Skill (xwOBA)\",\n    y = \"Outcome Difference\"\n  ) +\n  theme_minimal()\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 391 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 391 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nLet‚Äôs also make a visualization showing how different pitchers are in terms of their adjustments to next batters. Pitcher‚Äôs random effects vary as expected: some pitchers tend to be associated with larger absolute changes in outcomeDiff than others. However, this is not statistically significant using an ANOVA test.\n\n\nShow Code\nm_protection_slope &lt;- lmer(\n  outcomeDiff ~ nextHitterSkill + batter_handedness + potential_next_batter_handedness +\n    baserunner_state + outs_when_up + inning + run_diff +\n    # (1 + nextHitterSkill | pitcher) adds a random slope for nextHitterSkill\n    (1 + nextHitterSkill | pitcher) +\n    (1 | batter),\n  data = pa_data_qualified\n)\n\n\nboundary (singular) fit: see help('isSingular')\n\n\nWarning: Model failed to converge with 1 negative eigenvalue: -6.0e+01\n\n\nShow Code\nsummary(m_protection_slope)\n\n\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: \noutcomeDiff ~ nextHitterSkill + batter_handedness + potential_next_batter_handedness +  \n    baserunner_state + outs_when_up + inning + run_diff + (1 +  \n    nextHitterSkill | pitcher) + (1 | batter)\n   Data: pa_data_qualified\n\nREML criterion at convergence: 38787.6\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.3741 -0.7665 -0.3539  0.6859  4.4675 \n\nRandom effects:\n Groups   Name            Variance Std.Dev. Corr\n pitcher  (Intercept)     0.000000 0.00000      \n          nextHitterSkill 0.002719 0.05215   NaN\n batter   (Intercept)     0.000000 0.00000      \n Residual                 0.151146 0.38878      \nNumber of obs: 40706, groups:  pitcher, 811; batter, 130\n\nFixed effects:\n                                    Estimate Std. Error         df t value\n(Intercept)                       -1.035e-01  1.774e-02  3.493e+04  -5.833\nnextHitterSkill                    3.281e-01  4.702e-02  3.032e+04   6.977\nbatter_handednessR                 1.342e-03  4.085e-03  3.336e+04   0.329\npotential_next_batter_handednessR -3.183e-03  4.079e-03  3.461e+04  -0.780\nbaserunner_state1B-2B              8.122e-03  8.715e-03  4.069e+04   0.932\nbaserunner_state1B-3B              1.815e-02  1.189e-02  4.069e+04   1.527\nbaserunner_state2B                 7.837e-03  8.738e-03  4.069e+04   0.897\nbaserunner_state2B-3B              1.498e-02  1.669e-02  4.068e+04   0.897\nbaserunner_state3B                -1.197e-02  1.362e-02  4.069e+04  -0.879\nbaserunner_stateEmpty             -8.097e-03  5.019e-03  4.068e+04  -1.613\nbaserunner_stateLoaded             1.396e-04  1.367e-02  4.067e+04   0.010\nouts_when_up                      -1.747e-03  2.434e-03  4.069e+04  -0.718\ninning                            -1.170e-04  7.543e-04  2.175e+03  -0.155\nrun_diff                           1.140e-03  6.727e-04  2.697e+04   1.695\n                                  Pr(&gt;|t|)    \n(Intercept)                       5.51e-09 ***\nnextHitterSkill                   3.07e-12 ***\nbatter_handednessR                  0.7425    \npotential_next_batter_handednessR   0.4352    \nbaserunner_state1B-2B               0.3513    \nbaserunner_state1B-3B               0.1268    \nbaserunner_state2B                  0.3698    \nbaserunner_state2B-3B               0.3696    \nbaserunner_state3B                  0.3796    \nbaserunner_stateEmpty               0.1067    \nbaserunner_stateLoaded              0.9918    \nouts_when_up                        0.4731    \ninning                              0.8767    \nrun_diff                            0.0901 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nCorrelation matrix not shown by default, as p = 14 &gt; 12.\nUse print(x, correlation=TRUE)  or\n    vcov(x)        if you need it\n\n\noptimizer (nloptwrap) convergence code: 0 (OK)\nboundary (singular) fit: see help('isSingular')\n\n\nShow Code\nanova(m_protection, m_protection_slope, refit = FALSE)\n\n\nData: pa_data_qualified\nModels:\nm_protection: outcomeDiff ~ nextHitterSkill + batter_handedness + potential_next_batter_handedness + baserunner_state + outs_when_up + inning + run_diff + (1 | batter) + (1 | pitcher)\nm_protection_slope: outcomeDiff ~ nextHitterSkill + batter_handedness + potential_next_batter_handedness + baserunner_state + outs_when_up + inning + run_diff + (1 + nextHitterSkill | pitcher) + (1 | batter)\n                   npar   AIC   BIC logLik deviance  Chisq Df Pr(&gt;Chisq)\nm_protection         17 38824 38971 -19395    38790                     \nm_protection_slope   19 38826 38989 -19394    38788 2.9007  2     0.2345\n\n\n\n\nShow Code\nranefs &lt;- ranef(m_protection_slope)\n\n# This is a list with $pitcher and $batter (since you have random effects for both).\npitcher_re &lt;- ranefs$pitcher\n# Convert to a data frame\npitcher_re_df &lt;- as.data.frame(pitcher_re)\n\n# The data frame might have columns (Intercept) and nextHitterSkill\n# We'll rename them for clarity:\nnames(pitcher_re_df) &lt;- c(\"random_intercept\", \"random_slope_for_skill\")\n\n# Add pitcher ID as a column\npitcher_re_df$pitcher_id &lt;- rownames(pitcher_re)\n\n\n\n\nShow Code\nggplot(pitcher_re_df, aes(x = random_slope_for_skill)) +\n  geom_histogram(bins = 30, fill = \"darkgreen\", color = \"white\") +\n  labs(\n    title = \"Distribution of Pitcher Random Slopes for nextHitterSkill\",\n    x = \"Random Slope (deviation from average slope)\",\n    y = \"Count\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nLet‚Äôs list out the top and bottom 5 pitchers in terms of their random effects.\n\n\nShow Code\nlibrary(dplyr)\n\n# 1. Extract the random effects for pitchers\npitcher_random_effects &lt;- ranef(m_protection)$pitcher\n\n# 2. Convert it to a data frame and rename the random intercept column\npitcher_re_df &lt;- pitcher_random_effects %&gt;%\n  as.data.frame() %&gt;%\n  rename(random_intercept = `(Intercept)`) %&gt;%\n  mutate(pitcher_id = row.names(pitcher_random_effects))\n\n# 3. Sort by descending random_intercept to identify top/bottom pitchers\npitcher_re_sorted &lt;- pitcher_re_df %&gt;%\n  arrange(desc(random_intercept))\n\n# 4. Grab the top 5 and bottom 5\ntop_5_pitchers &lt;- head(pitcher_re_sorted, 5)\nbottom_5_pitchers &lt;- tail(pitcher_re_sorted, 5)\n\n# 5. Print or inspect results\ncat(\"Top 5 Pitchers by Random Effect:\\n\")\n\n\nTop 5 Pitchers by Random Effect:\n\n\nShow Code\nprint(top_5_pitchers)\n\n\n       random_intercept pitcher_id\n592836       0.01481674     592836\n676272       0.01481480     676272\n621389       0.01345895     621389\n665871       0.01232840     665871\n656605       0.01220370     656605\n\n\nShow Code\ncat(\"\\nBottom 5 Pitchers by Random Effect:\\n\")\n\n\n\nBottom 5 Pitchers by Random Effect:\n\n\nShow Code\nprint(bottom_5_pitchers)\n\n\n       random_intercept pitcher_id\n605400      -0.01188057     605400\n680885      -0.01294543     680885\n694973      -0.01312743     694973\n669373      -0.01397799     669373\n595014      -0.01425556     595014"
  },
  {
    "objectID": "posts/blog-1-lineup-protection/index.html#discussion",
    "href": "posts/blog-1-lineup-protection/index.html#discussion",
    "title": "Blog Post #1: Lineup Protection",
    "section": "Discussion",
    "text": "Discussion\nThis study, although rather simple, tackles some of the problems with sabermetrics‚Äô view of lineup protection. By accounting for different game situations, we find that the skill of the next batter does have a statistically significant impact on the xwOBA of the current one. This will have significant implications for lineup construction, given that we have found a way to make players better simply by making the players hitting behind them better.\nWhy is it important ‚Äì&gt; Player evaluation and player valuation, iumplications for fantasy sports, projections."
  },
  {
    "objectID": "posts/blog-1-lineup-protection/index.html#references",
    "href": "posts/blog-1-lineup-protection/index.html#references",
    "title": "Blog Post #1: Lineup Protection",
    "section": "References",
    "text": "References\nAmbrosino,¬†D. (2011, November 30). Orders of protection. The Hardball Times. https://tht.fangraphs.com/orders-of-protection/\nBradbury,¬†J.¬†C., & Drinen,¬†D.¬†J. (2007). Pigou at the plate. Journal of Sports Economics, 9(2), 211-224. https://doi.org/10.1177/1527002507300178\nBritton,¬†T. (2024, April 26). J.D. Martinez will be Pete Alonso‚Äôs protection in Mets lineup. Does that matter? The New York Times. https://www.nytimes.com/athletic/5443604/2024/04/26/mets-pete-alonso-jd-martinez-lineup/\nCameron,¬†D. (2012, May 25). Cameron: McCutchen disproves lineup protection. ESPN.com. https://insider.espn.com/mlb/insider/story/_/id/7970598/andrew-mccutchen-another-example-why-lineup-protection-myth-mlb\nHow to quantify lineup protection in baseball ‚Äî The Paraball notes. (2024, April 9). The Paraball Notes. https://www.paraballnotes.com/blog/how-to-quantify-lineup-protection-in-baseball\nLaurila,¬†D. (2016, July 14). Player‚Äôs view: Does lineup protection exist? FanGraphs Baseball. https://blogs.fangraphs.com/players-view-does-lineup-protection-exist/\nPetriello,¬†M. (2015, April 13). Billy Hamilton‚Äôs reverse lineup protection. FanGraphs Baseball. https://blogs.fangraphs.com/billy-hamiltons-reverse-lineup-protection/\nPhillips,¬†D.¬†C. (2011). You‚Äôre hurting my game: Lineup protection and injuries in Major League Baseball. Journal of Quantitative Analysis in Sports, 7(3). https://doi.org/10.2202/1559-0410.1296\nStavenhagen,¬†C. (2019, May 7). The (latest) numbers behind Miguel Cabrera‚Äôs remarks on lineup protection. The New York Times. https://www.nytimes.com/athletic/965467/2019/05/07/the-latest-numbers-behind-miguel-cabreras-remarks-on-lineup-protection/\nTango,¬†T. (2006, April 7). Pitching around batters. The Hardball Times. https://tht.fangraphs.com/pitching-around-batters/\nWeinberg,¬†N. (2013, January 1). Lineup protection: Fact or fiction? New English D. https://newenglishd.com/2013/01/01/lineup-protection-fact-or-fiction/\nWiser,¬†J. (2014, February 19). Let‚Äôs talk about lineup protection. Inside the ‚ÄôZona. https://insidethezona.com/2014/02/lets-talk-lineup-protection/"
  },
  {
    "objectID": "posts/blog-3-baserunning/index.html",
    "href": "posts/blog-3-baserunning/index.html",
    "title": "Blog #3: Baserunning",
    "section": "",
    "text": "A"
  },
  {
    "objectID": "posts/blog-3-baserunning/index.html#takeaways",
    "href": "posts/blog-3-baserunning/index.html#takeaways",
    "title": "Blog #3: Baserunning",
    "section": "",
    "text": "A"
  },
  {
    "objectID": "posts/blog-3-baserunning/index.html#introduction-to-baserunning",
    "href": "posts/blog-3-baserunning/index.html#introduction-to-baserunning",
    "title": "Blog #3: Baserunning",
    "section": "Introduction to Baserunning",
    "text": "Introduction to Baserunning\nAs Statcast expands the data they are able to collect and parse through, one big innovation is the creation of ‚ÄúBaserunning Runs,‚Äù which aims to estimate the number of runs a player is creating through baserunning alone. Statcast defines it as follows:\n‚ÄúA Statcast metric designed to express the overall value of a baserunner, measured in runs created (or lost) via stealing bases and taking extra bases on the basepaths. Each steal opportunity is assigned a probability of being successful or not, based on the pitcher and catcher the basestealer is running against. Each successful or failed steal attempt is assigned a run value, with a stolen base or advance via a balk worth +0.2 runs for the baserunner and a caught stealing or pickoff worth -0.45 runs. For non-steal baserunning plays, an estimated success probability is generated for each opportunity using inputs that include runner speed, outfielder throwing arm, runner position on the basepaths and outfielder distance from both the ball and the bases. That can be translated to a run value based on whether the runner successfully takes the extra base, is thrown out or does not attempt to advance (holds).‚Äù\nA player‚Äôs speed is only as useful as they make it, so lineup construction analysis, which often references the need for speed at the top and bottom of the order, would benefit from using this advanced data. Managers no longer have to use sprint speed to proxy a player‚Äôs value on the basepaths, they can use a player‚Äôs true baserunning value.\nIt is worth noting that the MLB opted for bigger bases in 2023 to increase action on the basepaths. This means that although Statcast has baserunning data going back to 2016, we will focus on just the 2023 and 2024 seasons to make our analysis more applicable to future seasons."
  },
  {
    "objectID": "posts/blog-3-baserunning/index.html#aim",
    "href": "posts/blog-3-baserunning/index.html#aim",
    "title": "Blog #3: Baserunning",
    "section": "Aim",
    "text": "Aim\nThis article aims to answer a couple of questions about the role baserunning has in lineup construction. We‚Äôd like to answer the following research questions, which focus on distinct parts of baserunner effects within the game:\n\nDoes having a perceived ‚Äúspeed threat‚Äù on base lead to measurable changes in the pitcher‚Äôs approach (e.g., pitch selection, pitch location, pickoff frequency), and can that impact subsequent hitters‚Äô performances?\nWhat is the optimal positioning of baserunning value within a lineup? Is it better to cluster speedy players consecutively (for multiple stolen bases or first-to-third attempts in an inning) or to spread them out to maximize the impact in different segments of the lineup?\nSince 2023, how well have managers optimized their team‚Äôs speed in their lineups?"
  },
  {
    "objectID": "posts/blog-3-baserunning/index.html#setup",
    "href": "posts/blog-3-baserunning/index.html#setup",
    "title": "Blog #3: Baserunning",
    "section": "Setup",
    "text": "Setup\nTo answer Question #1, we will need two datasets: Statcast pitch-by-pitch data for all of 2023/2024 and"
  },
  {
    "objectID": "posts/blog-3-baserunning/index.html#methods",
    "href": "posts/blog-3-baserunning/index.html#methods",
    "title": "Blog #3: Baserunning",
    "section": "Methods",
    "text": "Methods\nFirst, we loaded in our libraries and read the data, which contains almost every pitch from the 2023 and 2024 seasons (excluding when poor data was retrieved).\n\n\nShow Code\nstatcast_data = read.csv(\"data/statcast_data.csv\")\nbaserunning_data = read.csv(\"data/baserunning_data.csv\")\n\n\nNext, we want to create a ‚Äúspeed value‚Äù for each player in our base_running data. We will use runner_runs_tot from baserunning_data to create a new column, speed_value, which will be the number of runs a player generated through baserunning divided by the number of opportunities they had to generate those runs. runner_runs_tot is the number of runs a player generated through baserunning.\nDO ANALYSIS OF NUMBER OF OPPORTUNITIES FOR EACH PLAYER. This is more representative of their true baserunning threat than just the number of total baserunning runs they generated.\nNow, let‚Äôs create a lookup table for each player with their speed value.\n\n\nShow Code\nbaserunning_lookup &lt;- setNames(baserunning_data$runner_runs_tot,\n                               baserunning_data$player_id)\n\n\nNext, we will create a custom function to sum the baserunning value on base for each pitch. This function will take in the base occupancy and the lookup table we just created and return the sum of the baserunning value for each player on base.\n\n\nShow Code\n# Custom function to calculate total speed on base, ensuring all runners have data\nget_total_speed_on_base &lt;- function(on1b, on2b, on3b, baserunning_lookup) {\n  \n  # Convert IDs to character to match lookup names\n  runner_ids &lt;- as.character(c(on1b, on2b, on3b))\n  \n  # Check if all runners are in the lookup\n  if (all(!is.na(runner_ids)) && all(runner_ids %in% names(baserunning_lookup))) {\n    \n    # Sum up `runner_runs_tot` for all runners on base\n    total_speed &lt;- sum(baserunning_lookup[runner_ids], na.rm = TRUE)\n    return(total_speed)\n    \n  } else {\n    return(NA)  # Mark as NA if any runner is missing in baserunning_lookup\n  }\n}\n\n# Apply function to calculate total speed on base for each pitch, filtering valid cases\nstatcast_data &lt;- statcast_data %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    total_speed_on_base = get_total_speed_on_base(\n      on_1b, on_2b, on_3b, baserunning_lookup\n    )\n  ) %&gt;%\n  ungroup() %&gt;%\n  filter(!is.na(total_speed_on_base))\n\n# Check summary\nsummary(statcast_data$total_speed_on_base)\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-11.3825  -0.8749   1.9522   2.2307   5.3972  17.4554"
  },
  {
    "objectID": "posts/blog-3-baserunning/index.html#model-1-pitcher-behavior",
    "href": "posts/blog-3-baserunning/index.html#model-1-pitcher-behavior",
    "title": "Blog #3: Baserunning",
    "section": "Model 1: Pitcher Behavior",
    "text": "Model 1: Pitcher Behavior\n\nPitch Velocity with Speed on Base\n\n\nShow Code\nmodel_vel &lt;- lmer(\n  release_speed ~ total_speed_on_base + factor(balls) + factor(strikes) + (1 + total_speed_on_base | pitcher),\n  data = statcast_data\n)\n\nsummary(model_vel)\n\n\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: \nrelease_speed ~ total_speed_on_base + factor(balls) + factor(strikes) +  \n    (1 + total_speed_on_base | pitcher)\n   Data: statcast_data\n\nREML criterion at convergence: 18011.2\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-3.5809 -0.7468  0.1345  0.7500  2.4033 \n\nRandom effects:\n Groups   Name                Variance Std.Dev. Corr \n pitcher  (Intercept)         12.13254 3.4832        \n          total_speed_on_base  0.04979 0.2231   -0.39\n Residual                     22.94663 4.7903        \nNumber of obs: 2919, groups:  pitcher, 372\n\nFixed effects:\n                      Estimate Std. Error         df t value Pr(&gt;|t|)    \n(Intercept)          8.966e+01  2.562e-01  5.277e+02 350.002  &lt; 2e-16 ***\ntotal_speed_on_base -2.229e-03  3.168e-02  1.348e+02  -0.070 0.944003    \nfactor(balls)1       6.057e-02  2.294e-01  2.760e+03   0.264 0.791785    \nfactor(balls)2       9.957e-01  2.980e-01  2.787e+03   3.341 0.000845 ***\nfactor(balls)3       3.028e+00  3.956e-01  2.786e+03   7.654 2.67e-14 ***\nfactor(strikes)1     1.150e-01  2.292e-01  2.701e+03   0.502 0.615918    \nfactor(strikes)2    -9.891e-01  2.572e-01  2.790e+03  -3.846 0.000123 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr) ttl___ fctr(b)1 fctr(b)2 fct()3 fctr(s)1\nttl_spd_n_b -0.334                                         \nfctr(blls)1 -0.226 -0.006                                  \nfctr(blls)2 -0.139 -0.024  0.384                           \nfctr(blls)3 -0.094 -0.001  0.312    0.327                  \nfctr(strk)1 -0.298 -0.006 -0.170   -0.179   -0.166         \nfctr(strk)2 -0.222 -0.009 -0.264   -0.349   -0.344  0.474  \n\n\n\n\nPitch Selection with Speed on Base"
  },
  {
    "objectID": "posts/blog-3-baserunning/index.html#model-1",
    "href": "posts/blog-3-baserunning/index.html#model-1",
    "title": "Blog #3: Baserunning",
    "section": "Model #1:",
    "text": "Model #1:"
  },
  {
    "objectID": "posts/blog-3-baserunning/index.html#visualizations",
    "href": "posts/blog-3-baserunning/index.html#visualizations",
    "title": "Blog #3: Baserunning",
    "section": "Visualizations",
    "text": "Visualizations"
  },
  {
    "objectID": "posts/blog-3-baserunning/index.html#discussion",
    "href": "posts/blog-3-baserunning/index.html#discussion",
    "title": "Blog #3: Baserunning",
    "section": "Discussion",
    "text": "Discussion"
  },
  {
    "objectID": "posts/blog-3-baserunning/index.html#references",
    "href": "posts/blog-3-baserunning/index.html#references",
    "title": "Blog #3: Baserunning",
    "section": "References",
    "text": "References"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Lance‚Äôs Lineups ‚öæ",
    "section": "",
    "text": "I‚Äôm Lance Brady, a senior at Yale University majoring in Statistics & Data Science.\nFor my senior thesis, I‚Äôm exploring baseball lineup optimization using data-driven methods.\nHere are some of my articles and thoughts on lineup optimization!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlog #3: Baserunning\n\n\n\n\n\n\nswing profiles\n\n\nlineups\n\n\nstatcast\n\n\n\n\n\n\n\n\n\nMar 5, 2025\n\n\nLance Brady\n\n\n\n\n\n\n\n\n\n\n\n\nBlog #3: Baserunning\n\n\n\n\n\n\nswing profiles\n\n\nlineups\n\n\nstatcast\n\n\n\n\n\n\n\n\n\nMar 5, 2025\n\n\nLance Brady\n\n\n\n\n\n\n\n\n\n\n\n\nBlog Post #2: Swing Profiles\n\n\n\n\n\n\nswing profiles\n\n\nlineups\n\n\nstatcast\n\n\n\n\n\n\n\n\n\nFeb 26, 2025\n\n\nLance Brady\n\n\n\n\n\n\n\n\n\n\n\n\nBlog Post #1: Lineup Protection\n\n\n\n\n\n\nlineup protection\n\n\nlineups\n\n\nstatcast\n\n\n\n\n\n\n\n\n\nFeb 18, 2025\n\n\nLance Brady\n\n\n\n\n\n\nNo matching items"
  }
]