[
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Data Sources",
    "section": "",
    "text": "This page lists the datasets used in the blog.\n\nBlog Post #1: Lineup Protection\nüìÑ Download statcast_data.csv\n\n\nBlog Post #2: Swing Profiles\nüìÑ Download statcast_data.csv"
  },
  {
    "objectID": "posts/blog-2-swing-profiles/index.html",
    "href": "posts/blog-2-swing-profiles/index.html",
    "title": "Blog Post #2: Swing Profiles",
    "section": "",
    "text": "Talk about origin of data, what has been done."
  },
  {
    "objectID": "posts/blog-2-swing-profiles/index.html#introduction-to-swing-profile-data",
    "href": "posts/blog-2-swing-profiles/index.html#introduction-to-swing-profile-data",
    "title": "Blog Post #2: Swing Profiles",
    "section": "",
    "text": "Talk about origin of data, what has been done."
  },
  {
    "objectID": "posts/blog-2-swing-profiles/index.html#current-findings",
    "href": "posts/blog-2-swing-profiles/index.html#current-findings",
    "title": "Blog Post #2: Swing Profiles",
    "section": "Current Findings",
    "text": "Current Findings"
  },
  {
    "objectID": "posts/blog-1-lineup-protection/index.html",
    "href": "posts/blog-1-lineup-protection/index.html",
    "title": "Blog Post #1: Lineup Protection",
    "section": "",
    "text": "Batting order optimization is a heavily studied aspect of baseball decision-making, where teams construct lineups to maximize run production. Most studies in this area assume that hitters in the lineup are independent of one another. However, the concept of lineup protection‚Äîthe idea that a hitter‚Äôs performance is influenced by the quality of the hitter after them‚Äîremains debated within the sabermetrics community. Although batting order decisions may offer only marginal advantages in expected runs, in an era where every competitive edge counts, even subtle effects like lineup protection deserve closer examination. The theory behind lineup protection is that a hitter with a good hitter behind them will be harder to pitch around because pitchers won‚Äôt want to face the guy after him either, particularly with more runners on base. Thus, walks would decrease, and that would mean more fastballs, strikes, and pitches over the plate, essentially increasing the probability for productive hitting.\nThere are two main ways to study lineup protection:\nPitcher-Centric Analysis: Examining how pitchers alter their approach based on the quality next hitter. Previous research using 30 hitter pairs since the advent of Statcast suggested that protected hitters see an average of 0.25% more strikes compared to league average, and 0.07% more pitches down the middle of the zone. This would lead to 6 additional strikes and 2 additional pitches down the middle over a season. This study was extremely limited, however, and did not account for situations without protection, only used 30 pairs of hitters, and only compared the strike percentage a protected hitter received to the league average of that year, not to the strike percentage they had in other non-protected plate appearances. If lineup protection were to exist, teams should avoid wasting lineup protection on free swingers (putting free swingers before ‚Äúprotectors‚Äù) so that the protection is not wasted on hitters who would swing at a higher rate anyway (The Paraball Notes, 2024). Quantitatively, the hitter who bats behind you SHOULD impact the pitches you see, because the run expectancy of certain plays occurring (like walks) would change based on who the following batter is (Weinberg, 2013). Evidence of certain pairs often seems to point to the opposite, with a 2012 evaluation of players hitting after Andrew McCutchen, Ryan Braun, and Joey Votto showing no evidence that pitchers were pitching them differently based on the protection they had (Cameron, 2012).\nHall of Famer Miguel Cabrera attributed part of his power struggles early in the 2019 season to a lack of lineup protection, essentially calling out productive-yet-not-spectacular hitter behind him, Niko Goodrum, saying, ‚ÄúIn the past‚Ä¶ I got a big bat behind me. You see the way guys pitch me? that explains everything.‚Äù His manager responded by saying his statement was ‚Äúcrazy.‚Äù Data revealed that he wasn‚Äôt getting particularly fewer fastballs, strikes, or good pitches to hit in general, and that in his particular case, there wasn‚Äôt evidence for lineup protection (Stavenhagen, 2019).\nHitter Outcome Analysis: Investigating whether the quality of the next hitter influences the current hitter‚Äôs performance. Pre-Pitch F/X research found that pitchers who know that a good hitter is up next will ‚Äúpitch around‚Äù the current hitter, resulting in significantly more walks, and moderately more strikeouts. However, it found that when it comes to putting the ball in play, there was no significant impact (Tango, 2006). Much of the sabermetric community says that lineup protection is a myth, and that a player‚Äôs production is almost solely determined by their own skills; luck and random variation also play a small role (Ambrosino, 2011).\n\nHowever, a study in 2011 found that power numbers did have significant differences in situations of potential lineup protection (Phillips, 2011).\nMuch of this hitter outcome analysis is rather anecdotal, focusing on specific players and how they fare with protection. Using over 3000 Plate Appearances from Pete Alonso‚Äôs career using data from before his 2024 season, we can see higher slugging percentages with better hitters behind him, along with being 11% more likely to homer. With worse protection, he is more likely to walk, although his strikeout rates go against previous research and actually decrease with poor hitters behind him (Britton, 2024). Other research takes specific teams and analyzes whether the topic of lineup protection even applies and whether it serves a purpose in that roster‚Äôs decision-making. When the Diamondbacks acquired Mark Trumbo in 2014, writers brought up the fact that even though Trumbo‚Äôs power threat could serve to protect Paul Goldschmidt, Trumbo may not even be much better than other Diamondbacks hitters who could replace him in terms of offensive threat in general (Wiser, 2014). In 2015, Billy Hamilton pointed to a different sort of offensive advantage owing to the hitter behind him‚Äìknowing Joey Votto was hitting after him, an incredibly selective hitter often with long counts, allowed Hamilton to be patient and wait for the right pitch to steal on. In this situation, with a small sample size, the threat of Votto was preventing opposing pitchers from throwing fastballs with Hamilton on base, allowing Hamilton to get better base-stealing opportunities (Petriello, 2015).\nIt is worth noting that many within baseball discuss lineup protection with certainty. Alonso had pushed for J.D. Martinez to join and hit behind him for the Mets in 2024. Interviews with several within the game in 2015 resulted in a plethora of answers, from Joe Girardi saying lineup protection was most significant in lefty-righty matchups, Madison Bumgarner saying he doesn‚Äôt pay attention to the on-deck circle, Tim Hudson saying that it‚Äôs ‚Äúfoolish if you don‚Äôt look at the next hitter,‚Äù and multiple other pitchers saying it is a factor in their decision-making, especially later in the game."
  },
  {
    "objectID": "posts/blog-1-lineup-protection/index.html#introduction-to-lineup-protection",
    "href": "posts/blog-1-lineup-protection/index.html#introduction-to-lineup-protection",
    "title": "Blog Post #1: Lineup Protection",
    "section": "",
    "text": "Batting order optimization is a heavily studied aspect of baseball decision-making, where teams construct lineups to maximize run production. Most studies in this area assume that hitters in the lineup are independent of one another. However, the concept of lineup protection‚Äîthe idea that a hitter‚Äôs performance is influenced by the quality of the hitter after them‚Äîremains debated within the sabermetrics community. Although batting order decisions may offer only marginal advantages in expected runs, in an era where every competitive edge counts, even subtle effects like lineup protection deserve closer examination. The theory behind lineup protection is that a hitter with a good hitter behind them will be harder to pitch around because pitchers won‚Äôt want to face the guy after him either, particularly with more runners on base. Thus, walks would decrease, and that would mean more fastballs, strikes, and pitches over the plate, essentially increasing the probability for productive hitting.\nThere are two main ways to study lineup protection:\nPitcher-Centric Analysis: Examining how pitchers alter their approach based on the quality next hitter. Previous research using 30 hitter pairs since the advent of Statcast suggested that protected hitters see an average of 0.25% more strikes compared to league average, and 0.07% more pitches down the middle of the zone. This would lead to 6 additional strikes and 2 additional pitches down the middle over a season. This study was extremely limited, however, and did not account for situations without protection, only used 30 pairs of hitters, and only compared the strike percentage a protected hitter received to the league average of that year, not to the strike percentage they had in other non-protected plate appearances. If lineup protection were to exist, teams should avoid wasting lineup protection on free swingers (putting free swingers before ‚Äúprotectors‚Äù) so that the protection is not wasted on hitters who would swing at a higher rate anyway (The Paraball Notes, 2024). Quantitatively, the hitter who bats behind you SHOULD impact the pitches you see, because the run expectancy of certain plays occurring (like walks) would change based on who the following batter is (Weinberg, 2013). Evidence of certain pairs often seems to point to the opposite, with a 2012 evaluation of players hitting after Andrew McCutchen, Ryan Braun, and Joey Votto showing no evidence that pitchers were pitching them differently based on the protection they had (Cameron, 2012).\nHall of Famer Miguel Cabrera attributed part of his power struggles early in the 2019 season to a lack of lineup protection, essentially calling out productive-yet-not-spectacular hitter behind him, Niko Goodrum, saying, ‚ÄúIn the past‚Ä¶ I got a big bat behind me. You see the way guys pitch me? that explains everything.‚Äù His manager responded by saying his statement was ‚Äúcrazy.‚Äù Data revealed that he wasn‚Äôt getting particularly fewer fastballs, strikes, or good pitches to hit in general, and that in his particular case, there wasn‚Äôt evidence for lineup protection (Stavenhagen, 2019).\nHitter Outcome Analysis: Investigating whether the quality of the next hitter influences the current hitter‚Äôs performance. Pre-Pitch F/X research found that pitchers who know that a good hitter is up next will ‚Äúpitch around‚Äù the current hitter, resulting in significantly more walks, and moderately more strikeouts. However, it found that when it comes to putting the ball in play, there was no significant impact (Tango, 2006). Much of the sabermetric community says that lineup protection is a myth, and that a player‚Äôs production is almost solely determined by their own skills; luck and random variation also play a small role (Ambrosino, 2011).\n\nHowever, a study in 2011 found that power numbers did have significant differences in situations of potential lineup protection (Phillips, 2011).\nMuch of this hitter outcome analysis is rather anecdotal, focusing on specific players and how they fare with protection. Using over 3000 Plate Appearances from Pete Alonso‚Äôs career using data from before his 2024 season, we can see higher slugging percentages with better hitters behind him, along with being 11% more likely to homer. With worse protection, he is more likely to walk, although his strikeout rates go against previous research and actually decrease with poor hitters behind him (Britton, 2024). Other research takes specific teams and analyzes whether the topic of lineup protection even applies and whether it serves a purpose in that roster‚Äôs decision-making. When the Diamondbacks acquired Mark Trumbo in 2014, writers brought up the fact that even though Trumbo‚Äôs power threat could serve to protect Paul Goldschmidt, Trumbo may not even be much better than other Diamondbacks hitters who could replace him in terms of offensive threat in general (Wiser, 2014). In 2015, Billy Hamilton pointed to a different sort of offensive advantage owing to the hitter behind him‚Äìknowing Joey Votto was hitting after him, an incredibly selective hitter often with long counts, allowed Hamilton to be patient and wait for the right pitch to steal on. In this situation, with a small sample size, the threat of Votto was preventing opposing pitchers from throwing fastballs with Hamilton on base, allowing Hamilton to get better base-stealing opportunities (Petriello, 2015).\nIt is worth noting that many within baseball discuss lineup protection with certainty. Alonso had pushed for J.D. Martinez to join and hit behind him for the Mets in 2024. Interviews with several within the game in 2015 resulted in a plethora of answers, from Joe Girardi saying lineup protection was most significant in lefty-righty matchups, Madison Bumgarner saying he doesn‚Äôt pay attention to the on-deck circle, Tim Hudson saying that it‚Äôs ‚Äúfoolish if you don‚Äôt look at the next hitter,‚Äù and multiple other pitchers saying it is a factor in their decision-making, especially later in the game."
  },
  {
    "objectID": "posts/blog-1-lineup-protection/index.html#aim",
    "href": "posts/blog-1-lineup-protection/index.html#aim",
    "title": "Blog Post #1: Lineup Protection",
    "section": "Aim",
    "text": "Aim\nThis article aims to provide further insights into lineup protection using pitch-by-pitch data Statcast data from the 2024 Major League Baseball season, focusing on analyzing hitter outcomes. While literature is mixed and often negative on the existence of lineup protection, it often uses anecdotal evidence, and a more thorough investigation is necessary, especially one using the more advanced expected statistics we now have available."
  },
  {
    "objectID": "posts/blog-1-lineup-protection/index.html#setup",
    "href": "posts/blog-1-lineup-protection/index.html#setup",
    "title": "Blog Post #1: Lineup Protection",
    "section": "Setup",
    "text": "Setup\nWe would like our independent variables to be the following.\n\nCurrent batter and pitcher random effects\nCurrent hitter‚Äôs handedness and underlying quality (xwOBA)\nNext hitter‚Äôs handedness and underlying quality (xwOBA)\nBase-out state\nInning\nRun differential\n\nPrevious studies have looked at protection as a binary independent variable, but that is a narrow view on lineup protection. Lineup protection must be considered as a continuous variable because some players will protect more than others.\nOur outcome variable will be that plate appearance‚Äôs xwOBA, which will essentially give us the quality of that plate appearance based on the independent variables We would then like to see what factor the quality of the next batter has in the outcome."
  },
  {
    "objectID": "posts/blog-1-lineup-protection/index.html#methods",
    "href": "posts/blog-1-lineup-protection/index.html#methods",
    "title": "Blog Post #1: Lineup Protection",
    "section": "Methods",
    "text": "Methods\nFirst, we loaded in our libraries and read the data, which contains almost every pitch from the 2024 season (excluding when poor data was retrieved).\n\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.1     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.3     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nLoading required package: Matrix\n\n\nAttaching package: 'Matrix'\n\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\n\n\nAttaching package: 'lmerTest'\n\n\nThe following object is masked from 'package:lme4':\n\n    lmer\n\n\nThe following object is masked from 'package:stats':\n\n    step\n\n\n\n\nShow Code\nstatcast_url = \"https://lances-lineups-data.s3.us-east-2.amazonaws.com/statcast_data.csv\"\nstatcast_data &lt;- read_csv(statcast_url)\n\n\nRows: 701557 Columns: 113\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr  (16): pitch_type, player_name, events, description, des, game_type, sta...\ndbl  (88): release_speed, release_pos_x, release_pos_z, batter, pitcher, zon...\nlgl   (8): spin_dir, spin_rate_deprecated, break_angle_deprecated, break_len...\ndate  (1): game_date\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nFor each plate appearance, we aggregate key variables. We calculate pa_xwOBA as the average estimated_woba_using_speedangle for that plate appearance. We also compute run differential as the difference between bat_score and fld_score using the first pitch in the plate appearance, which reflects the score before the plate appearance starts.\n\n\nShow Code\npa_data &lt;- statcast_data %&gt;%\n  group_by(game_pk, at_bat_number) %&gt;%\n  summarize(\n    batter = first(batter),\n    pitcher = first(pitcher),\n    inning = first(inning),\n    batter_handedness = first(stand),\n    inning_topbot = first(inning_topbot),\n    # Calculate PA xwOBA from pitch-by-pitch data:\n    pa_xwOBA = mean(estimated_woba_using_speedangle, na.rm = TRUE),\n    outs_when_up = first(outs_when_up),\n    # Compute run differential at the time the PA begins:\n    run_diff = first(bat_score) - first(fld_score),\n    # Capture final base occupancy for this PA:\n    on_1b = last(on_1b),\n    on_2b = last(on_2b),\n    on_3b = last(on_3b),\n    .groups = \"drop\"\n  ) %&gt;%\n  arrange(game_pk, inning, inning_topbot, at_bat_number)\n\n\nWe then find the next batter in the lineup and get their handedness.\n\n\nShow Code\npa_data &lt;- pa_data %&gt;%\n  arrange(game_pk, inning_topbot, at_bat_number) %&gt;%\n  mutate(\n    potential_next_batter = lead(batter),\n    potential_next_batter_handedness = lead(batter_handedness)\n  ) %&gt;%\n  ungroup()\n\n\nLet‚Äôs also create a single baserunner state variable.\n\n\nShow Code\npa_data &lt;- pa_data %&gt;%\n  mutate(\n    baserunner_state = case_when(\n      !is.na(on_1b) & is.na(on_2b) & is.na(on_3b) ~ \"1B\",\n      is.na(on_1b) & !is.na(on_2b) & is.na(on_3b) ~ \"2B\",\n      is.na(on_1b) & is.na(on_2b) & !is.na(on_3b) ~ \"3B\",\n      !is.na(on_1b) & !is.na(on_2b) & is.na(on_3b) ~ \"1B-2B\",\n      !is.na(on_1b) & is.na(on_2b) & !is.na(on_3b) ~ \"1B-3B\",\n      is.na(on_1b) & !is.na(on_2b) & !is.na(on_3b) ~ \"2B-3B\",\n      !is.na(on_1b) & !is.na(on_2b) & !is.na(on_3b) ~ \"Loaded\",\n      TRUE ~ \"Empty\"\n    )\n  )\n\n\n\n\nShow Code\n# SPECIAL CASE: Remove next batter for bottom 9th+ with 2 outs and bases loaded\npa_data &lt;- pa_data %&gt;%\n  mutate(\n    bases_loaded = ifelse(!is.na(on_1b) & !is.na(on_2b) & !is.na(on_3b), 1, 0),\n    potential_next_batter = ifelse(inning_topbot == \"Bot\" & inning &gt;= 9 & outs_when_up == 2 & bases_loaded == 1, NA, potential_next_batter)\n  ) %&gt;%\n  select(-bases_loaded)\n\n\nWe will then want to make sure all hitters considered (and next hitters) are qualified, so that their xwOBA over the season has stabilized somewhat. This is a threshold of 502 plate appearances.\n\n\nShow Code\n# Count the number of plate appearances per batter (as the current batter)\nbatter_counts &lt;- pa_data %&gt;%\n  group_by(batter) %&gt;%\n  summarize(pa_count = n(), .groups = \"drop\")\n\n# Count the appearances for batters when they appear as the potential next batter (on-deck)\npotential_next_batter_counts &lt;- pa_data %&gt;%\n  group_by(potential_next_batter) %&gt;%\n  summarize(next_pa_count = n(), .groups = \"drop\")\n\n# Define the qualification threshold (502 PAs)\nqualified_threshold &lt;- 502\n\n# Identify batters who have at least 502 PAs as the current batter\nqualified_batters &lt;- batter_counts %&gt;%\n  filter(pa_count &gt;= qualified_threshold) %&gt;%\n  pull(batter)\n\n# Identify batters who have at least 502 PAs as the potential next batter (on-deck)\nqualified_next_batters &lt;- potential_next_batter_counts %&gt;%\n  filter(next_pa_count &gt;= qualified_threshold) %&gt;%\n  pull(potential_next_batter)\n\n# Filter pa_data to retain only those rows where both the current batter \n# and the potential next batter (on-deck hitter) are qualified.\npa_data_qualified &lt;- pa_data %&gt;%\n  filter(\n    batter %in% qualified_batters,\n    !is.na(potential_next_batter),         # Ensure there is a potential next batter\n    potential_next_batter %in% qualified_next_batters\n  )\n\n\nWe then calculate the current batter‚Äôs season-long xwOBA and the outcome difference between each plate appearance and that baseline xwOBA.\n\n\nShow Code\n# (a) For each current batter, calculate their season-long baseline PA xwOBA.\ncurrent_baseline &lt;- pa_data_qualified %&gt;%\n  group_by(batter) %&gt;%\n  summarize(baseline_current = mean(pa_xwOBA, na.rm = TRUE), .groups = \"drop\")\n\n# (b) Merge the baseline back into our data and compute outcomeDiff:\n# outcomeDiff = PA xwOBA - current batter's baseline xwOBA.\npa_data_qualified &lt;- pa_data_qualified %&gt;%\n  left_join(current_baseline, by = \"batter\") %&gt;%\n  mutate(outcomeDiff = pa_xwOBA - baseline_current)\n\n\nWe then calculate the next batter‚Äôs season-long xwOBA.\n\n\nShow Code\n# Next batter's baseline xwOBA\nnext_baseline &lt;- pa_data_qualified %&gt;%\n  group_by(potential_next_batter) %&gt;%\n  summarize(baseline_next = mean(pa_xwOBA, na.rm = TRUE), .groups = \"drop\")\n\n# Merge next batter's baseline\npa_data_qualified &lt;- pa_data_qualified %&gt;%\n  left_join(next_baseline, by = c(\"potential_next_batter\" = \"potential_next_batter\"))\n\n# nextHitterSkill\npa_data_qualified &lt;- pa_data_qualified %&gt;%\n  mutate(\n    nextHitterSkill = baseline_next\n  )\n\n\nNow, let‚Äôs create our mixed-effects linear model and graph!\n\n\nShow Code\npa_data_qualified$batter_handedness &lt;- factor(pa_data_qualified$batter_handedness)\npa_data_qualified$potential_next_batter_handedness &lt;- factor(pa_data_qualified$potential_next_batter_handedness)\n\n# Fit model!\nm_protection &lt;- lmer(\n  outcomeDiff ~ nextHitterSkill + batter_handedness + potential_next_batter_handedness + \n    baserunner_state + outs_when_up + inning + run_diff +\n    (1 | batter) + (1 | pitcher),\n  data = pa_data_qualified\n)\n\n\nboundary (singular) fit: see help('isSingular')\n\n\nShow Code\nsummary(m_protection)\n\n\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: \noutcomeDiff ~ nextHitterSkill + batter_handedness + potential_next_batter_handedness +  \n    baserunner_state + outs_when_up + inning + run_diff + (1 |  \n    batter) + (1 | pitcher)\n   Data: pa_data_qualified\n\nREML criterion at convergence: 38790.5\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.3626 -0.7670 -0.3533  0.6864  4.4658 \n\nRandom effects:\n Groups   Name        Variance  Std.Dev. \n pitcher  (Intercept) 2.196e-04 1.482e-02\n batter   (Intercept) 2.438e-34 1.561e-17\n Residual             1.512e-01 3.889e-01\nNumber of obs: 40706, groups:  pitcher, 811; batter, 130\n\nFixed effects:\n                                    Estimate Std. Error         df t value\n(Intercept)                       -1.022e-01  1.775e-02  2.913e+04  -5.758\nnextHitterSkill                    3.246e-01  4.695e-02  3.965e+04   6.913\nbatter_handednessR                 1.244e-03  4.081e-03  3.213e+04   0.305\npotential_next_batter_handednessR -3.313e-03  4.076e-03  3.335e+04  -0.813\nbaserunner_state1B-2B              8.182e-03  8.715e-03  4.069e+04   0.939\nbaserunner_state1B-3B              1.818e-02  1.189e-02  4.069e+04   1.530\nbaserunner_state2B                 7.758e-03  8.738e-03  4.069e+04   0.888\nbaserunner_state2B-3B              1.503e-02  1.669e-02  4.069e+04   0.900\nbaserunner_state3B                -1.206e-02  1.362e-02  4.069e+04  -0.885\nbaserunner_stateEmpty             -8.238e-03  5.019e-03  4.067e+04  -1.642\nbaserunner_stateLoaded             1.275e-04  1.367e-02  4.066e+04   0.009\nouts_when_up                      -1.769e-03  2.434e-03  4.069e+04  -0.727\ninning                            -1.318e-04  7.476e-04  2.084e+03  -0.176\nrun_diff                           1.194e-03  6.716e-04  2.667e+04   1.777\n                                  Pr(&gt;|t|)    \n(Intercept)                       8.59e-09 ***\nnextHitterSkill                   4.80e-12 ***\nbatter_handednessR                  0.7605    \npotential_next_batter_handednessR   0.4163    \nbaserunner_state1B-2B               0.3478    \nbaserunner_state1B-3B               0.1261    \nbaserunner_state2B                  0.3746    \nbaserunner_state2B-3B               0.3680    \nbaserunner_state3B                  0.3762    \nbaserunner_stateEmpty               0.1007    \nbaserunner_stateLoaded              0.9926    \nouts_when_up                        0.4673    \ninning                              0.8601    \nrun_diff                            0.0756 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nCorrelation matrix not shown by default, as p = 14 &gt; 12.\nUse print(x, correlation=TRUE)  or\n    vcov(x)        if you need it\n\n\noptimizer (nloptwrap) convergence code: 0 (OK)\nboundary (singular) fit: see help('isSingular')\n\n\nBased on our mixed-effects model, we find that when we account for all of the aspects of the game situation, the next batter‚Äôs skill level has a statistically significant effect on the outcomeDiff, meaning better on-deck hitters (above league average) correlate with higher performance (relative to the batter‚Äôs own baseline). We find that a 1-unit increase in xwOBA is associated with a 0.3246 increase in the current PA‚Äôs outcomeDiff.\nOur random variation at the pitcher level (~0.015) shows us that some pitchers systematically allow slightly higher or lower outcomeDiff."
  },
  {
    "objectID": "posts/blog-1-lineup-protection/index.html#visualizations",
    "href": "posts/blog-1-lineup-protection/index.html#visualizations",
    "title": "Blog Post #1: Lineup Protection",
    "section": "Visualizations",
    "text": "Visualizations\n\n\nShow Code\nggplot(pa_data_qualified, aes(x = nextHitterSkill, y = outcomeDiff)) +\n  geom_point(color = \"red\", alpha = 0.3) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"blue\") +\n  labs(\n    title = \"NextHitterSkill vs. OutcomeDiff (Loess Smooth)\",\n    x = \"Next Hitter Skill (xwOBA)\",\n    y = \"Outcome Difference\"\n  ) +\n  theme_minimal()\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 391 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 391 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nLet‚Äôs also make a visualization showing how different pitchers are in terms of their adjustments to next batters. Pitcher‚Äôs random effects vary as expected: some pitchers tend to be associated with larger absolute changes in outcomeDiff than others. However, this is not statistically significant using an ANOVA test.\n\n\nShow Code\nm_protection_slope &lt;- lmer(\n  outcomeDiff ~ nextHitterSkill + batter_handedness + potential_next_batter_handedness +\n    baserunner_state + outs_when_up + inning + run_diff +\n    # (1 + nextHitterSkill | pitcher) adds a random slope for nextHitterSkill\n    (1 + nextHitterSkill | pitcher) +\n    (1 | batter),\n  data = pa_data_qualified\n)\n\n\nboundary (singular) fit: see help('isSingular')\n\n\nWarning: Model failed to converge with 1 negative eigenvalue: -6.0e+01\n\n\nShow Code\nsummary(m_protection_slope)\n\n\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: \noutcomeDiff ~ nextHitterSkill + batter_handedness + potential_next_batter_handedness +  \n    baserunner_state + outs_when_up + inning + run_diff + (1 +  \n    nextHitterSkill | pitcher) + (1 | batter)\n   Data: pa_data_qualified\n\nREML criterion at convergence: 38787.6\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.3741 -0.7665 -0.3539  0.6859  4.4675 \n\nRandom effects:\n Groups   Name            Variance Std.Dev. Corr\n pitcher  (Intercept)     0.000000 0.00000      \n          nextHitterSkill 0.002719 0.05215   NaN\n batter   (Intercept)     0.000000 0.00000      \n Residual                 0.151146 0.38878      \nNumber of obs: 40706, groups:  pitcher, 811; batter, 130\n\nFixed effects:\n                                    Estimate Std. Error         df t value\n(Intercept)                       -1.035e-01  1.774e-02  3.493e+04  -5.833\nnextHitterSkill                    3.281e-01  4.702e-02  3.032e+04   6.977\nbatter_handednessR                 1.342e-03  4.085e-03  3.336e+04   0.329\npotential_next_batter_handednessR -3.183e-03  4.079e-03  3.461e+04  -0.780\nbaserunner_state1B-2B              8.122e-03  8.715e-03  4.069e+04   0.932\nbaserunner_state1B-3B              1.815e-02  1.189e-02  4.069e+04   1.527\nbaserunner_state2B                 7.837e-03  8.738e-03  4.069e+04   0.897\nbaserunner_state2B-3B              1.498e-02  1.669e-02  4.068e+04   0.897\nbaserunner_state3B                -1.197e-02  1.362e-02  4.069e+04  -0.879\nbaserunner_stateEmpty             -8.097e-03  5.019e-03  4.068e+04  -1.613\nbaserunner_stateLoaded             1.396e-04  1.367e-02  4.067e+04   0.010\nouts_when_up                      -1.747e-03  2.434e-03  4.069e+04  -0.718\ninning                            -1.170e-04  7.543e-04  2.175e+03  -0.155\nrun_diff                           1.140e-03  6.727e-04  2.697e+04   1.695\n                                  Pr(&gt;|t|)    \n(Intercept)                       5.51e-09 ***\nnextHitterSkill                   3.07e-12 ***\nbatter_handednessR                  0.7425    \npotential_next_batter_handednessR   0.4352    \nbaserunner_state1B-2B               0.3513    \nbaserunner_state1B-3B               0.1268    \nbaserunner_state2B                  0.3698    \nbaserunner_state2B-3B               0.3696    \nbaserunner_state3B                  0.3796    \nbaserunner_stateEmpty               0.1067    \nbaserunner_stateLoaded              0.9918    \nouts_when_up                        0.4731    \ninning                              0.8767    \nrun_diff                            0.0901 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nCorrelation matrix not shown by default, as p = 14 &gt; 12.\nUse print(x, correlation=TRUE)  or\n    vcov(x)        if you need it\n\n\noptimizer (nloptwrap) convergence code: 0 (OK)\nboundary (singular) fit: see help('isSingular')\n\n\nShow Code\nanova(m_protection, m_protection_slope, refit = FALSE)\n\n\nData: pa_data_qualified\nModels:\nm_protection: outcomeDiff ~ nextHitterSkill + batter_handedness + potential_next_batter_handedness + baserunner_state + outs_when_up + inning + run_diff + (1 | batter) + (1 | pitcher)\nm_protection_slope: outcomeDiff ~ nextHitterSkill + batter_handedness + potential_next_batter_handedness + baserunner_state + outs_when_up + inning + run_diff + (1 + nextHitterSkill | pitcher) + (1 | batter)\n                   npar   AIC   BIC logLik deviance  Chisq Df Pr(&gt;Chisq)\nm_protection         17 38824 38971 -19395    38790                     \nm_protection_slope   19 38826 38989 -19394    38788 2.9007  2     0.2345\n\n\n\n\nShow Code\nranefs &lt;- ranef(m_protection_slope)\n\n# This is a list with $pitcher and $batter (since you have random effects for both).\npitcher_re &lt;- ranefs$pitcher\n# Convert to a data frame\npitcher_re_df &lt;- as.data.frame(pitcher_re)\n\n# The data frame might have columns (Intercept) and nextHitterSkill\n# We'll rename them for clarity:\nnames(pitcher_re_df) &lt;- c(\"random_intercept\", \"random_slope_for_skill\")\n\n# Add pitcher ID as a column\npitcher_re_df$pitcher_id &lt;- rownames(pitcher_re)\n\n\n\n\nShow Code\nggplot(pitcher_re_df, aes(x = random_slope_for_skill)) +\n  geom_histogram(bins = 30, fill = \"darkgreen\", color = \"white\") +\n  labs(\n    title = \"Distribution of Pitcher Random Slopes for nextHitterSkill\",\n    x = \"Random Slope (deviation from average slope)\",\n    y = \"Count\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nLet‚Äôs list out the top and bottom 5 pitchers in terms of their random effects.\n\n\nShow Code\nlibrary(dplyr)\n\n# 1. Extract the random effects for pitchers\npitcher_random_effects &lt;- ranef(m_protection)$pitcher\n\n# 2. Convert it to a data frame and rename the random intercept column\npitcher_re_df &lt;- pitcher_random_effects %&gt;%\n  as.data.frame() %&gt;%\n  rename(random_intercept = `(Intercept)`) %&gt;%\n  mutate(pitcher_id = row.names(pitcher_random_effects))\n\n# 3. Sort by descending random_intercept to identify top/bottom pitchers\npitcher_re_sorted &lt;- pitcher_re_df %&gt;%\n  arrange(desc(random_intercept))\n\n# 4. Grab the top 5 and bottom 5\ntop_5_pitchers &lt;- head(pitcher_re_sorted, 5)\nbottom_5_pitchers &lt;- tail(pitcher_re_sorted, 5)\n\n# 5. Print or inspect results\ncat(\"Top 5 Pitchers by Random Effect:\\n\")\n\n\nTop 5 Pitchers by Random Effect:\n\n\nShow Code\nprint(top_5_pitchers)\n\n\n       random_intercept pitcher_id\n592836       0.01481674     592836\n676272       0.01481480     676272\n621389       0.01345895     621389\n665871       0.01232840     665871\n656605       0.01220370     656605\n\n\nShow Code\ncat(\"\\nBottom 5 Pitchers by Random Effect:\\n\")\n\n\n\nBottom 5 Pitchers by Random Effect:\n\n\nShow Code\nprint(bottom_5_pitchers)\n\n\n       random_intercept pitcher_id\n605400      -0.01188057     605400\n680885      -0.01294543     680885\n694973      -0.01312743     694973\n669373      -0.01397799     669373\n595014      -0.01425556     595014"
  },
  {
    "objectID": "posts/blog-1-lineup-protection/index.html#discussion",
    "href": "posts/blog-1-lineup-protection/index.html#discussion",
    "title": "Blog Post #1: Lineup Protection",
    "section": "Discussion",
    "text": "Discussion\nThis study, although rather simple, tackles some of the problems with sabermetrics‚Äô view of lineup protection. By accounting for different game situations, we find that the skill of the next batter does have a statistically significant impact on the xwOBA of the current one. This will have significant implications for lineup construction, given that we have found a way to make players better simply by making the players hitting behind them better.\nWhy is it important ‚Äì&gt; Player evaluation and player valuation, iumplications for fantasy sports, projections."
  },
  {
    "objectID": "posts/blog-1-lineup-protection/index.html#references",
    "href": "posts/blog-1-lineup-protection/index.html#references",
    "title": "Blog Post #1: Lineup Protection",
    "section": "References",
    "text": "References\nAmbrosino,¬†D. (2011, November 30). Orders of protection. The Hardball Times. https://tht.fangraphs.com/orders-of-protection/\nBradbury,¬†J.¬†C., & Drinen,¬†D.¬†J. (2007). Pigou at the plate. Journal of Sports Economics, 9(2), 211-224. https://doi.org/10.1177/1527002507300178\nBritton,¬†T. (2024, April 26). J.D. Martinez will be Pete Alonso‚Äôs protection in Mets lineup. Does that matter? The New York Times. https://www.nytimes.com/athletic/5443604/2024/04/26/mets-pete-alonso-jd-martinez-lineup/\nCameron,¬†D. (2012, May 25). Cameron: McCutchen disproves lineup protection. ESPN.com. https://insider.espn.com/mlb/insider/story/_/id/7970598/andrew-mccutchen-another-example-why-lineup-protection-myth-mlb\nHow to quantify lineup protection in baseball ‚Äî The Paraball notes. (2024, April 9). The Paraball Notes. https://www.paraballnotes.com/blog/how-to-quantify-lineup-protection-in-baseball\nLaurila,¬†D. (2016, July 14). Player‚Äôs view: Does lineup protection exist? FanGraphs Baseball. https://blogs.fangraphs.com/players-view-does-lineup-protection-exist/\nPetriello,¬†M. (2015, April 13). Billy Hamilton‚Äôs reverse lineup protection. FanGraphs Baseball. https://blogs.fangraphs.com/billy-hamiltons-reverse-lineup-protection/\nPhillips,¬†D.¬†C. (2011). You‚Äôre hurting my game: Lineup protection and injuries in Major League Baseball. Journal of Quantitative Analysis in Sports, 7(3). https://doi.org/10.2202/1559-0410.1296\nStavenhagen,¬†C. (2019, May 7). The (latest) numbers behind Miguel Cabrera‚Äôs remarks on lineup protection. The New York Times. https://www.nytimes.com/athletic/965467/2019/05/07/the-latest-numbers-behind-miguel-cabreras-remarks-on-lineup-protection/\nTango,¬†T. (2006, April 7). Pitching around batters. The Hardball Times. https://tht.fangraphs.com/pitching-around-batters/\nWeinberg,¬†N. (2013, January 1). Lineup protection: Fact or fiction? New English D. https://newenglishd.com/2013/01/01/lineup-protection-fact-or-fiction/\nWiser,¬†J. (2014, February 19). Let‚Äôs talk about lineup protection. Inside the ‚ÄôZona. https://insidethezona.com/2014/02/lets-talk-lineup-protection/"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Lance‚Äôs Lineups ‚öæ",
    "section": "",
    "text": "I‚Äôm Lance Brady, a senior at Yale University majoring in Statistics & Data Science.\nFor my senior thesis, I‚Äôm exploring baseball lineup optimization using data-driven methods.\nHere are some of my articles and thoughts on lineup optimization!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlog Post #2: Swing Profiles\n\n\n\n\n\n\nswing profiles\n\n\nlineups\n\n\nstatcast\n\n\n\n\n\n\n\n\n\nFeb 26, 2025\n\n\nLance Brady\n\n\n\n\n\n\n\n\n\n\n\n\nBlog Post #1: Lineup Protection\n\n\n\n\n\n\nlineup protection\n\n\nlineups\n\n\nstatcast\n\n\n\n\n\n\n\n\n\nFeb 18, 2025\n\n\nLance Brady\n\n\n\n\n\n\nNo matching items"
  }
]